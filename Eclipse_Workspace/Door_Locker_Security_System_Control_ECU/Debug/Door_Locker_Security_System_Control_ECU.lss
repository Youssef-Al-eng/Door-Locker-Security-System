
Door_Locker_Security_System_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002664  000026f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080007e  0080007e  00002716  2**0
                  ALLOC
  3 .stab         00002bb0  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bca  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ab84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_4>
      14:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_9>
      28:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__vector_10>
      2c:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <main>
      8a:	0c 94 30 13 	jmp	0x2660	; 0x2660 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 25 13 	jmp	0x264a	; 0x264a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
/*******************************************************************************
 *                           Function Definitions                              *
 *******************************************************************************/

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	08 f0       	brcs	.+2      	; 0xb68 <GPIO_setupPinDirection+0x22>
     b66:	db c0       	rjmp	.+438    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <GPIO_setupPinDirection+0x2a>
     b6e:	d7 c0       	rjmp	.+430    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
		return;

	switch (port_num)
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	3d 87       	std	Y+13, r19	; 0x0d
     b78:	2c 87       	std	Y+12, r18	; 0x0c
     b7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b7c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <GPIO_setupPinDirection+0x40>
     b84:	44 c0       	rjmp	.+136    	; 0xc0e <GPIO_setupPinDirection+0xc8>
     b86:	2c 85       	ldd	r18, Y+12	; 0x0c
     b88:	3d 85       	ldd	r19, Y+13	; 0x0d
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <GPIO_setupPinDirection+0x54>
     b90:	8c 85       	ldd	r24, Y+12	; 0x0c
     b92:	9d 85       	ldd	r25, Y+13	; 0x0d
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	71 f0       	breq	.+28     	; 0xbb4 <GPIO_setupPinDirection+0x6e>
     b98:	c2 c0       	rjmp	.+388    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     b9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b9c:	3d 85       	ldd	r19, Y+13	; 0x0d
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <GPIO_setupPinDirection+0x60>
     ba4:	62 c0       	rjmp	.+196    	; 0xc6a <GPIO_setupPinDirection+0x124>
     ba6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <GPIO_setupPinDirection+0x6c>
     bb0:	89 c0       	rjmp	.+274    	; 0xcc4 <GPIO_setupPinDirection+0x17e>
     bb2:	b5 c0       	rjmp	.+362    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
	{
	case PORTA_ID:
		direction == PIN_OUTPUT ? SET_BIT(DDRA, pin_num) : CLEAR_BIT(DDRA, pin_num);
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	a9 f4       	brne	.+42     	; 0xbe4 <GPIO_setupPinDirection+0x9e>
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <GPIO_setupPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <GPIO_setupPinDirection+0x8e>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	9c 91       	ld	r25, X
     be2:	9d c0       	rjmp	.+314    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     be4:	aa e3       	ldi	r26, 0x3A	; 58
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ea e3       	ldi	r30, 0x3A	; 58
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <GPIO_setupPinDirection+0xba>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	2a 95       	dec	r18
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <GPIO_setupPinDirection+0xb6>
     c04:	80 95       	com	r24
     c06:	84 23       	and	r24, r20
     c08:	8c 93       	st	X, r24
     c0a:	2c 91       	ld	r18, X
     c0c:	88 c0       	rjmp	.+272    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
		break;
	case PORTB_ID:
		direction == PIN_OUTPUT ? SET_BIT(DDRB, pin_num) : CLEAR_BIT(DDRB, pin_num);
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	a9 f4       	brne	.+42     	; 0xc3e <GPIO_setupPinDirection+0xf8>
     c14:	a7 e3       	ldi	r26, 0x37	; 55
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e3       	ldi	r30, 0x37	; 55
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <GPIO_setupPinDirection+0xec>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <GPIO_setupPinDirection+0xe8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	3c 91       	ld	r19, X
     c3c:	70 c0       	rjmp	.+224    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     c3e:	a7 e3       	ldi	r26, 0x37	; 55
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e7 e3       	ldi	r30, 0x37	; 55
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <GPIO_setupPinDirection+0x116>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <GPIO_setupPinDirection+0x112>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	8c 91       	ld	r24, X
     c68:	5a c0       	rjmp	.+180    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
		break;
	case PORTC_ID:
		direction == PIN_OUTPUT ? SET_BIT(DDRC, pin_num) : CLEAR_BIT(DDRC, pin_num);
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	a9 f4       	brne	.+42     	; 0xc9a <GPIO_setupPinDirection+0x154>
     c70:	a4 e3       	ldi	r26, 0x34	; 52
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e4 e3       	ldi	r30, 0x34	; 52
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	8a 81       	ldd	r24, Y+2	; 0x02
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 2e       	mov	r0, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <GPIO_setupPinDirection+0x148>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <GPIO_setupPinDirection+0x144>
     c92:	84 2b       	or	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	9c 91       	ld	r25, X
     c98:	42 c0       	rjmp	.+132    	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     c9a:	a4 e3       	ldi	r26, 0x34	; 52
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e3       	ldi	r30, 0x34	; 52
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <GPIO_setupPinDirection+0x170>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	2a 95       	dec	r18
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <GPIO_setupPinDirection+0x16c>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	2c 91       	ld	r18, X
     cc2:	2d c0       	rjmp	.+90     	; 0xd1e <GPIO_setupPinDirection+0x1d8>
		break;
	case PORTD_ID:
		direction == PIN_OUTPUT ? SET_BIT(DDRD, pin_num) : CLEAR_BIT(DDRD, pin_num);
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a9 f4       	brne	.+42     	; 0xcf4 <GPIO_setupPinDirection+0x1ae>
     cca:	a1 e3       	ldi	r26, 0x31	; 49
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e1 e3       	ldi	r30, 0x31	; 49
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <GPIO_setupPinDirection+0x1a2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <GPIO_setupPinDirection+0x19e>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	3c 91       	ld	r19, X
     cf2:	15 c0       	rjmp	.+42     	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     cf4:	a1 e3       	ldi	r26, 0x31	; 49
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e1 e3       	ldi	r30, 0x31	; 49
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <GPIO_setupPinDirection+0x1cc>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <GPIO_setupPinDirection+0x1c8>
     d16:	80 95       	com	r24
     d18:	84 23       	and	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	8c 91       	ld	r24, X
		break;
	}
}
     d1e:	2d 96       	adiw	r28, 0x0d	; 13
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <GPIO_writePin>:

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	2d 97       	sbiw	r28, 0x0d	; 13
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	6a 83       	std	Y+2, r22	; 0x02
     d48:	4b 83       	std	Y+3, r20	; 0x03
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <GPIO_writePin+0x22>
     d50:	db c0       	rjmp	.+438    	; 0xf08 <GPIO_writePin+0x1d8>
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	08 f0       	brcs	.+2      	; 0xd5a <GPIO_writePin+0x2a>
     d58:	d7 c0       	rjmp	.+430    	; 0xf08 <GPIO_writePin+0x1d8>
		return;

	switch (port_num)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3d 87       	std	Y+13, r19	; 0x0d
     d62:	2c 87       	std	Y+12, r18	; 0x0c
     d64:	8c 85       	ldd	r24, Y+12	; 0x0c
     d66:	9d 85       	ldd	r25, Y+13	; 0x0d
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <GPIO_writePin+0x40>
     d6e:	44 c0       	rjmp	.+136    	; 0xdf8 <GPIO_writePin+0xc8>
     d70:	2c 85       	ldd	r18, Y+12	; 0x0c
     d72:	3d 85       	ldd	r19, Y+13	; 0x0d
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	2c f4       	brge	.+10     	; 0xd84 <GPIO_writePin+0x54>
     d7a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	71 f0       	breq	.+28     	; 0xd9e <GPIO_writePin+0x6e>
     d82:	c2 c0       	rjmp	.+388    	; 0xf08 <GPIO_writePin+0x1d8>
     d84:	2c 85       	ldd	r18, Y+12	; 0x0c
     d86:	3d 85       	ldd	r19, Y+13	; 0x0d
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <GPIO_writePin+0x60>
     d8e:	62 c0       	rjmp	.+196    	; 0xe54 <GPIO_writePin+0x124>
     d90:	8c 85       	ldd	r24, Y+12	; 0x0c
     d92:	9d 85       	ldd	r25, Y+13	; 0x0d
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	91 05       	cpc	r25, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <GPIO_writePin+0x6c>
     d9a:	89 c0       	rjmp	.+274    	; 0xeae <GPIO_writePin+0x17e>
     d9c:	b5 c0       	rjmp	.+362    	; 0xf08 <GPIO_writePin+0x1d8>
	{
	case PORTA_ID:
		value == LOGIC_HIGH ? SET_BIT(PORTA, pin_num) : CLEAR_BIT(PORTA, pin_num);
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	a9 f4       	brne	.+42     	; 0xdce <GPIO_writePin+0x9e>
     da4:	ab e3       	ldi	r26, 0x3B	; 59
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	eb e3       	ldi	r30, 0x3B	; 59
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <GPIO_writePin+0x92>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <GPIO_writePin+0x8e>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	9c 91       	ld	r25, X
     dcc:	9d c0       	rjmp	.+314    	; 0xf08 <GPIO_writePin+0x1d8>
     dce:	ab e3       	ldi	r26, 0x3B	; 59
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	eb e3       	ldi	r30, 0x3B	; 59
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <GPIO_writePin+0xba>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	2a 95       	dec	r18
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <GPIO_writePin+0xb6>
     dee:	80 95       	com	r24
     df0:	84 23       	and	r24, r20
     df2:	8c 93       	st	X, r24
     df4:	2c 91       	ld	r18, X
     df6:	88 c0       	rjmp	.+272    	; 0xf08 <GPIO_writePin+0x1d8>
		break;
	case PORTB_ID:
		value == LOGIC_HIGH ? SET_BIT(PORTB, pin_num) : CLEAR_BIT(PORTB, pin_num);
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	a9 f4       	brne	.+42     	; 0xe28 <GPIO_writePin+0xf8>
     dfe:	a8 e3       	ldi	r26, 0x38	; 56
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e8 e3       	ldi	r30, 0x38	; 56
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <GPIO_writePin+0xec>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <GPIO_writePin+0xe8>
     e20:	84 2b       	or	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	3c 91       	ld	r19, X
     e26:	70 c0       	rjmp	.+224    	; 0xf08 <GPIO_writePin+0x1d8>
     e28:	a8 e3       	ldi	r26, 0x38	; 56
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <GPIO_writePin+0x116>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <GPIO_writePin+0x112>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	8c 91       	ld	r24, X
     e52:	5a c0       	rjmp	.+180    	; 0xf08 <GPIO_writePin+0x1d8>
		break;
	case PORTC_ID:
		value == LOGIC_HIGH ? SET_BIT(PORTC, pin_num) : CLEAR_BIT(PORTC, pin_num);
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	a9 f4       	brne	.+42     	; 0xe84 <GPIO_writePin+0x154>
     e5a:	a5 e3       	ldi	r26, 0x35	; 53
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e3       	ldi	r30, 0x35	; 53
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_writePin+0x148>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_writePin+0x144>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	9c 91       	ld	r25, X
     e82:	42 c0       	rjmp	.+132    	; 0xf08 <GPIO_writePin+0x1d8>
     e84:	a5 e3       	ldi	r26, 0x35	; 53
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e3       	ldi	r30, 0x35	; 53
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0x170>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	2a 95       	dec	r18
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0x16c>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	2c 91       	ld	r18, X
     eac:	2d c0       	rjmp	.+90     	; 0xf08 <GPIO_writePin+0x1d8>
		break;
	case PORTD_ID:
		value == LOGIC_HIGH ? SET_BIT(PORTD, pin_num) : CLEAR_BIT(PORTD, pin_num);
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	a9 f4       	brne	.+42     	; 0xede <GPIO_writePin+0x1ae>
     eb4:	a2 e3       	ldi	r26, 0x32	; 50
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e2 e3       	ldi	r30, 0x32	; 50
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <GPIO_writePin+0x1a2>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <GPIO_writePin+0x19e>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	3c 91       	ld	r19, X
     edc:	15 c0       	rjmp	.+42     	; 0xf08 <GPIO_writePin+0x1d8>
     ede:	a2 e3       	ldi	r26, 0x32	; 50
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e2 e3       	ldi	r30, 0x32	; 50
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <GPIO_writePin+0x1cc>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <GPIO_writePin+0x1c8>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	8c 91       	ld	r24, X
		break;
	}
}
     f08:	2d 96       	adiw	r28, 0x0d	; 13
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <GPIO_readPin>:

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	29 97       	sbiw	r28, 0x09	; 9
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	6a 83       	std	Y+2, r22	; 0x02
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	88 30       	cpi	r24, 0x08	; 8
     f36:	18 f4       	brcc	.+6      	; 0xf3e <GPIO_readPin+0x24>
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	10 f0       	brcs	.+4      	; 0xf42 <GPIO_readPin+0x28>
		return LOGIC_LOW;
     f3e:	19 86       	std	Y+9, r1	; 0x09
     f40:	8a c0       	rjmp	.+276    	; 0x1056 <GPIO_readPin+0x13c>

	switch (port_num)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	38 87       	std	Y+8, r19	; 0x08
     f4a:	2f 83       	std	Y+7, r18	; 0x07
     f4c:	4f 81       	ldd	r20, Y+7	; 0x07
     f4e:	58 85       	ldd	r21, Y+8	; 0x08
     f50:	41 30       	cpi	r20, 0x01	; 1
     f52:	51 05       	cpc	r21, r1
     f54:	89 f1       	breq	.+98     	; 0xfb8 <GPIO_readPin+0x9e>
     f56:	8f 81       	ldd	r24, Y+7	; 0x07
     f58:	98 85       	ldd	r25, Y+8	; 0x08
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	91 05       	cpc	r25, r1
     f5e:	34 f4       	brge	.+12     	; 0xf6c <GPIO_readPin+0x52>
     f60:	2f 81       	ldd	r18, Y+7	; 0x07
     f62:	38 85       	ldd	r19, Y+8	; 0x08
     f64:	21 15       	cp	r18, r1
     f66:	31 05       	cpc	r19, r1
     f68:	69 f0       	breq	.+26     	; 0xf84 <GPIO_readPin+0x6a>
     f6a:	74 c0       	rjmp	.+232    	; 0x1054 <GPIO_readPin+0x13a>
     f6c:	4f 81       	ldd	r20, Y+7	; 0x07
     f6e:	58 85       	ldd	r21, Y+8	; 0x08
     f70:	42 30       	cpi	r20, 0x02	; 2
     f72:	51 05       	cpc	r21, r1
     f74:	d9 f1       	breq	.+118    	; 0xfec <GPIO_readPin+0xd2>
     f76:	8f 81       	ldd	r24, Y+7	; 0x07
     f78:	98 85       	ldd	r25, Y+8	; 0x08
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <GPIO_readPin+0x68>
     f80:	4f c0       	rjmp	.+158    	; 0x1020 <GPIO_readPin+0x106>
     f82:	68 c0       	rjmp	.+208    	; 0x1054 <GPIO_readPin+0x13a>
	{
	case PORTA_ID:
		return BIT_IS_SET(PINA, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     f84:	e9 e3       	ldi	r30, 0x39	; 57
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <GPIO_readPin+0x82>
     f98:	55 95       	asr	r21
     f9a:	47 95       	ror	r20
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <GPIO_readPin+0x7e>
     fa0:	ca 01       	movw	r24, r20
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	88 23       	and	r24, r24
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <GPIO_readPin+0x96>
     faa:	51 e0       	ldi	r21, 0x01	; 1
     fac:	5e 83       	std	Y+6, r21	; 0x06
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <GPIO_readPin+0x98>
     fb0:	1e 82       	std	Y+6, r1	; 0x06
     fb2:	8e 81       	ldd	r24, Y+6	; 0x06
     fb4:	89 87       	std	Y+9, r24	; 0x09
     fb6:	4f c0       	rjmp	.+158    	; 0x1056 <GPIO_readPin+0x13c>
	case PORTB_ID:
		return BIT_IS_SET(PINB, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     fb8:	e6 e3       	ldi	r30, 0x36	; 54
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xb6>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xb2>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xca>
     fde:	51 e0       	ldi	r21, 0x01	; 1
     fe0:	5d 83       	std	Y+5, r21	; 0x05
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <GPIO_readPin+0xcc>
     fe4:	1d 82       	std	Y+5, r1	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	89 87       	std	Y+9, r24	; 0x09
     fea:	35 c0       	rjmp	.+106    	; 0x1056 <GPIO_readPin+0x13c>
	case PORTC_ID:
		return BIT_IS_SET(PINC, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
     fec:	e3 e3       	ldi	r30, 0x33	; 51
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_readPin+0xea>
    1000:	55 95       	asr	r21
    1002:	47 95       	ror	r20
    1004:	8a 95       	dec	r24
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_readPin+0xe6>
    1008:	ca 01       	movw	r24, r20
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	90 70       	andi	r25, 0x00	; 0
    100e:	88 23       	and	r24, r24
    1010:	19 f0       	breq	.+6      	; 0x1018 <GPIO_readPin+0xfe>
    1012:	51 e0       	ldi	r21, 0x01	; 1
    1014:	5c 83       	std	Y+4, r21	; 0x04
    1016:	01 c0       	rjmp	.+2      	; 0x101a <GPIO_readPin+0x100>
    1018:	1c 82       	std	Y+4, r1	; 0x04
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	89 87       	std	Y+9, r24	; 0x09
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <GPIO_readPin+0x13c>
	case PORTD_ID:
		return BIT_IS_SET(PIND, pin_num) ? LOGIC_HIGH : LOGIC_LOW;
    1020:	e0 e3       	ldi	r30, 0x30	; 48
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_readPin+0x11e>
    1034:	55 95       	asr	r21
    1036:	47 95       	ror	r20
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <GPIO_readPin+0x11a>
    103c:	ca 01       	movw	r24, r20
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	88 23       	and	r24, r24
    1044:	19 f0       	breq	.+6      	; 0x104c <GPIO_readPin+0x132>
    1046:	51 e0       	ldi	r21, 0x01	; 1
    1048:	5b 83       	std	Y+3, r21	; 0x03
    104a:	01 c0       	rjmp	.+2      	; 0x104e <GPIO_readPin+0x134>
    104c:	1b 82       	std	Y+3, r1	; 0x03
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	89 87       	std	Y+9, r24	; 0x09
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <GPIO_readPin+0x13c>
	default:
		return LOGIC_LOW;
    1054:	19 86       	std	Y+9, r1	; 0x09
    1056:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    1058:	29 96       	adiw	r28, 0x09	; 9
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <GPIO_setupPortDirection+0x6>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <GPIO_setupPortDirection+0x8>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	84 30       	cpi	r24, 0x04	; 4
    107e:	90 f5       	brcc	.+100    	; 0x10e4 <GPIO_setupPortDirection+0x7a>
		return;

	switch (port_num)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	3c 83       	std	Y+4, r19	; 0x04
    1088:	2b 83       	std	Y+3, r18	; 0x03
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	d1 f0       	breq	.+52     	; 0x10c8 <GPIO_setupPortDirection+0x5e>
    1094:	2b 81       	ldd	r18, Y+3	; 0x03
    1096:	3c 81       	ldd	r19, Y+4	; 0x04
    1098:	22 30       	cpi	r18, 0x02	; 2
    109a:	31 05       	cpc	r19, r1
    109c:	2c f4       	brge	.+10     	; 0x10a8 <GPIO_setupPortDirection+0x3e>
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	61 f0       	breq	.+24     	; 0x10be <GPIO_setupPortDirection+0x54>
    10a6:	1e c0       	rjmp	.+60     	; 0x10e4 <GPIO_setupPortDirection+0x7a>
    10a8:	2b 81       	ldd	r18, Y+3	; 0x03
    10aa:	3c 81       	ldd	r19, Y+4	; 0x04
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	81 f0       	breq	.+32     	; 0x10d2 <GPIO_setupPortDirection+0x68>
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	91 05       	cpc	r25, r1
    10ba:	81 f0       	breq	.+32     	; 0x10dc <GPIO_setupPortDirection+0x72>
    10bc:	13 c0       	rjmp	.+38     	; 0x10e4 <GPIO_setupPortDirection+0x7a>
	{
	case PORTA_ID:
		DDRA = direction;
    10be:	ea e3       	ldi	r30, 0x3A	; 58
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	80 83       	st	Z, r24
    10c6:	0e c0       	rjmp	.+28     	; 0x10e4 <GPIO_setupPortDirection+0x7a>
		break;
	case PORTB_ID:
		DDRB = direction;
    10c8:	e7 e3       	ldi	r30, 0x37	; 55
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	80 83       	st	Z, r24
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <GPIO_setupPortDirection+0x7a>
		break;
	case PORTC_ID:
		DDRC = direction;
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	80 83       	st	Z, r24
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <GPIO_setupPortDirection+0x7a>
		break;
	case PORTD_ID:
		DDRD = direction;
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	80 83       	st	Z, r24
		break;
	}
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <GPIO_writePort>:

void GPIO_writePort(uint8 port_num, uint8 value)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <GPIO_writePort+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_writePort+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= NUM_OF_PORTS)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	84 30       	cpi	r24, 0x04	; 4
    1106:	90 f5       	brcc	.+100    	; 0x116c <GPIO_writePort+0x7a>
		return;

	switch (port_num)
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3c 83       	std	Y+4, r19	; 0x04
    1110:	2b 83       	std	Y+3, r18	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	d1 f0       	breq	.+52     	; 0x1150 <GPIO_writePort+0x5e>
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	3c 81       	ldd	r19, Y+4	; 0x04
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	2c f4       	brge	.+10     	; 0x1130 <GPIO_writePort+0x3e>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	61 f0       	breq	.+24     	; 0x1146 <GPIO_writePort+0x54>
    112e:	1e c0       	rjmp	.+60     	; 0x116c <GPIO_writePort+0x7a>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	81 f0       	breq	.+32     	; 0x115a <GPIO_writePort+0x68>
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	81 f0       	breq	.+32     	; 0x1164 <GPIO_writePort+0x72>
    1144:	13 c0       	rjmp	.+38     	; 0x116c <GPIO_writePort+0x7a>
	{
	case PORTA_ID:
		PORTA = value;
    1146:	eb e3       	ldi	r30, 0x3B	; 59
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
    114e:	0e c0       	rjmp	.+28     	; 0x116c <GPIO_writePort+0x7a>
		break;
	case PORTB_ID:
		PORTB = value;
    1150:	e8 e3       	ldi	r30, 0x38	; 56
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	09 c0       	rjmp	.+18     	; 0x116c <GPIO_writePort+0x7a>
		break;
	case PORTC_ID:
		PORTC = value;
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
    1162:	04 c0       	rjmp	.+8      	; 0x116c <GPIO_writePort+0x7a>
		break;
	case PORTD_ID:
		PORTD = value;
    1164:	e2 e3       	ldi	r30, 0x32	; 50
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	80 83       	st	Z, r24
		break;
	}
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <GPIO_readPort>:

uint8 GPIO_readPort(uint8 port_num)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <GPIO_readPort+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <GPIO_readPort+0x8>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	89 83       	std	Y+1, r24	; 0x01
	if (port_num >= NUM_OF_PORTS)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	10 f0       	brcs	.+4      	; 0x1192 <GPIO_readPort+0x18>
		return 0;
    118e:	1c 82       	std	Y+4, r1	; 0x04
    1190:	34 c0       	rjmp	.+104    	; 0x11fa <GPIO_readPort+0x80>

	switch (port_num)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3b 83       	std	Y+3, r19	; 0x03
    119a:	2a 83       	std	Y+2, r18	; 0x02
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	d1 f0       	breq	.+52     	; 0x11da <GPIO_readPort+0x60>
    11a6:	2a 81       	ldd	r18, Y+2	; 0x02
    11a8:	3b 81       	ldd	r19, Y+3	; 0x03
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	2c f4       	brge	.+10     	; 0x11ba <GPIO_readPort+0x40>
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <GPIO_readPort+0x56>
    11b8:	1f c0       	rjmp	.+62     	; 0x11f8 <GPIO_readPort+0x7e>
    11ba:	2a 81       	ldd	r18, Y+2	; 0x02
    11bc:	3b 81       	ldd	r19, Y+3	; 0x03
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <GPIO_readPort+0x6a>
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	9b 81       	ldd	r25, Y+3	; 0x03
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	81 f0       	breq	.+32     	; 0x11ee <GPIO_readPort+0x74>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <GPIO_readPort+0x7e>
	{
	case PORTA_ID:
		return PINA;
    11d0:	e9 e3       	ldi	r30, 0x39	; 57
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	90 81       	ld	r25, Z
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	10 c0       	rjmp	.+32     	; 0x11fa <GPIO_readPort+0x80>
	case PORTB_ID:
		return PINB;
    11da:	e6 e3       	ldi	r30, 0x36	; 54
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	20 81       	ld	r18, Z
    11e0:	2c 83       	std	Y+4, r18	; 0x04
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <GPIO_readPort+0x80>
	case PORTC_ID:
		return PINC;
    11e4:	e3 e3       	ldi	r30, 0x33	; 51
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	30 81       	ld	r19, Z
    11ea:	3c 83       	std	Y+4, r19	; 0x04
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <GPIO_readPort+0x80>
	case PORTD_ID:
		return PIND;
    11ee:	e0 e3       	ldi	r30, 0x30	; 48
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	8c 83       	std	Y+4, r24	; 0x04
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <GPIO_readPort+0x80>
	default:
		return 0;
    11f8:	1c 82       	std	Y+4, r1	; 0x04
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <PWM_Timer0_Start>:
/*******************************************************************************
 *                          Function Definitions                               *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;  // Initialize Timer0 counter
    1216:	e2 e5       	ldi	r30, 0x52	; 82
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1

	OCR0 = (duty_cycle * 255) / 100;  // Set output compare register value based on duty cycle
    121c:	ec e5       	ldi	r30, 0x5C	; 92
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	48 2f       	mov	r20, r24
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	ca 01       	movw	r24, r20
    1228:	9c 01       	movw	r18, r24
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	c9 01       	movw	r24, r18
    1230:	96 95       	lsr	r25
    1232:	98 2f       	mov	r25, r24
    1234:	88 27       	eor	r24, r24
    1236:	97 95       	ror	r25
    1238:	87 95       	ror	r24
    123a:	82 1b       	sub	r24, r18
    123c:	93 0b       	sbc	r25, r19
    123e:	84 0f       	add	r24, r20
    1240:	95 1f       	adc	r25, r21
    1242:	24 e6       	ldi	r18, 0x64	; 100
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	b9 01       	movw	r22, r18
    1248:	0e 94 b0 12 	call	0x2560	; 0x2560 <__divmodhi4>
    124c:	cb 01       	movw	r24, r22
    124e:	80 83       	st	Z, r24

	// Configure PB3/OC0 as output
	DDRB |= (1 << PB3);
    1250:	a7 e3       	ldi	r26, 0x37	; 55
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	8c 93       	st	X, r24
	 * Timer0 Configuration:
	 * - Fast PWM Mode: WGM01 = 1, WGM00 = 1
	 * - Non-Inverted Mode: COM01 = 1, COM00 = 0
	 * - Prescaler F_CPU/64: CS01 = 1, CS00 = 1
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01) | (1 << CS00);
    125e:	e3 e5       	ldi	r30, 0x53	; 83
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8b e6       	ldi	r24, 0x6B	; 107
    1264:	80 83       	st	Z, r24
}
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <__vector_11>:
 *******************************************************************************/
/*
 * ISR For Timer0
 */
ISR(TIMER0_OVF_vect)
{
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    1298:	80 91 7e 00 	lds	r24, 0x007E
    129c:	90 91 7f 00 	lds	r25, 0x007F
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	29 f0       	breq	.+10     	; 0x12ae <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0)();
    12a4:	e0 91 7e 00 	lds	r30, 0x007E
    12a8:	f0 91 7f 00 	lds	r31, 0x007F
    12ac:	09 95       	icall
	}
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	0f 90       	pop	r0
    12d0:	1f 90       	pop	r1
    12d2:	18 95       	reti

000012d4 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    12d4:	1f 92       	push	r1
    12d6:	0f 92       	push	r0
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	0f 92       	push	r0
    12dc:	11 24       	eor	r1, r1
    12de:	2f 93       	push	r18
    12e0:	3f 93       	push	r19
    12e2:	4f 93       	push	r20
    12e4:	5f 93       	push	r21
    12e6:	6f 93       	push	r22
    12e8:	7f 93       	push	r23
    12ea:	8f 93       	push	r24
    12ec:	9f 93       	push	r25
    12ee:	af 93       	push	r26
    12f0:	bf 93       	push	r27
    12f2:	ef 93       	push	r30
    12f4:	ff 93       	push	r31
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    12fe:	80 91 7e 00 	lds	r24, 0x007E
    1302:	90 91 7f 00 	lds	r25, 0x007F
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	29 f0       	breq	.+10     	; 0x1314 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer0)();
    130a:	e0 91 7e 00 	lds	r30, 0x007E
    130e:	f0 91 7f 00 	lds	r31, 0x007F
    1312:	09 95       	icall
	}
}
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	bf 91       	pop	r27
    131e:	af 91       	pop	r26
    1320:	9f 91       	pop	r25
    1322:	8f 91       	pop	r24
    1324:	7f 91       	pop	r23
    1326:	6f 91       	pop	r22
    1328:	5f 91       	pop	r21
    132a:	4f 91       	pop	r20
    132c:	3f 91       	pop	r19
    132e:	2f 91       	pop	r18
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <__vector_9>:

/*
 * ISR For Timer1
 */
ISR(TIMER1_OVF_vect)
{
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	2f 93       	push	r18
    1346:	3f 93       	push	r19
    1348:	4f 93       	push	r20
    134a:	5f 93       	push	r21
    134c:	6f 93       	push	r22
    134e:	7f 93       	push	r23
    1350:	8f 93       	push	r24
    1352:	9f 93       	push	r25
    1354:	af 93       	push	r26
    1356:	bf 93       	push	r27
    1358:	ef 93       	push	r30
    135a:	ff 93       	push	r31
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    1364:	80 91 80 00 	lds	r24, 0x0080
    1368:	90 91 81 00 	lds	r25, 0x0081
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	29 f0       	breq	.+10     	; 0x137a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1)();
    1370:	e0 91 80 00 	lds	r30, 0x0080
    1374:	f0 91 81 00 	lds	r31, 0x0081
    1378:	09 95       	icall
	}
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    13ca:	80 91 80 00 	lds	r24, 0x0080
    13ce:	90 91 81 00 	lds	r25, 0x0081
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer1)();
    13d6:	e0 91 80 00 	lds	r30, 0x0080
    13da:	f0 91 81 00 	lds	r31, 0x0081
    13de:	09 95       	icall
	}
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <__vector_5>:

/*
 * ISR For Timer2
 */
ISR(TIMER2_OVF_vect)
{
    1406:	1f 92       	push	r1
    1408:	0f 92       	push	r0
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	2f 93       	push	r18
    1412:	3f 93       	push	r19
    1414:	4f 93       	push	r20
    1416:	5f 93       	push	r21
    1418:	6f 93       	push	r22
    141a:	7f 93       	push	r23
    141c:	8f 93       	push	r24
    141e:	9f 93       	push	r25
    1420:	af 93       	push	r26
    1422:	bf 93       	push	r27
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    1430:	80 91 82 00 	lds	r24, 0x0082
    1434:	90 91 83 00 	lds	r25, 0x0083
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	29 f0       	breq	.+10     	; 0x1446 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2)();
    143c:	e0 91 82 00 	lds	r30, 0x0082
    1440:	f0 91 83 00 	lds	r31, 0x0083
    1444:	09 95       	icall
	}
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    146c:	1f 92       	push	r1
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	0f 92       	push	r0
    1474:	11 24       	eor	r1, r1
    1476:	2f 93       	push	r18
    1478:	3f 93       	push	r19
    147a:	4f 93       	push	r20
    147c:	5f 93       	push	r21
    147e:	6f 93       	push	r22
    1480:	7f 93       	push	r23
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	af 93       	push	r26
    1488:	bf 93       	push	r27
    148a:	ef 93       	push	r30
    148c:	ff 93       	push	r31
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    1496:	80 91 82 00 	lds	r24, 0x0082
    149a:	90 91 83 00 	lds	r25, 0x0083
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	29 f0       	breq	.+10     	; 0x14ac <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_timer2)();
    14a2:	e0 91 82 00 	lds	r30, 0x0082
    14a6:	f0 91 83 00 	lds	r31, 0x0083
    14aa:	09 95       	icall
	}
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	ff 91       	pop	r31
    14b2:	ef 91       	pop	r30
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <Timer_init>:

/*
 * Function to initialize the Timer driver.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <Timer_init+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <Timer_init+0x8>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3c 83       	std	Y+4, r19	; 0x04
    14ee:	2b 83       	std	Y+3, r18	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <Timer_init+0x2a>
    14fa:	47 c0       	rjmp	.+142    	; 0x158a <Timer_init+0xb8>
    14fc:	2b 81       	ldd	r18, Y+3	; 0x03
    14fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <Timer_init+0x36>
    1506:	85 c0       	rjmp	.+266    	; 0x1612 <Timer_init+0x140>
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	09 f0       	breq	.+2      	; 0x1512 <Timer_init+0x40>
    1510:	bb c0       	rjmp	.+374    	; 0x1688 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS00 & CS01 & CS02.
		 */
		TCCR0 = (1<<FOC0) | ((Config_Ptr->timer_mode)<<WGM01) | ((Config_Ptr->timer_clock)<<CS00);
    1512:	a3 e5       	ldi	r26, 0x53	; 83
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	86 81       	ldd	r24, Z+6	; 0x06
    151c:	88 2f       	mov	r24, r24
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	98 2f       	mov	r25, r24
    152e:	90 68       	ori	r25, 0x80	; 128
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	85 81       	ldd	r24, Z+5	; 0x05
    1536:	89 2b       	or	r24, r25
    1538:	8c 93       	st	X, r24

		/* Set Timer/Counter Register – TCNT0 */
		TCNT0 = Config_Ptr->timer_InitialValue;
    153a:	a2 e5       	ldi	r26, 0x52	; 82
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e9 81       	ldd	r30, Y+1	; 0x01
    1540:	fa 81       	ldd	r31, Y+2	; 0x02
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	86 81       	ldd	r24, Z+6	; 0x06
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	39 f4       	brne	.+14     	; 0x1560 <Timer_init+0x8e>
		{
			/* Set Output Compare Register – OCR0 */
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1552:	ac e5       	ldi	r26, 0x5C	; 92
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e9 81       	ldd	r30, Y+1	; 0x01
    1558:	fa 81       	ldd	r31, Y+2	; 0x02
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1560:	e9 81       	ldd	r30, Y+1	; 0x01
    1562:	fa 81       	ldd	r31, Y+2	; 0x02
    1564:	86 81       	ldd	r24, Z+6	; 0x06
    1566:	88 23       	and	r24, r24
    1568:	41 f4       	brne	.+16     	; 0x157a <Timer_init+0xa8>
		{
			TIMSK |= (1<<TOIE0);
    156a:	a9 e5       	ldi	r26, 0x59	; 89
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e9 e5       	ldi	r30, 0x59	; 89
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	8c 93       	st	X, r24
    1578:	87 c0       	rjmp	.+270    	; 0x1688 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE0);
    157a:	a9 e5       	ldi	r26, 0x59	; 89
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e9 e5       	ldi	r30, 0x59	; 89
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	8c 93       	st	X, r24
    1588:	7f c0       	rjmp	.+254    	; 0x1688 <Timer_init+0x1b6>
		 * The FOC1A/FOC1B = 1 when the WGM13:0 bits specifies a non-PWM mode.
		 * Normal mode WGM10 = 0, WGM11 = 0, WGM12 = 0; WGM13 = 0
		 * Compare mode WGM10 = 0, WGM11 = 0, WGM12 = 1; WGM13 = 0
		 * Set clock as we need from CS10 & CS11 & CS12.
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    158a:	ef e4       	ldi	r30, 0x4F	; 79
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8c e0       	ldi	r24, 0x0C	; 12
    1590:	80 83       	st	Z, r24
		TCCR1B = ((Config_Ptr->timer_mode)<<WGM12) | ((Config_Ptr->timer_clock)<<CS10);
    1592:	ae e4       	ldi	r26, 0x4E	; 78
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e9 81       	ldd	r30, Y+1	; 0x01
    1598:	fa 81       	ldd	r31, Y+2	; 0x02
    159a:	86 81       	ldd	r24, Z+6	; 0x06
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	98 2f       	mov	r25, r24
    15ae:	e9 81       	ldd	r30, Y+1	; 0x01
    15b0:	fa 81       	ldd	r31, Y+2	; 0x02
    15b2:	85 81       	ldd	r24, Z+5	; 0x05
    15b4:	89 2b       	or	r24, r25
    15b6:	8c 93       	st	X, r24

		/* Set Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = Config_Ptr->timer_InitialValue;
    15b8:	ac e4       	ldi	r26, 0x4C	; 76
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e9 81       	ldd	r30, Y+1	; 0x01
    15be:	fa 81       	ldd	r31, Y+2	; 0x02
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	9c 93       	st	X, r25
    15c8:	8e 93       	st	-X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	86 81       	ldd	r24, Z+6	; 0x06
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	51 f4       	brne	.+20     	; 0x15e8 <Timer_init+0x116>
		{
			/* Set Output Compare Register 1 A – OCR1AH and OCR1AL */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    15d4:	ea e4       	ldi	r30, 0x4A	; 74
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	a9 81       	ldd	r26, Y+1	; 0x01
    15da:	ba 81       	ldd	r27, Y+2	; 0x02
    15dc:	12 96       	adiw	r26, 0x02	; 2
    15de:	8d 91       	ld	r24, X+
    15e0:	9c 91       	ld	r25, X
    15e2:	13 97       	sbiw	r26, 0x03	; 3
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    15e8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ea:	fa 81       	ldd	r31, Y+2	; 0x02
    15ec:	86 81       	ldd	r24, Z+6	; 0x06
    15ee:	88 23       	and	r24, r24
    15f0:	41 f4       	brne	.+16     	; 0x1602 <Timer_init+0x130>
		{
			TIMSK |= (1<<TOIE1);
    15f2:	a9 e5       	ldi	r26, 0x59	; 89
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e9 e5       	ldi	r30, 0x59	; 89
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	84 60       	ori	r24, 0x04	; 4
    15fe:	8c 93       	st	X, r24
    1600:	43 c0       	rjmp	.+134    	; 0x1688 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE1A);
    1602:	a9 e5       	ldi	r26, 0x59	; 89
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e9 e5       	ldi	r30, 0x59	; 89
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	8c 93       	st	X, r24
    1610:	3b c0       	rjmp	.+118    	; 0x1688 <Timer_init+0x1b6>
		 * FOC0 = 1 when the WGM00 bit specifies a non-PWM mode.
		 * Normal Mode WGM01=0 & WGM00=0
		 * Compare Mode WGM01=1 & WGM00=0
		 * Set clock as we need from CS20 & CS21 & CS22.
		 */
		TCCR2 = (1<<FOC2) | ((Config_Ptr->timer_mode)<<WGM21) | ((Config_Ptr->timer_clock)<<CS20);
    1612:	a5 e4       	ldi	r26, 0x45	; 69
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	86 81       	ldd	r24, Z+6	; 0x06
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	98 2f       	mov	r25, r24
    162e:	90 68       	ori	r25, 0x80	; 128
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	85 81       	ldd	r24, Z+5	; 0x05
    1636:	89 2b       	or	r24, r25
    1638:	8c 93       	st	X, r24

		/* ٍSet Timer/Counter Register – TCNT2 */
		TCNT2 = Config_Ptr->timer_InitialValue;
    163a:	a4 e4       	ldi	r26, 0x44	; 68
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e9 81       	ldd	r30, Y+1	; 0x01
    1640:	fa 81       	ldd	r31, Y+2	; 0x02
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	8c 93       	st	X, r24

		if((Config_Ptr->timer_mode) == COMPARE_MODE)
    1648:	e9 81       	ldd	r30, Y+1	; 0x01
    164a:	fa 81       	ldd	r31, Y+2	; 0x02
    164c:	86 81       	ldd	r24, Z+6	; 0x06
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	39 f4       	brne	.+14     	; 0x1660 <Timer_init+0x18e>
		{
			/* Set  Output Compare Register – OCR2 */
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    1652:	a3 e4       	ldi	r26, 0x43	; 67
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e9 81       	ldd	r30, Y+1	; 0x01
    1658:	fa 81       	ldd	r31, Y+2	; 0x02
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	8c 93       	st	X, r24

		/*
		 * Enable interrupt for overflow (normal) mode if used.
		 * Enable interrupt for compare mode if used.
		 */
		if((Config_Ptr->timer_mode) == NORMAL_MODE)
    1660:	e9 81       	ldd	r30, Y+1	; 0x01
    1662:	fa 81       	ldd	r31, Y+2	; 0x02
    1664:	86 81       	ldd	r24, Z+6	; 0x06
    1666:	88 23       	and	r24, r24
    1668:	41 f4       	brne	.+16     	; 0x167a <Timer_init+0x1a8>
		{
			TIMSK |= (1<<TOIE2);
    166a:	a9 e5       	ldi	r26, 0x59	; 89
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e9 e5       	ldi	r30, 0x59	; 89
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	8c 93       	st	X, r24
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <Timer_init+0x1b6>
		}
		else
		{
			TIMSK |= (1<<OCIE2);
    167a:	a9 e5       	ldi	r26, 0x59	; 89
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e9 e5       	ldi	r30, 0x59	; 89
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	8c 93       	st	X, r24
		}
		break;
	}
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <Timer_deInit>:

/*
 * Function to disable the Timer via Timer_ID.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <Timer_deInit+0x6>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3b 83       	std	Y+3, r19	; 0x03
    16ac:	2a 83       	std	Y+2, r18	; 0x02
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	39 f1       	breq	.+78     	; 0x1706 <Timer_deInit+0x70>
    16b8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ba:	3b 81       	ldd	r19, Y+3	; 0x03
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <Timer_deInit+0x2e>
    16c2:	42 c0       	rjmp	.+132    	; 0x1748 <Timer_deInit+0xb2>
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	09 f0       	breq	.+2      	; 0x16ce <Timer_deInit+0x38>
    16cc:	58 c0       	rjmp	.+176    	; 0x177e <Timer_deInit+0xe8>
	case TIMER0_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR0 = 0;
    16ce:	e3 e5       	ldi	r30, 0x53	; 83
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	10 82       	st	Z, r1

		/* Reset Timer/Counter Register – TCNT0 */
		TCNT0 = 0;
    16d4:	e2 e5       	ldi	r30, 0x52	; 82
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1

		/* Reset Output Compare Register – OCR0 */
		OCR0 = 0;
    16da:	ec e5       	ldi	r30, 0x5C	; 92
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE0);
    16e0:	a9 e5       	ldi	r26, 0x59	; 89
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e9 e5       	ldi	r30, 0x59	; 89
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    16ee:	a9 e5       	ldi	r26, 0x59	; 89
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e9 e5       	ldi	r30, 0x59	; 89
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8d 7f       	andi	r24, 0xFD	; 253
    16fa:	8c 93       	st	X, r24

		/* Reset call back function pointer. */
		g_callBackPtr_timer0 = NULL_PTR;
    16fc:	10 92 7f 00 	sts	0x007F, r1
    1700:	10 92 7e 00 	sts	0x007E, r1
    1704:	3c c0       	rjmp	.+120    	; 0x177e <Timer_deInit+0xe8>
	case TIMER1_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR1A = 0;
    1706:	ef e4       	ldi	r30, 0x4F	; 79
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	10 82       	st	Z, r1
		TCCR1B = 0;
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	10 82       	st	Z, r1

		/* Reset Timer/Counter1 – TCNT1H and TCNT1L */
		TCNT1 = 0;
    1712:	ec e4       	ldi	r30, 0x4C	; 76
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	11 82       	std	Z+1, r1	; 0x01
    1718:	10 82       	st	Z, r1

		/* Reset Output Compare Register 1 A – OCR1AH and OCR1AL */
		OCR1A = 0;
    171a:	ea e4       	ldi	r30, 0x4A	; 74
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	11 82       	std	Z+1, r1	; 0x01
    1720:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE1);
    1722:	a9 e5       	ldi	r26, 0x59	; 89
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e9 e5       	ldi	r30, 0x59	; 89
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8b 7f       	andi	r24, 0xFB	; 251
    172e:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    1730:	a9 e5       	ldi	r26, 0x59	; 89
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e9 e5       	ldi	r30, 0x59	; 89
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 7e       	andi	r24, 0xEF	; 239
    173c:	8c 93       	st	X, r24

		/* Reset call back function pointer. */
		g_callBackPtr_timer1 = NULL_PTR;
    173e:	10 92 81 00 	sts	0x0081, r1
    1742:	10 92 80 00 	sts	0x0080, r1
    1746:	1b c0       	rjmp	.+54     	; 0x177e <Timer_deInit+0xe8>
	case TIMER2_ID:
		/*
		 * Reset settings.
		 * Disable clock.
		 */
		TCCR2 = 0;
    1748:	e5 e4       	ldi	r30, 0x45	; 69
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	10 82       	st	Z, r1

		/* ٌٍReset Timer/Counter Register – TCNT2 */
		TCNT2 = 0;
    174e:	e4 e4       	ldi	r30, 0x44	; 68
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	10 82       	st	Z, r1

		/* Reset  Output Compare Register – OCR2 */
		OCR2 = 0;
    1754:	e3 e4       	ldi	r30, 0x43	; 67
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	10 82       	st	Z, r1

		/*
		 * Disable interrupt for overflow (normal) mode if used.
		 * Disable interrupt for compare mode if used.
		 */
		TIMSK &= ~(1<<TOIE2);
    175a:	a9 e5       	ldi	r26, 0x59	; 89
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e9 e5       	ldi	r30, 0x59	; 89
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8f 7b       	andi	r24, 0xBF	; 191
    1766:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    1768:	a9 e5       	ldi	r26, 0x59	; 89
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e9 e5       	ldi	r30, 0x59	; 89
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 77       	andi	r24, 0x7F	; 127
    1774:	8c 93       	st	X, r24

		/* Reset call back function pointer. */
		g_callBackPtr_timer2 = NULL_PTR;
    1776:	10 92 83 00 	sts	0x0083, r1
    177a:	10 92 82 00 	sts	0x0082, r1
		break;
	}
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <Timer_getTimerValue>:

/*
 * Function to get the Timer Value.
 */
uint16 Timer_getTimerValue(Timer_ID_Type timer_type)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <Timer_getTimerValue+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <Timer_getTimerValue+0x8>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3d 83       	std	Y+5, r19	; 0x05
    17a2:	2c 83       	std	Y+4, r18	; 0x04
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	89 f0       	breq	.+34     	; 0x17d0 <Timer_getTimerValue+0x46>
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	3d 81       	ldd	r19, Y+5	; 0x05
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	99 f0       	breq	.+38     	; 0x17de <Timer_getTimerValue+0x54>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	b9 f4       	brne	.+46     	; 0x17ee <Timer_getTimerValue+0x64>
	{
	case TIMER0_ID:
		return TCNT0;
    17c0:	e2 e5       	ldi	r30, 0x52	; 82
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3b 83       	std	Y+3, r19	; 0x03
    17cc:	2a 83       	std	Y+2, r18	; 0x02
    17ce:	11 c0       	rjmp	.+34     	; 0x17f2 <Timer_getTimerValue+0x68>
		break;

	case TIMER1_ID:
		return TCNT1;
    17d0:	ec e4       	ldi	r30, 0x4C	; 76
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	9b 83       	std	Y+3, r25	; 0x03
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	0a c0       	rjmp	.+20     	; 0x17f2 <Timer_getTimerValue+0x68>
		break;

	case TIMER2_ID:
		return TCNT2;
    17de:	e4 e4       	ldi	r30, 0x44	; 68
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3b 83       	std	Y+3, r19	; 0x03
    17ea:	2a 83       	std	Y+2, r18	; 0x02
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <Timer_getTimerValue+0x68>
		break;
	default:
		return 0;
    17ee:	1b 82       	std	Y+3, r1	; 0x03
    17f0:	1a 82       	std	Y+2, r1	; 0x02
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
		break;
	}
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <Timer_setCallBack>:

/*
 * Function to set the Call Back function address to the required Timer.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_type)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <Timer_setCallBack+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <Timer_setCallBack+0x8>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	3d 83       	std	Y+5, r19	; 0x05
    1822:	2c 83       	std	Y+4, r18	; 0x04
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	91 05       	cpc	r25, r1
    182c:	81 f0       	breq	.+32     	; 0x184e <Timer_setCallBack+0x48>
    182e:	2c 81       	ldd	r18, Y+4	; 0x04
    1830:	3d 81       	ldd	r19, Y+5	; 0x05
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	91 f0       	breq	.+36     	; 0x185c <Timer_setCallBack+0x56>
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	9d 81       	ldd	r25, Y+5	; 0x05
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	a1 f4       	brne	.+40     	; 0x1868 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_timer0 = a_ptr;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	90 93 7f 00 	sts	0x007F, r25
    1848:	80 93 7e 00 	sts	0x007E, r24
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_timer1 = a_ptr;
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	90 93 81 00 	sts	0x0081, r25
    1856:	80 93 80 00 	sts	0x0080, r24
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_timer2 = a_ptr;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	90 93 83 00 	sts	0x0083, r25
    1864:	80 93 82 00 	sts	0x0082, r24
		break;
	}
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <TWI_init+0x6>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Bit Rate.
	 * Pre-scaler.
	 */
    TWBR = Config_Ptr->bit_rate;
    1886:	a0 e2       	ldi	r26, 0x20	; 32
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e9 81       	ldd	r30, Y+1	; 0x01
    188c:	fa 81       	ldd	r31, Y+2	; 0x02
    188e:	81 81       	ldd	r24, Z+1	; 0x01
    1890:	8c 93       	st	X, r24
	TWSR = 0x00;
    1892:	e1 e2       	ldi	r30, 0x21	; 33
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; 	/* my address. */
    1898:	a2 e2       	ldi	r26, 0x22	; 34
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	80 81       	ld	r24, Z
    18a2:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    18a4:	e6 e5       	ldi	r30, 0x56	; 86
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	84 e0       	ldi	r24, 0x04	; 4
    18aa:	80 83       	st	Z, r24
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <TWI_start>:

void TWI_start(void)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    18be:	e6 e5       	ldi	r30, 0x56	; 86
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	84 ea       	ldi	r24, 0xA4	; 164
    18c4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    18c6:	e6 e5       	ldi	r30, 0x56	; 86
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	88 23       	and	r24, r24
    18ce:	dc f7       	brge	.-10     	; 0x18c6 <TWI_start+0x10>
}
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <TWI_stop>:

void TWI_stop(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    18de:	e6 e5       	ldi	r30, 0x56	; 86
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	84 e9       	ldi	r24, 0x94	; 148
    18e4:	80 83       	st	Z, r24
}
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	0f 92       	push	r0
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    18f8:	e3 e2       	ldi	r30, 0x23	; 35
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1900:	e6 e5       	ldi	r30, 0x56	; 86
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	84 e8       	ldi	r24, 0x84	; 132
    1906:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1908:	e6 e5       	ldi	r30, 0x56	; 86
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	88 23       	and	r24, r24
    1910:	dc f7       	brge	.-10     	; 0x1908 <TWI_writeByte+0x1c>
}
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1922:	e6 e5       	ldi	r30, 0x56	; 86
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	84 ec       	ldi	r24, 0xC4	; 196
    1928:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    192a:	e6 e5       	ldi	r30, 0x56	; 86
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	dc f7       	brge	.-10     	; 0x192a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1934:	e3 e2       	ldi	r30, 0x23	; 35
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1948:	e6 e5       	ldi	r30, 0x56	; 86
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	84 e8       	ldi	r24, 0x84	; 132
    194e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1950:	e6 e5       	ldi	r30, 0x56	; 86
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	dc f7       	brge	.-10     	; 0x1950 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    195a:	e3 e2       	ldi	r30, 0x23	; 35
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1970:	e1 e2       	ldi	r30, 0x21	; 33
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	88 7f       	andi	r24, 0xF8	; 248
    1978:	89 83       	std	Y+1, r24	; 0x01
    return status;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
}
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <UART_init+0x6>
    198a:	00 d0       	rcall	.+0      	; 0x198c <UART_init+0x8>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    1994:	1a 82       	std	Y+2, r1	; 0x02
    1996:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1<<U2X);
    1998:	eb e2       	ldi	r30, 0x2B	; 43
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	80 83       	st	Z, r24
     * RXEN  = 1 Receiver Enable
     * RXEN  = 1 Transmitter Enable
     * UCSZ2 = 0 For 5-bit, 6-bit, 7-bit, 8-bit data mode
     * RXB8 & TXB8 not used for 8-bit data mode
     ***********************************************************************/
    UCSRB = (1<<RXEN) | (1<<TXEN);
    19a0:	ea e2       	ldi	r30, 0x2A	; 42
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	88 e1       	ldi	r24, 0x18	; 24
    19a6:	80 83       	st	Z, r24
     * UPM1:0  = 00 Disable parity bit, 10  Even Parity, 11  Odd Parity
     * USBS    = 0 One stop bit, 1 Two stop bit
     * UCSZ1:0 = 11 For 8-bit data mode
     * UCPOL   = 0 Used with the Synchronous operation only
     ***********************************************************************/
    UCSRC = (1<<URSEL) | ((Config_Ptr->bit_data)<<UCSZ0) |
    19a8:	a0 e4       	ldi	r26, 0x40	; 64
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb 81       	ldd	r30, Y+3	; 0x03
    19ae:	fc 81       	ldd	r31, Y+4	; 0x04
    19b0:	86 81       	ldd	r24, Z+6	; 0x06
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	28 2f       	mov	r18, r24
    19bc:	20 68       	ori	r18, 0x80	; 128
    19be:	eb 81       	ldd	r30, Y+3	; 0x03
    19c0:	fc 81       	ldd	r31, Y+4	; 0x04
    19c2:	84 81       	ldd	r24, Z+4	; 0x04
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	82 95       	swap	r24
    19ca:	92 95       	swap	r25
    19cc:	90 7f       	andi	r25, 0xF0	; 240
    19ce:	98 27       	eor	r25, r24
    19d0:	80 7f       	andi	r24, 0xF0	; 240
    19d2:	98 27       	eor	r25, r24
    19d4:	28 2b       	or	r18, r24
    19d6:	eb 81       	ldd	r30, Y+3	; 0x03
    19d8:	fc 81       	ldd	r31, Y+4	; 0x04
    19da:	85 81       	ldd	r24, Z+5	; 0x05
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 2b       	or	r24, r18
    19ee:	8c 93       	st	X, r24
            ((Config_Ptr->Parity_Configurations)<<UPM0) |
            ((Config_Ptr->StopBit_Configurations)<<USBS);

    /* Calculate the UBRR register value */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
    19f0:	eb 81       	ldd	r30, Y+3	; 0x03
    19f2:	fc 81       	ldd	r31, Y+4	; 0x04
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	a2 81       	ldd	r26, Z+2	; 0x02
    19fa:	b3 81       	ldd	r27, Z+3	; 0x03
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	aa 1f       	adc	r26, r26
    1a02:	bb 1f       	adc	r27, r27
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	aa 1f       	adc	r26, r26
    1a0a:	bb 1f       	adc	r27, r27
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	aa 1f       	adc	r26, r26
    1a12:	bb 1f       	adc	r27, r27
    1a14:	9c 01       	movw	r18, r24
    1a16:	ad 01       	movw	r20, r26
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	92 e1       	ldi	r25, 0x12	; 18
    1a1c:	aa e7       	ldi	r26, 0x7A	; 122
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 c3 12 	call	0x2586	; 0x2586 <__udivmodsi4>
    1a28:	da 01       	movw	r26, r20
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01

    /* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
    UBRRH = ubrr_value>>8;
    1a32:	e0 e4       	ldi	r30, 0x40	; 64
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	89 2f       	mov	r24, r25
    1a3c:	99 27       	eor	r25, r25
    1a3e:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    1a40:	e9 e2       	ldi	r30, 0x29	; 41
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	80 83       	st	Z, r24
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
    /*
     * UDRE flag is set when the TX buffer (UDR) is empty and ready for
     * transmitting a new byte so wait until this flag is set to one
     */
    while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1a62:	eb e2       	ldi	r30, 0x2B	; 43
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	80 72       	andi	r24, 0x20	; 32
    1a6e:	90 70       	andi	r25, 0x00	; 0
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	b9 f3       	breq	.-18     	; 0x1a62 <UART_sendByte+0xc>

    /*
     * Put the required data in the UDR register and it also clear the UDRE flag as
     * the UDR register is not empty now
     */
    UDR = data;
    1a74:	ec e2       	ldi	r30, 0x2C	; 44
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	80 83       	st	Z, r24
}
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    /* RXC flag is set when the UART receive data so wait until this flag is set to one */
    while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1a8c:	eb e2       	ldi	r30, 0x2B	; 43
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	88 23       	and	r24, r24
    1a94:	dc f7       	brge	.-10     	; 0x1a8c <UART_receiveByte+0x8>

    /*
     * Read the received data from the RX buffer (UDR)
     * The RXC flag will be cleared after read the data
     */
    return UDR;
    1a96:	ec e2       	ldi	r30, 0x2C	; 44
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
}
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <UART_sendString+0x6>
    1aa8:	0f 92       	push	r0
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	9b 83       	std	Y+3, r25	; 0x03
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	0e c0       	rjmp	.+28     	; 0x1ad2 <UART_sendString+0x30>

    /* Send the whole string */
    while(Str[i] != '\0')
    {
        UART_sendByte(Str[i]);
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	e2 0f       	add	r30, r18
    1ac4:	f3 1f       	adc	r31, r19
    1ac6:	80 81       	ld	r24, Z
    1ac8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
        i++;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
    uint8 i = 0;

    /* Send the whole string */
    while(Str[i] != '\0')
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	fc 01       	movw	r30, r24
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 1f       	adc	r31, r19
    1ae2:	80 81       	ld	r24, Z
    1ae4:	88 23       	and	r24, r24
    1ae6:	39 f7       	brne	.-50     	; 0x1ab6 <UART_sendString+0x14>
    {
        UART_sendByte(Str[i]);
        i++;
    }
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <UART_receiveString+0xa>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1b08:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte */
    Str[i] = UART_receiveByte();
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	9b 81       	ldd	r25, Y+3	; 0x03
    1b14:	8c 01       	movw	r16, r24
    1b16:	02 0f       	add	r16, r18
    1b18:	13 1f       	adc	r17, r19
    1b1a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1b1e:	f8 01       	movw	r30, r16
    1b20:	80 83       	st	Z, r24
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <UART_receiveString+0x4e>

    /* Receive the whole string until the '#' */
    while(Str[i] != '#')
    {
        i++;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_receiveByte();
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	8c 01       	movw	r16, r24
    1b36:	02 0f       	add	r16, r18
    1b38:	13 1f       	adc	r17, r19
    1b3a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 83       	st	Z, r24

    /* Receive the first byte */
    Str[i] = UART_receiveByte();

    /* Receive the whole string until the '#' */
    while(Str[i] != '#')
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	80 81       	ld	r24, Z
    1b54:	83 32       	cpi	r24, 0x23	; 35
    1b56:	31 f7       	brne	.-52     	; 0x1b24 <UART_receiveString+0x30>
        i++;
        Str[i] = UART_receiveByte();
    }

    /* After receiving the whole string plus the '#', replace the '#' with '\0' */
    Str[i] = '\0';
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	9b 81       	ldd	r25, Y+3	; 0x03
    1b62:	fc 01       	movw	r30, r24
    1b64:	e2 0f       	add	r30, r18
    1b66:	f3 1f       	adc	r31, r19
    1b68:	10 82       	st	Z, r1
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <UART_sendArray>:
/*
 * Description :
 * Send the required array through UART to the other UART device.
 */
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <UART_sendArray+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <UART_sendArray+0x8>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	9b 83       	std	Y+3, r25	; 0x03
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	6c 83       	std	Y+4, r22	; 0x04
    uint8 i;

    /* Send the whole array */
	for(i = 0; i < size; i++)
    1b8c:	19 82       	std	Y+1, r1	; 0x01
    1b8e:	0e c0       	rjmp	.+28     	; 0x1bac <UART_sendArray+0x32>
    {
        UART_sendByte(a_ptr[i]);
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	e2 0f       	add	r30, r18
    1b9e:	f3 1f       	adc	r31, r19
    1ba0:	80 81       	ld	r24, Z
    1ba2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    uint8 i;

    /* Send the whole array */
	for(i = 0; i < size; i++)
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	99 81       	ldd	r25, Y+1	; 0x01
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	98 17       	cp	r25, r24
    1bb2:	70 f3       	brcs	.-36     	; 0x1b90 <UART_sendArray+0x16>
    {
        UART_sendByte(a_ptr[i]);
    }
    UART_sendByte('#');
    1bb4:	83 e2       	ldi	r24, 0x23	; 35
    1bb6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <UART_receiveArray>:
/*
 * Description :
 * Receive the required array until the '#' symbol through UART from the other UART device.
 */
void UART_receiveArray(uint8 *a_ptr)
{
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <UART_receiveArray+0xa>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1bdc:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte */
	a_ptr[i] = UART_receiveByte();
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	9b 81       	ldd	r25, Y+3	; 0x03
    1be8:	8c 01       	movw	r16, r24
    1bea:	02 0f       	add	r16, r18
    1bec:	13 1f       	adc	r17, r19
    1bee:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	80 83       	st	Z, r24
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <UART_receiveArray+0x4e>

    /* Receive the whole string until the '#' */
	while(a_ptr[i] != '#')
	{
		i++;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	89 83       	std	Y+1, r24	; 0x01
		a_ptr[i] = UART_receiveByte();
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	9b 81       	ldd	r25, Y+3	; 0x03
    1c08:	8c 01       	movw	r16, r24
    1c0a:	02 0f       	add	r16, r18
    1c0c:	13 1f       	adc	r17, r19
    1c0e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1c12:	f8 01       	movw	r30, r16
    1c14:	80 83       	st	Z, r24

    /* Receive the first byte */
	a_ptr[i] = UART_receiveByte();

    /* Receive the whole string until the '#' */
	while(a_ptr[i] != '#')
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	fc 01       	movw	r30, r24
    1c22:	e2 0f       	add	r30, r18
    1c24:	f3 1f       	adc	r31, r19
    1c26:	80 81       	ld	r24, Z
    1c28:	83 32       	cpi	r24, 0x23	; 35
    1c2a:	31 f7       	brne	.-52     	; 0x1bf8 <UART_receiveArray+0x30>
	{
		i++;
		a_ptr[i] = UART_receiveByte();
	}
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <Buzzer_init>:

/*
 * Initializes the buzzer pin as output and ensures the buzzer is off.
 */
void Buzzer_init(void)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, PIN_OUTPUT);
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	67 e0       	ldi	r22, 0x07	; 7
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, LOGIC_LOW);
    1c4e:	82 e0       	ldi	r24, 0x02	; 2
    1c50:	67 e0       	ldi	r22, 0x07	; 7
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <Buzzer_on>:

/*
 * Turns on the buzzer.
 */
void Buzzer_on(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, LOGIC_HIGH);
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	67 e0       	ldi	r22, 0x07	; 7
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <Buzzer_off>:

/*
 * Turns off the buzzer.
 */
void Buzzer_off(void)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_CONNECTION, BUZZER_PIN_CONNECION, LOGIC_LOW);
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	67 e0       	ldi	r22, 0x07	; 7
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
}
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <EEPROM_writeByte>:
/*
 * Writes a byte to a specific address in the external EEPROM using I2C.
 * Returns SUCCESS or ERROR based on the communication result.
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <EEPROM_writeByte+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <EEPROM_writeByte+0x8>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	6b 83       	std	Y+3, r22	; 0x03
    TWI_start();
    1ca0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ca4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1ca8:	88 30       	cpi	r24, 0x08	; 8
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <EEPROM_writeByte+0x22>
        return ERROR;
    1cac:	1c 82       	std	Y+4, r1	; 0x04
    1cae:	28 c0       	rjmp	.+80     	; 0x1d00 <EEPROM_writeByte+0x72>

    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	80 70       	andi	r24, 0x00	; 0
    1cb6:	97 70       	andi	r25, 0x07	; 7
    1cb8:	88 0f       	add	r24, r24
    1cba:	89 2f       	mov	r24, r25
    1cbc:	88 1f       	adc	r24, r24
    1cbe:	99 0b       	sbc	r25, r25
    1cc0:	91 95       	neg	r25
    1cc2:	80 6a       	ori	r24, 0xA0	; 160
    1cc4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1cc8:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1ccc:	88 31       	cpi	r24, 0x18	; 24
    1cce:	11 f0       	breq	.+4      	; 0x1cd4 <EEPROM_writeByte+0x46>
        return ERROR;
    1cd0:	1c 82       	std	Y+4, r1	; 0x04
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <EEPROM_writeByte+0x72>

    TWI_writeByte((uint8)(u16addr));
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1cda:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1cde:	88 32       	cpi	r24, 0x28	; 40
    1ce0:	11 f0       	breq	.+4      	; 0x1ce6 <EEPROM_writeByte+0x58>
        return ERROR;
    1ce2:	1c 82       	std	Y+4, r1	; 0x04
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <EEPROM_writeByte+0x72>

    TWI_writeByte(u8data);
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1cec:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1cf0:	88 32       	cpi	r24, 0x28	; 40
    1cf2:	11 f0       	breq	.+4      	; 0x1cf8 <EEPROM_writeByte+0x6a>
        return ERROR;
    1cf4:	1c 82       	std	Y+4, r1	; 0x04
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <EEPROM_writeByte+0x72>

    TWI_stop();
    1cf8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_stop>
    return SUCCESS;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8c 83       	std	Y+4, r24	; 0x04
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <EEPROM_readByte>:
 * Reads a byte from a specific address in the external EEPROM using I2C.
 * The result is stored in the pointer u8data.
 * Returns SUCCESS or ERROR based on the communication result.
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <EEPROM_readByte+0x6>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <EEPROM_readByte+0x8>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	7c 83       	std	Y+4, r23	; 0x04
    1d24:	6b 83       	std	Y+3, r22	; 0x03
    TWI_start();
    1d26:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d2a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <EEPROM_readByte+0x26>
        return ERROR;
    1d32:	1d 82       	std	Y+5, r1	; 0x05
    1d34:	44 c0       	rjmp	.+136    	; 0x1dbe <EEPROM_readByte+0xae>

    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	80 70       	andi	r24, 0x00	; 0
    1d3c:	97 70       	andi	r25, 0x07	; 7
    1d3e:	88 0f       	add	r24, r24
    1d40:	89 2f       	mov	r24, r25
    1d42:	88 1f       	adc	r24, r24
    1d44:	99 0b       	sbc	r25, r25
    1d46:	91 95       	neg	r25
    1d48:	80 6a       	ori	r24, 0xA0	; 160
    1d4a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d4e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1d52:	88 31       	cpi	r24, 0x18	; 24
    1d54:	11 f0       	breq	.+4      	; 0x1d5a <EEPROM_readByte+0x4a>
        return ERROR;
    1d56:	1d 82       	std	Y+5, r1	; 0x05
    1d58:	32 c0       	rjmp	.+100    	; 0x1dbe <EEPROM_readByte+0xae>

    TWI_writeByte((uint8)(u16addr));
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d60:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1d64:	88 32       	cpi	r24, 0x28	; 40
    1d66:	11 f0       	breq	.+4      	; 0x1d6c <EEPROM_readByte+0x5c>
        return ERROR;
    1d68:	1d 82       	std	Y+5, r1	; 0x05
    1d6a:	29 c0       	rjmp	.+82     	; 0x1dbe <EEPROM_readByte+0xae>

    TWI_start();
    1d6c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1d70:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1d74:	80 31       	cpi	r24, 0x10	; 16
    1d76:	11 f0       	breq	.+4      	; 0x1d7c <EEPROM_readByte+0x6c>
        return ERROR;
    1d78:	1d 82       	std	Y+5, r1	; 0x05
    1d7a:	21 c0       	rjmp	.+66     	; 0x1dbe <EEPROM_readByte+0xae>

    TWI_writeByte((uint8)((0xA0 | ((u16addr & 0x0700) >> 7) | 1)));
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	80 70       	andi	r24, 0x00	; 0
    1d82:	97 70       	andi	r25, 0x07	; 7
    1d84:	88 0f       	add	r24, r24
    1d86:	89 2f       	mov	r24, r25
    1d88:	88 1f       	adc	r24, r24
    1d8a:	99 0b       	sbc	r25, r25
    1d8c:	91 95       	neg	r25
    1d8e:	81 6a       	ori	r24, 0xA1	; 161
    1d90:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1d94:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1d98:	80 34       	cpi	r24, 0x40	; 64
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <EEPROM_readByte+0x90>
        return ERROR;
    1d9c:	1d 82       	std	Y+5, r1	; 0x05
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <EEPROM_readByte+0xae>

    *u8data = TWI_readByteWithNACK();
    1da0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <TWI_readByteWithNACK>
    1da4:	eb 81       	ldd	r30, Y+3	; 0x03
    1da6:	fc 81       	ldd	r31, Y+4	; 0x04
    1da8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1daa:	0e 94 b3 0c 	call	0x1966	; 0x1966 <TWI_getStatus>
    1dae:	88 35       	cpi	r24, 0x58	; 88
    1db0:	11 f0       	breq	.+4      	; 0x1db6 <EEPROM_readByte+0xa6>
        return ERROR;
    1db2:	1d 82       	std	Y+5, r1	; 0x05
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <EEPROM_readByte+0xae>

    TWI_stop();
    1db6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <TWI_stop>
    return SUCCESS;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <DcMotor_Init>:

/*
 * Initializes the motor control pins and stops the motor.
 */
void DcMotor_Init(void)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT1, PIN_OUTPUT);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	66 e0       	ldi	r22, 0x06	; 6
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_CONNECTION, PIN_INT2, PIN_OUTPUT);
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	67 e0       	ldi	r22, 0x07	; 7
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ENABLE_PORT_CONNECTION, ENABLE_PIN, PIN_OUTPUT);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	63 e0       	ldi	r22, 0x03	; 3
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	66 e0       	ldi	r22, 0x06	; 6
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	67 e0       	ldi	r22, 0x07	; 7
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
}
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <DcMotor_Rotate>:
/*
 * Rotates the motor in the specified direction (CW/CCW/STOP)
 * and sets speed using PWM on the enable pin.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <DcMotor_Rotate+0x6>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <DcMotor_Rotate+0x8>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	0e 94 05 09 	call	0x120a	; 0x120a <PWM_Timer0_Start>

	switch (state)
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3c 83       	std	Y+4, r19	; 0x04
    1e2e:	2b 83       	std	Y+3, r18	; 0x03
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 05       	cpc	r25, r1
    1e38:	a1 f0       	breq	.+40     	; 0x1e62 <DcMotor_Rotate+0x52>
    1e3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	d1 f0       	breq	.+52     	; 0x1e78 <DcMotor_Rotate+0x68>
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	01 f5       	brne	.+64     	; 0x1e8c <DcMotor_Rotate+0x7c>
	{
	case STOP:
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	66 e0       	ldi	r22, 0x06	; 6
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	67 e0       	ldi	r22, 0x07	; 7
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
    1e60:	15 c0       	rjmp	.+42     	; 0x1e8c <DcMotor_Rotate+0x7c>
		break;

	case CW:
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_HIGH);
    1e62:	83 e0       	ldi	r24, 0x03	; 3
    1e64:	66 e0       	ldi	r22, 0x06	; 6
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_LOW);
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	67 e0       	ldi	r22, 0x07	; 7
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
    1e76:	0a c0       	rjmp	.+20     	; 0x1e8c <DcMotor_Rotate+0x7c>
		break;

	case CCW:
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT1, LOGIC_LOW);
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	66 e0       	ldi	r22, 0x06	; 6
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_CONNECTION, PIN_INT2, LOGIC_HIGH);
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	67 e0       	ldi	r22, 0x07	; 7
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 98 06 	call	0xd30	; 0xd30 <GPIO_writePin>
		break;
	}
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <PIR_init>:

/*
 * Initializes the PIR sensor by setting its GPIO pin as input.
 */
void PIR_init(void)
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_CONNECTION, PIN_CONNECTION, PIN_INPUT);
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
}
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <PIR_getState>:

/*
 * Returns the state of the PIR sensor (1 if motion detected, 0 otherwise).
 */
uint8 PIR_getState(void)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORT_CONNECTION, PIN_CONNECTION);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_readPin>
}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <receive2Password>:
 * Function to receive 2 passwords and check them.
 * If they are identical, save the password to EEPROM.
 * Else, Receive the 2 passwords again.
 */
void receive2Password(uint8 * a_ptr1, uint8 * a_ptr2)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	64 97       	sbiw	r28, 0x14	; 20
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	9a 8b       	std	Y+18, r25	; 0x12
    1ede:	89 8b       	std	Y+17, r24	; 0x11
    1ee0:	7c 8b       	std	Y+20, r23	; 0x14
    1ee2:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 counter, wrongPass_flag;

	do{
		/* Receiving the 2 passwords from MC1. */
		while(I_AM_READY != UART_receiveByte());
    1ee4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	e1 f7       	brne	.-8      	; 0x1ee4 <receive2Password+0x1c>
		UART_sendByte(I_AM_READY);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
		UART_receiveArray(a_ptr1);
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <UART_receiveArray>
		UART_receiveArray(a_ptr2);
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	9c 89       	ldd	r25, Y+20	; 0x14
    1efe:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <UART_receiveArray>

		/* Check if the password and the re-enterd password are identical.
		 * If they are identical, continue the program.
		 * Else, receive the password again.
		 */
		for(counter = 0; counter < PASSWORD_SIZE; counter++)
    1f02:	18 8a       	std	Y+16, r1	; 0x10
    1f04:	37 c0       	rjmp	.+110    	; 0x1f74 <receive2Password+0xac>
		{
			if(a_ptr1[counter] != a_ptr2[counter])
    1f06:	88 89       	ldd	r24, Y+16	; 0x10
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f10:	fc 01       	movw	r30, r24
    1f12:	e2 0f       	add	r30, r18
    1f14:	f3 1f       	adc	r31, r19
    1f16:	40 81       	ld	r20, Z
    1f18:	88 89       	ldd	r24, Y+16	; 0x10
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f20:	9c 89       	ldd	r25, Y+20	; 0x14
    1f22:	fc 01       	movw	r30, r24
    1f24:	e2 0f       	add	r30, r18
    1f26:	f3 1f       	adc	r31, r19
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 17       	cp	r20, r24
    1f2c:	f9 f0       	breq	.+62     	; 0x1f6c <receive2Password+0xa4>
			{
				/* Reset the entered password. */
				a_ptr1[counter] = 0;
    1f2e:	88 89       	ldd	r24, Y+16	; 0x10
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	89 89       	ldd	r24, Y+17	; 0x11
    1f36:	9a 89       	ldd	r25, Y+18	; 0x12
    1f38:	fc 01       	movw	r30, r24
    1f3a:	e2 0f       	add	r30, r18
    1f3c:	f3 1f       	adc	r31, r19
    1f3e:	10 82       	st	Z, r1
				a_ptr2[counter] = 0;
    1f40:	88 89       	ldd	r24, Y+16	; 0x10
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	8b 89       	ldd	r24, Y+19	; 0x13
    1f48:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e2 0f       	add	r30, r18
    1f4e:	f3 1f       	adc	r31, r19
    1f50:	10 82       	st	Z, r1

				/* Send signal to MC1 that the password is wrong. */
				UART_sendByte(I_AM_READY);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
				while(I_AM_READY != UART_receiveByte());
    1f58:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	e1 f7       	brne	.-8      	; 0x1f58 <receive2Password+0x90>
				UART_sendByte(WRONG_PASS);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>

				wrongPass_flag = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	8f 87       	std	Y+15, r24	; 0x0f
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <receive2Password+0xb2>
				break;
			}
			else
			{
				wrongPass_flag = 0;
    1f6c:	1f 86       	std	Y+15, r1	; 0x0f

		/* Check if the password and the re-enterd password are identical.
		 * If they are identical, continue the program.
		 * Else, receive the password again.
		 */
		for(counter = 0; counter < PASSWORD_SIZE; counter++)
    1f6e:	88 89       	ldd	r24, Y+16	; 0x10
    1f70:	8f 5f       	subi	r24, 0xFF	; 255
    1f72:	88 8b       	std	Y+16, r24	; 0x10
    1f74:	88 89       	ldd	r24, Y+16	; 0x10
    1f76:	85 30       	cpi	r24, 0x05	; 5
    1f78:	30 f2       	brcs	.-116    	; 0x1f06 <receive2Password+0x3e>
			else
			{
				wrongPass_flag = 0;
			}
		}
	}while(wrongPass_flag);
    1f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7c:	88 23       	and	r24, r24
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <receive2Password+0xba>
    1f80:	b1 cf       	rjmp	.-158    	; 0x1ee4 <receive2Password+0x1c>

	/* Send signal to MC1 that the password is correct. */
	UART_sendByte(I_AM_READY);
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
	while(I_AM_READY != UART_receiveByte());
    1f88:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <receive2Password+0xc0>
	UART_sendByte(CORRECT_PASS);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>

	/* Save the password in EEPROM. */
	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    1f96:	18 8a       	std	Y+16, r1	; 0x10
    1f98:	8c c0       	rjmp	.+280    	; 0x20b2 <receive2Password+0x1ea>
	{
		EEPROM_writeByte(address+counter, a_ptr1[counter]);
    1f9a:	88 89       	ldd	r24, Y+16	; 0x10
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	80 91 84 00 	lds	r24, 0x0084
    1fa4:	90 91 85 00 	lds	r25, 0x0085
    1fa8:	a9 01       	movw	r20, r18
    1faa:	48 0f       	add	r20, r24
    1fac:	59 1f       	adc	r21, r25
    1fae:	88 89       	ldd	r24, Y+16	; 0x10
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	89 89       	ldd	r24, Y+17	; 0x11
    1fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	20 81       	ld	r18, Z
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	62 2f       	mov	r22, r18
    1fc4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <EEPROM_writeByte>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 ea       	ldi	r26, 0xA0	; 160
    1fce:	b1 e4       	ldi	r27, 0x41	; 65
    1fd0:	8b 87       	std	Y+11, r24	; 0x0b
    1fd2:	9c 87       	std	Y+12, r25	; 0x0c
    1fd4:	ad 87       	std	Y+13, r26	; 0x0d
    1fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8f 83       	std	Y+7, r24	; 0x07
    1ff2:	98 87       	std	Y+8, r25	; 0x08
    1ff4:	a9 87       	std	Y+9, r26	; 0x09
    1ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <receive2Password+0x152>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <receive2Password+0x1d0>
	else if (__tmp > 65535)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <receive2Password+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	0f c0       	rjmp	.+30     	; 0x207a <receive2Password+0x1b2>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <receive2Password+0x1a0>
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <receive2Password+0x194>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <receive2Password+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <receive2Password+0x1dc>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(I_AM_READY);
	while(I_AM_READY != UART_receiveByte());
	UART_sendByte(CORRECT_PASS);

	/* Save the password in EEPROM. */
	for(counter = 0; counter < PASSWORD_SIZE; counter++)
    20ac:	88 89       	ldd	r24, Y+16	; 0x10
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	88 8b       	std	Y+16, r24	; 0x10
    20b2:	88 89       	ldd	r24, Y+16	; 0x10
    20b4:	85 30       	cpi	r24, 0x05	; 5
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <receive2Password+0x1f2>
    20b8:	70 cf       	rjmp	.-288    	; 0x1f9a <receive2Password+0xd2>
	{
		EEPROM_writeByte(address+counter, a_ptr1[counter]);
		_delay_ms(20);		/* EEPROM delay > 10ms. */
	}
}
    20ba:	64 96       	adiw	r28, 0x14	; 20
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <checkPassAndAlarm>:
 * If the user entered password 3 times wrong, alarm will be on.
 * Else, user will enter the password again if it is wrong.
 * If the password is correct, the program will continue normally.
 */
void checkPassAndAlarm(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	61 97       	sbiw	r28, 0x11	; 17
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;

	do{
		/* Receiving the password from MC1. */
		while(I_AM_READY != UART_receiveByte());
    20e0:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <checkPassAndAlarm+0x14>
		UART_sendByte(I_AM_READY);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
		UART_receiveArray(g_key_again);
    20ee:	8b e8       	ldi	r24, 0x8B	; 139
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <UART_receiveArray>
		/* Check if the entered password and the saved password are identical.
		 * If they are identical, open the door.
		 * Else, enter the password again.
		 * If user entered the password wrong 3 times, alarm will turn on.
		 */
		for(counter = 0; counter < PASSWORD_SIZE; counter++)
    20f6:	19 8a       	std	Y+17, r1	; 0x11
    20f8:	23 c0       	rjmp	.+70     	; 0x2140 <checkPassAndAlarm+0x74>
		{
			if(g_key_eeprom[counter] != g_key_again[counter])
    20fa:	89 89       	ldd	r24, Y+17	; 0x11
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	fc 01       	movw	r30, r24
    2102:	ef 56       	subi	r30, 0x6F	; 111
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	20 81       	ld	r18, Z
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	fc 01       	movw	r30, r24
    2110:	e5 57       	subi	r30, 0x75	; 117
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	28 17       	cp	r18, r24
    2118:	71 f0       	breq	.+28     	; 0x2136 <checkPassAndAlarm+0x6a>
			{
				g_incorrectPass_flag = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	80 93 90 00 	sts	0x0090, r24

				/* Send signal to MC1 that password is wrong. */
				UART_sendByte(I_AM_READY);
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
				while(I_AM_READY != UART_receiveByte());
    2126:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	e1 f7       	brne	.-8      	; 0x2126 <checkPassAndAlarm+0x5a>
				UART_sendByte(WRONG_PASS);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
    2134:	08 c0       	rjmp	.+16     	; 0x2146 <checkPassAndAlarm+0x7a>
				break;
			}
			else
			{
				g_incorrectPass_flag = 0;
    2136:	10 92 90 00 	sts	0x0090, r1
		/* Check if the entered password and the saved password are identical.
		 * If they are identical, open the door.
		 * Else, enter the password again.
		 * If user entered the password wrong 3 times, alarm will turn on.
		 */
		for(counter = 0; counter < PASSWORD_SIZE; counter++)
    213a:	89 89       	ldd	r24, Y+17	; 0x11
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	89 8b       	std	Y+17, r24	; 0x11
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	85 30       	cpi	r24, 0x05	; 5
    2144:	d0 f2       	brcs	.-76     	; 0x20fa <checkPassAndAlarm+0x2e>
				g_incorrectPass_flag = 0;
			}
		}

		/* If user entered password incorrect 3 times, alarm will turn on. */
		if(g_incorrectPass_flag)
    2146:	80 91 90 00 	lds	r24, 0x0090
    214a:	88 23       	and	r24, r24
    214c:	09 f4       	brne	.+2      	; 0x2150 <checkPassAndAlarm+0x84>
    214e:	91 c0       	rjmp	.+290    	; 0x2272 <checkPassAndAlarm+0x1a6>
		{
			if(3 == g_incorrectPass2)
    2150:	80 91 68 00 	lds	r24, 0x0068
    2154:	83 30       	cpi	r24, 0x03	; 3
    2156:	09 f0       	breq	.+2      	; 0x215a <checkPassAndAlarm+0x8e>
    2158:	85 c0       	rjmp	.+266    	; 0x2264 <checkPassAndAlarm+0x198>
			{
				Buzzer_on();
    215a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <Buzzer_on>
				/* Wait for 1 minute (59 seconds). */
				for (int i = 0; i < 59; i++) {
    215e:	18 8a       	std	Y+16, r1	; 0x10
    2160:	1f 86       	std	Y+15, r1	; 0x0f
    2162:	77 c0       	rjmp	.+238    	; 0x2252 <checkPassAndAlarm+0x186>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	aa e7       	ldi	r26, 0x7A	; 122
    216a:	b4 e4       	ldi	r27, 0x44	; 68
    216c:	8b 87       	std	Y+11, r24	; 0x0b
    216e:	9c 87       	std	Y+12, r25	; 0x0c
    2170:	ad 87       	std	Y+13, r26	; 0x0d
    2172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	6b 85       	ldd	r22, Y+11	; 0x0b
    2176:	7c 85       	ldd	r23, Y+12	; 0x0c
    2178:	8d 85       	ldd	r24, Y+13	; 0x0d
    217a:	9e 85       	ldd	r25, Y+14	; 0x0e
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a ef       	ldi	r20, 0xFA	; 250
    2182:	54 e4       	ldi	r21, 0x44	; 68
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8f 83       	std	Y+7, r24	; 0x07
    218e:	98 87       	std	Y+8, r25	; 0x08
    2190:	a9 87       	std	Y+9, r26	; 0x09
    2192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2194:	6f 81       	ldd	r22, Y+7	; 0x07
    2196:	78 85       	ldd	r23, Y+8	; 0x08
    2198:	89 85       	ldd	r24, Y+9	; 0x09
    219a:	9a 85       	ldd	r25, Y+10	; 0x0a
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <checkPassAndAlarm+0xea>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <checkPassAndAlarm+0x168>
	else if (__tmp > 65535)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <checkPassAndAlarm+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <checkPassAndAlarm+0x14a>
    21f8:	88 ec       	ldi	r24, 0xC8	; 200
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <checkPassAndAlarm+0x138>
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <checkPassAndAlarm+0x12c>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <checkPassAndAlarm+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <checkPassAndAlarm+0x174>
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	8f 85       	ldd	r24, Y+15	; 0x0f
    224a:	98 89       	ldd	r25, Y+16	; 0x10
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f
    2252:	8f 85       	ldd	r24, Y+15	; 0x0f
    2254:	98 89       	ldd	r25, Y+16	; 0x10
    2256:	8b 33       	cpi	r24, 0x3B	; 59
    2258:	91 05       	cpc	r25, r1
    225a:	0c f4       	brge	.+2      	; 0x225e <checkPassAndAlarm+0x192>
    225c:	83 cf       	rjmp	.-250    	; 0x2164 <checkPassAndAlarm+0x98>
					_delay_ms(1000);
				}
				Buzzer_off();
    225e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <Buzzer_off>
    2262:	19 c0       	rjmp	.+50     	; 0x2296 <checkPassAndAlarm+0x1ca>

				return;
			}
			else
			{
				Buzzer_off();
    2264:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <Buzzer_off>
				g_incorrectPass2++;
    2268:	80 91 68 00 	lds	r24, 0x0068
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 93 68 00 	sts	0x0068, r24
			}
		}

	}while(g_incorrectPass_flag);
    2272:	80 91 90 00 	lds	r24, 0x0090
    2276:	88 23       	and	r24, r24
    2278:	09 f0       	breq	.+2      	; 0x227c <checkPassAndAlarm+0x1b0>
    227a:	32 cf       	rjmp	.-412    	; 0x20e0 <checkPassAndAlarm+0x14>

	/* Send signal to MC1 that the password is correct. */
	UART_sendByte(I_AM_READY);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
	while(I_AM_READY != UART_receiveByte());
    2282:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	e1 f7       	brne	.-8      	; 0x2282 <checkPassAndAlarm+0x1b6>
	UART_sendByte(CORRECT_PASS);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
	/* Reset the counter if the password is correct. */
	g_incorrectPass2 = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	80 93 68 00 	sts	0x0068, r24
}
    2296:	61 96       	adiw	r28, 0x11	; 17
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <delay_15s>:

/*
 * Function to delay for 15s.
 */
void delay_15s(void)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	68 97       	sbiw	r28, 0x18	; 24
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_configrations1 = {0, 65535, TIMER1_ID, F_CPU_1024, COMPARE_MODE};
    22bc:	ce 01       	movw	r24, r28
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	98 8b       	std	Y+16, r25	; 0x10
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
    22c4:	e0 e7       	ldi	r30, 0x70	; 112
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	fa 8b       	std	Y+18, r31	; 0x12
    22ca:	e9 8b       	std	Y+17, r30	; 0x11
    22cc:	f7 e0       	ldi	r31, 0x07	; 7
    22ce:	fb 8b       	std	Y+19, r31	; 0x13
    22d0:	e9 89       	ldd	r30, Y+17	; 0x11
    22d2:	fa 89       	ldd	r31, Y+18	; 0x12
    22d4:	00 80       	ld	r0, Z
    22d6:	89 89       	ldd	r24, Y+17	; 0x11
    22d8:	9a 89       	ldd	r25, Y+18	; 0x12
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	9a 8b       	std	Y+18, r25	; 0x12
    22de:	89 8b       	std	Y+17, r24	; 0x11
    22e0:	ef 85       	ldd	r30, Y+15	; 0x0f
    22e2:	f8 89       	ldd	r31, Y+16	; 0x10
    22e4:	00 82       	st	Z, r0
    22e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e8:	98 89       	ldd	r25, Y+16	; 0x10
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	98 8b       	std	Y+16, r25	; 0x10
    22ee:	8f 87       	std	Y+15, r24	; 0x0f
    22f0:	9b 89       	ldd	r25, Y+19	; 0x13
    22f2:	91 50       	subi	r25, 0x01	; 1
    22f4:	9b 8b       	std	Y+19, r25	; 0x13
    22f6:	eb 89       	ldd	r30, Y+19	; 0x13
    22f8:	ee 23       	and	r30, r30
    22fa:	51 f7       	brne	.-44     	; 0x22d0 <delay_15s+0x28>
	Timer_init(&timer_configrations1);
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <Timer_init>
	while(!(TIFR & (1<<OCF1A)));
    2304:	e8 e5       	ldi	r30, 0x58	; 88
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	80 71       	andi	r24, 0x10	; 16
    2310:	90 70       	andi	r25, 0x00	; 0
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	b9 f3       	breq	.-18     	; 0x2304 <delay_15s+0x5c>
	TIFR |= (1<<OCF1A);
    2316:	a8 e5       	ldi	r26, 0x58	; 88
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e8 e5       	ldi	r30, 0x58	; 88
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 61       	ori	r24, 0x10	; 16
    2322:	8c 93       	st	X, r24
	Timer_ConfigType timer_configrations2 = {0, 51621, TIMER1_ID, F_CPU_1024, COMPARE_MODE};
    2324:	ce 01       	movw	r24, r28
    2326:	08 96       	adiw	r24, 0x08	; 8
    2328:	9d 8b       	std	Y+21, r25	; 0x15
    232a:	8c 8b       	std	Y+20, r24	; 0x14
    232c:	e9 e6       	ldi	r30, 0x69	; 105
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	ff 8b       	std	Y+23, r31	; 0x17
    2332:	ee 8b       	std	Y+22, r30	; 0x16
    2334:	f7 e0       	ldi	r31, 0x07	; 7
    2336:	f8 8f       	std	Y+24, r31	; 0x18
    2338:	ee 89       	ldd	r30, Y+22	; 0x16
    233a:	ff 89       	ldd	r31, Y+23	; 0x17
    233c:	00 80       	ld	r0, Z
    233e:	8e 89       	ldd	r24, Y+22	; 0x16
    2340:	9f 89       	ldd	r25, Y+23	; 0x17
    2342:	01 96       	adiw	r24, 0x01	; 1
    2344:	9f 8b       	std	Y+23, r25	; 0x17
    2346:	8e 8b       	std	Y+22, r24	; 0x16
    2348:	ec 89       	ldd	r30, Y+20	; 0x14
    234a:	fd 89       	ldd	r31, Y+21	; 0x15
    234c:	00 82       	st	Z, r0
    234e:	8c 89       	ldd	r24, Y+20	; 0x14
    2350:	9d 89       	ldd	r25, Y+21	; 0x15
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	9d 8b       	std	Y+21, r25	; 0x15
    2356:	8c 8b       	std	Y+20, r24	; 0x14
    2358:	98 8d       	ldd	r25, Y+24	; 0x18
    235a:	91 50       	subi	r25, 0x01	; 1
    235c:	98 8f       	std	Y+24, r25	; 0x18
    235e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2360:	ee 23       	and	r30, r30
    2362:	51 f7       	brne	.-44     	; 0x2338 <delay_15s+0x90>
	Timer_init(&timer_configrations2);
    2364:	ce 01       	movw	r24, r28
    2366:	08 96       	adiw	r24, 0x08	; 8
    2368:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <Timer_init>
	while(!(TIFR & (1<<OCF1A)));
    236c:	e8 e5       	ldi	r30, 0x58	; 88
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	80 71       	andi	r24, 0x10	; 16
    2378:	90 70       	andi	r25, 0x00	; 0
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	b9 f3       	breq	.-18     	; 0x236c <delay_15s+0xc4>
	TIFR |= (1<<OCF1A);
    237e:	a8 e5       	ldi	r26, 0x58	; 88
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e8 e5       	ldi	r30, 0x58	; 88
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	80 61       	ori	r24, 0x10	; 16
    238a:	8c 93       	st	X, r24

	/* De-initialize timer1. */
	Timer_deInit(TIMER1_ID);
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Timer_deInit>

}
    2392:	68 96       	adiw	r28, 0x18	; 24
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <main>:

/*
 * The main function.
 */
int main(void)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	62 97       	sbiw	r28, 0x12	; 18
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
	uint8 counter, key;

	/* Initialize UART with configurations. */
	UART_ConfigType uart_configrations = {9600, UART_Parity_ODD, UART_STOP_1_BIT, MODE_EIGHT_BIT};
    23b8:	9e 01       	movw	r18, r28
    23ba:	2d 5f       	subi	r18, 0xFD	; 253
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	3f 87       	std	Y+15, r19	; 0x0f
    23c0:	2e 87       	std	Y+14, r18	; 0x0e
    23c2:	87 e7       	ldi	r24, 0x77	; 119
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	99 8b       	std	Y+17, r25	; 0x11
    23c8:	88 8b       	std	Y+16, r24	; 0x10
    23ca:	97 e0       	ldi	r25, 0x07	; 7
    23cc:	9a 8b       	std	Y+18, r25	; 0x12
    23ce:	e8 89       	ldd	r30, Y+16	; 0x10
    23d0:	f9 89       	ldd	r31, Y+17	; 0x11
    23d2:	00 80       	ld	r0, Z
    23d4:	28 89       	ldd	r18, Y+16	; 0x10
    23d6:	39 89       	ldd	r19, Y+17	; 0x11
    23d8:	2f 5f       	subi	r18, 0xFF	; 255
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	39 8b       	std	Y+17, r19	; 0x11
    23de:	28 8b       	std	Y+16, r18	; 0x10
    23e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    23e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    23e4:	00 82       	st	Z, r0
    23e6:	2e 85       	ldd	r18, Y+14	; 0x0e
    23e8:	3f 85       	ldd	r19, Y+15	; 0x0f
    23ea:	2f 5f       	subi	r18, 0xFF	; 255
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	3f 87       	std	Y+15, r19	; 0x0f
    23f0:	2e 87       	std	Y+14, r18	; 0x0e
    23f2:	3a 89       	ldd	r19, Y+18	; 0x12
    23f4:	31 50       	subi	r19, 0x01	; 1
    23f6:	3a 8b       	std	Y+18, r19	; 0x12
    23f8:	8a 89       	ldd	r24, Y+18	; 0x12
    23fa:	88 23       	and	r24, r24
    23fc:	41 f7       	brne	.-48     	; 0x23ce <main+0x2a>
	UART_init(&uart_configrations);
    23fe:	ce 01       	movw	r24, r28
    2400:	03 96       	adiw	r24, 0x03	; 3
    2402:	0e 94 c2 0c 	call	0x1984	; 0x1984 <UART_init>

	/* Initialize TWI with configurations. */
	TWI_ConfigType twi_configrations = {0x01, 62};		/* For 100Kb/s. */
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	8a 87       	std	Y+10, r24	; 0x0a
    240a:	8e e3       	ldi	r24, 0x3E	; 62
    240c:	8b 87       	std	Y+11, r24	; 0x0b
	TWI_init(&twi_configrations);
    240e:	ce 01       	movw	r24, r28
    2410:	0a 96       	adiw	r24, 0x0a	; 10
    2412:	0e 94 3c 0c 	call	0x1878	; 0x1878 <TWI_init>

	/* Initialize Modules. */
	DcMotor_Init();
    2416:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <DcMotor_Init>
	Buzzer_init();
    241a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <Buzzer_init>
	PIR_init();
    241e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <PIR_init>

	/* Receive the 2 input passwords and check them. */
	/* If they are identical, save them to EEPROM. */
	receive2Password(g_key, g_key_confirm);
    2422:	86 e9       	ldi	r24, 0x96	; 150
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	26 e8       	ldi	r18, 0x86	; 134
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	b9 01       	movw	r22, r18
    242c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <receive2Password>

	while(1)
	{
		/* Receive the button that user had entered. */
		while(I_AM_READY != UART_receiveByte());
    2430:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	e1 f7       	brne	.-8      	; 0x2430 <main+0x8c>
		UART_sendByte(I_AM_READY);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
		key = UART_receiveByte();
    243e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    2442:	89 83       	std	Y+1, r24	; 0x01

		switch(key)
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	e8 2f       	mov	r30, r24
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	fd 87       	std	Y+13, r31	; 0x0d
    244c:	ec 87       	std	Y+12, r30	; 0x0c
    244e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2450:	3d 85       	ldd	r19, Y+13	; 0x0d
    2452:	2b 32       	cpi	r18, 0x2B	; 43
    2454:	31 05       	cpc	r19, r1
    2456:	39 f0       	breq	.+14     	; 0x2466 <main+0xc2>
    2458:	8c 85       	ldd	r24, Y+12	; 0x0c
    245a:	9d 85       	ldd	r25, Y+13	; 0x0d
    245c:	8d 32       	cpi	r24, 0x2D	; 45
    245e:	91 05       	cpc	r25, r1
    2460:	09 f4       	brne	.+2      	; 0x2464 <main+0xc0>
    2462:	50 c0       	rjmp	.+160    	; 0x2504 <main+0x160>
    2464:	e5 cf       	rjmp	.-54     	; 0x2430 <main+0x8c>
		{
		case '+':
			/* Take the password from EEPROM. */
			for(counter = 0; counter < PASSWORD_SIZE; counter++)
    2466:	1a 82       	std	Y+2, r1	; 0x02
    2468:	17 c0       	rjmp	.+46     	; 0x2498 <main+0xf4>
			{
				EEPROM_readByte(address+counter, g_key_eeprom+counter);
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	80 91 84 00 	lds	r24, 0x0084
    2474:	90 91 85 00 	lds	r25, 0x0085
    2478:	a9 01       	movw	r20, r18
    247a:	48 0f       	add	r20, r24
    247c:	59 1f       	adc	r21, r25
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9c 01       	movw	r18, r24
    2486:	2f 56       	subi	r18, 0x6F	; 111
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	ca 01       	movw	r24, r20
    248c:	b9 01       	movw	r22, r18
    248e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <EEPROM_readByte>

		switch(key)
		{
		case '+':
			/* Take the password from EEPROM. */
			for(counter = 0; counter < PASSWORD_SIZE; counter++)
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	8a 83       	std	Y+2, r24	; 0x02
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	85 30       	cpi	r24, 0x05	; 5
    249c:	30 f3       	brcs	.-52     	; 0x246a <main+0xc6>
			{
				EEPROM_readByte(address+counter, g_key_eeprom+counter);
			}

			/* Receive password and check it.*/
			checkPassAndAlarm();
    249e:	0e 94 66 10 	call	0x20cc	; 0x20cc <checkPassAndAlarm>

			/* To go to home screen if the password was wrong 3 times. */
			if(3 == g_incorrectPass2)
    24a2:	80 91 68 00 	lds	r24, 0x0068
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	21 f4       	brne	.+8      	; 0x24b2 <main+0x10e>
			{
				g_incorrectPass2 = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 68 00 	sts	0x0068, r24
    24b0:	bf cf       	rjmp	.-130    	; 0x2430 <main+0x8c>
				break;
			}

			/* Open the door. */
			DcMotor_Rotate(CW, MOTOR_MAX_SPEED);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	64 e6       	ldi	r22, 0x64	; 100
    24b6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DcMotor_Rotate>

			/* Wait 15s until door is opened. */
			delay_15s();
    24ba:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay_15s>

			/* Send PIR status. */
			UART_sendByte(I_AM_READY);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
			while(I_AM_READY != UART_receiveByte());
    24c4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <UART_receiveByte>
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	e1 f7       	brne	.-8      	; 0x24c4 <main+0x120>
			UART_sendByte(PIR_getState());
    24cc:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <PIR_getState>
    24d0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <main+0x13a>

			/* Wait until there is no movement. */
			while(PIR_getState())
			{
				DcMotor_Rotate(STOP, MOTOR_STOP);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DcMotor_Rotate>
			UART_sendByte(I_AM_READY);
			while(I_AM_READY != UART_receiveByte());
			UART_sendByte(PIR_getState());

			/* Wait until there is no movement. */
			while(PIR_getState())
    24de:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <PIR_getState>
    24e2:	88 23       	and	r24, r24
    24e4:	c1 f7       	brne	.-16     	; 0x24d6 <main+0x132>
			{
				DcMotor_Rotate(STOP, MOTOR_STOP);
			}

			/* Send PIR status when there is no movement.. */
			UART_sendByte(PIR_getState());
    24e6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <PIR_getState>
    24ea:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <UART_sendByte>

			/* Close the door. */
			DcMotor_Rotate(CCW, MOTOR_MAX_SPEED);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	64 e6       	ldi	r22, 0x64	; 100
    24f2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DcMotor_Rotate>

			/* Wait 15s until door is closed. */
			delay_15s();
    24f6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay_15s>

			DcMotor_Rotate(STOP, MOTOR_STOP);
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <DcMotor_Rotate>
    2502:	96 cf       	rjmp	.-212    	; 0x2430 <main+0x8c>

			break;

		case '-':
			/* Take the password from EEPROM. */
			for(counter = 0; counter < PASSWORD_SIZE; counter++)
    2504:	1a 82       	std	Y+2, r1	; 0x02
    2506:	17 c0       	rjmp	.+46     	; 0x2536 <main+0x192>
			{
				EEPROM_readByte(address+counter, g_key_eeprom+counter);
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	80 91 84 00 	lds	r24, 0x0084
    2512:	90 91 85 00 	lds	r25, 0x0085
    2516:	a9 01       	movw	r20, r18
    2518:	48 0f       	add	r20, r24
    251a:	59 1f       	adc	r21, r25
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9c 01       	movw	r18, r24
    2524:	2f 56       	subi	r18, 0x6F	; 111
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	ca 01       	movw	r24, r20
    252a:	b9 01       	movw	r22, r18
    252c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <EEPROM_readByte>

			break;

		case '-':
			/* Take the password from EEPROM. */
			for(counter = 0; counter < PASSWORD_SIZE; counter++)
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	8a 83       	std	Y+2, r24	; 0x02
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	85 30       	cpi	r24, 0x05	; 5
    253a:	30 f3       	brcs	.-52     	; 0x2508 <main+0x164>
			{
				EEPROM_readByte(address+counter, g_key_eeprom+counter);
			}

			/* Receive password and check it.*/
			checkPassAndAlarm();
    253c:	0e 94 66 10 	call	0x20cc	; 0x20cc <checkPassAndAlarm>

			/* To go to home screen if the password was wrong 3 times. */
			if(3 == g_incorrectPass2)
    2540:	80 91 68 00 	lds	r24, 0x0068
    2544:	83 30       	cpi	r24, 0x03	; 3
    2546:	21 f4       	brne	.+8      	; 0x2550 <main+0x1ac>
			{
				g_incorrectPass2 = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 68 00 	sts	0x0068, r24
    254e:	70 cf       	rjmp	.-288    	; 0x2430 <main+0x8c>
				break;
			}

			/* Receive the 2 input passwords and check them. */
			/* If they are identical, save them to EEPROM. */
			receive2Password(g_key, g_key_confirm);
    2550:	86 e9       	ldi	r24, 0x96	; 150
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	26 e8       	ldi	r18, 0x86	; 134
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	b9 01       	movw	r22, r18
    255a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <receive2Password>
    255e:	68 cf       	rjmp	.-304    	; 0x2430 <main+0x8c>

00002560 <__divmodhi4>:
    2560:	97 fb       	bst	r25, 7
    2562:	09 2e       	mov	r0, r25
    2564:	07 26       	eor	r0, r23
    2566:	0a d0       	rcall	.+20     	; 0x257c <__divmodhi4_neg1>
    2568:	77 fd       	sbrc	r23, 7
    256a:	04 d0       	rcall	.+8      	; 0x2574 <__divmodhi4_neg2>
    256c:	2e d0       	rcall	.+92     	; 0x25ca <__udivmodhi4>
    256e:	06 d0       	rcall	.+12     	; 0x257c <__divmodhi4_neg1>
    2570:	00 20       	and	r0, r0
    2572:	1a f4       	brpl	.+6      	; 0x257a <__divmodhi4_exit>

00002574 <__divmodhi4_neg2>:
    2574:	70 95       	com	r23
    2576:	61 95       	neg	r22
    2578:	7f 4f       	sbci	r23, 0xFF	; 255

0000257a <__divmodhi4_exit>:
    257a:	08 95       	ret

0000257c <__divmodhi4_neg1>:
    257c:	f6 f7       	brtc	.-4      	; 0x257a <__divmodhi4_exit>
    257e:	90 95       	com	r25
    2580:	81 95       	neg	r24
    2582:	9f 4f       	sbci	r25, 0xFF	; 255
    2584:	08 95       	ret

00002586 <__udivmodsi4>:
    2586:	a1 e2       	ldi	r26, 0x21	; 33
    2588:	1a 2e       	mov	r1, r26
    258a:	aa 1b       	sub	r26, r26
    258c:	bb 1b       	sub	r27, r27
    258e:	fd 01       	movw	r30, r26
    2590:	0d c0       	rjmp	.+26     	; 0x25ac <__udivmodsi4_ep>

00002592 <__udivmodsi4_loop>:
    2592:	aa 1f       	adc	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	ee 1f       	adc	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	a2 17       	cp	r26, r18
    259c:	b3 07       	cpc	r27, r19
    259e:	e4 07       	cpc	r30, r20
    25a0:	f5 07       	cpc	r31, r21
    25a2:	20 f0       	brcs	.+8      	; 0x25ac <__udivmodsi4_ep>
    25a4:	a2 1b       	sub	r26, r18
    25a6:	b3 0b       	sbc	r27, r19
    25a8:	e4 0b       	sbc	r30, r20
    25aa:	f5 0b       	sbc	r31, r21

000025ac <__udivmodsi4_ep>:
    25ac:	66 1f       	adc	r22, r22
    25ae:	77 1f       	adc	r23, r23
    25b0:	88 1f       	adc	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	1a 94       	dec	r1
    25b6:	69 f7       	brne	.-38     	; 0x2592 <__udivmodsi4_loop>
    25b8:	60 95       	com	r22
    25ba:	70 95       	com	r23
    25bc:	80 95       	com	r24
    25be:	90 95       	com	r25
    25c0:	9b 01       	movw	r18, r22
    25c2:	ac 01       	movw	r20, r24
    25c4:	bd 01       	movw	r22, r26
    25c6:	cf 01       	movw	r24, r30
    25c8:	08 95       	ret

000025ca <__udivmodhi4>:
    25ca:	aa 1b       	sub	r26, r26
    25cc:	bb 1b       	sub	r27, r27
    25ce:	51 e1       	ldi	r21, 0x11	; 17
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <__udivmodhi4_ep>

000025d2 <__udivmodhi4_loop>:
    25d2:	aa 1f       	adc	r26, r26
    25d4:	bb 1f       	adc	r27, r27
    25d6:	a6 17       	cp	r26, r22
    25d8:	b7 07       	cpc	r27, r23
    25da:	10 f0       	brcs	.+4      	; 0x25e0 <__udivmodhi4_ep>
    25dc:	a6 1b       	sub	r26, r22
    25de:	b7 0b       	sbc	r27, r23

000025e0 <__udivmodhi4_ep>:
    25e0:	88 1f       	adc	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	5a 95       	dec	r21
    25e6:	a9 f7       	brne	.-22     	; 0x25d2 <__udivmodhi4_loop>
    25e8:	80 95       	com	r24
    25ea:	90 95       	com	r25
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	08 95       	ret

000025f2 <__prologue_saves__>:
    25f2:	2f 92       	push	r2
    25f4:	3f 92       	push	r3
    25f6:	4f 92       	push	r4
    25f8:	5f 92       	push	r5
    25fa:	6f 92       	push	r6
    25fc:	7f 92       	push	r7
    25fe:	8f 92       	push	r8
    2600:	9f 92       	push	r9
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	0f 93       	push	r16
    2610:	1f 93       	push	r17
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	ca 1b       	sub	r28, r26
    261c:	db 0b       	sbc	r29, r27
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	09 94       	ijmp

0000262a <__epilogue_restores__>:
    262a:	2a 88       	ldd	r2, Y+18	; 0x12
    262c:	39 88       	ldd	r3, Y+17	; 0x11
    262e:	48 88       	ldd	r4, Y+16	; 0x10
    2630:	5f 84       	ldd	r5, Y+15	; 0x0f
    2632:	6e 84       	ldd	r6, Y+14	; 0x0e
    2634:	7d 84       	ldd	r7, Y+13	; 0x0d
    2636:	8c 84       	ldd	r8, Y+12	; 0x0c
    2638:	9b 84       	ldd	r9, Y+11	; 0x0b
    263a:	aa 84       	ldd	r10, Y+10	; 0x0a
    263c:	b9 84       	ldd	r11, Y+9	; 0x09
    263e:	c8 84       	ldd	r12, Y+8	; 0x08
    2640:	df 80       	ldd	r13, Y+7	; 0x07
    2642:	ee 80       	ldd	r14, Y+6	; 0x06
    2644:	fd 80       	ldd	r15, Y+5	; 0x05
    2646:	0c 81       	ldd	r16, Y+4	; 0x04
    2648:	1b 81       	ldd	r17, Y+3	; 0x03
    264a:	aa 81       	ldd	r26, Y+2	; 0x02
    264c:	b9 81       	ldd	r27, Y+1	; 0x01
    264e:	ce 0f       	add	r28, r30
    2650:	d1 1d       	adc	r29, r1
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	ed 01       	movw	r28, r26
    265e:	08 95       	ret

00002660 <_exit>:
    2660:	f8 94       	cli

00002662 <__stop_program>:
    2662:	ff cf       	rjmp	.-2      	; 0x2662 <__stop_program>
