
Door_Locker_Security_System_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00003686  0000371a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080018e  0080018e  00003848  2**0
                  ALLOC
  3 .stab         000032b8  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a19  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008519  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008659  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_4>
      14:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_9>
      28:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_10>
      2c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <main>
      8a:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d5 1a 	jmp	0x35aa	; 0x35aa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:

/*
 * Setup the direction of the required pin as input or output.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	cd c0       	rjmp	.+410    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	c9 c0       	rjmp	.+402    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
	{
	}
	else
	{
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	41 c0       	rjmp	.+130    	; 0xc02 <GPIO_setupPinDirection+0xbc>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	b4 c0       	rjmp	.+360    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <GPIO_setupPinDirection+0x110>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	7f c0       	rjmp	.+254    	; 0xcaa <GPIO_setupPinDirection+0x164>
     bac:	a7 c0       	rjmp	.+334    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	99 f4       	brne	.+38     	; 0xbda <GPIO_setupPinDirection+0x94>
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	40 81       	ld	r20, Z
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <GPIO_setupPinDirection+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <GPIO_setupPinDirection+0x86>
     bd4:	84 2b       	or	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	91 c0       	rjmp	.+290    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			else
				CLEAR_BIT(DDRA,pin_num);
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	40 81       	ld	r20, Z
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <GPIO_setupPinDirection+0xac>
     bfa:	80 95       	com	r24
     bfc:	84 23       	and	r24, r20
     bfe:	8c 93       	st	X, r24
     c00:	7d c0       	rjmp	.+250    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	99 f4       	brne	.+38     	; 0xc2e <GPIO_setupPinDirection+0xe8>
				SET_BIT(DDRB,pin_num);
     c08:	a7 e3       	ldi	r26, 0x37	; 55
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e7 e3       	ldi	r30, 0x37	; 55
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	40 81       	ld	r20, Z
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <GPIO_setupPinDirection+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <GPIO_setupPinDirection+0xda>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	67 c0       	rjmp	.+206    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			else
				CLEAR_BIT(DDRB,pin_num);
     c2e:	a7 e3       	ldi	r26, 0x37	; 55
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e7 e3       	ldi	r30, 0x37	; 55
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	40 81       	ld	r20, Z
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 2e       	mov	r0, r18
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <GPIO_setupPinDirection+0x104>
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	0a 94       	dec	r0
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <GPIO_setupPinDirection+0x100>
     c4e:	80 95       	com	r24
     c50:	84 23       	and	r24, r20
     c52:	8c 93       	st	X, r24
     c54:	53 c0       	rjmp	.+166    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	99 f4       	brne	.+38     	; 0xc82 <GPIO_setupPinDirection+0x13c>
				SET_BIT(DDRC,pin_num);
     c5c:	a4 e3       	ldi	r26, 0x34	; 52
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e4 e3       	ldi	r30, 0x34	; 52
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	40 81       	ld	r20, Z
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 2e       	mov	r0, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <GPIO_setupPinDirection+0x132>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <GPIO_setupPinDirection+0x12e>
     c7c:	84 2b       	or	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	3d c0       	rjmp	.+122    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			else
				CLEAR_BIT(DDRC,pin_num);
     c82:	a4 e3       	ldi	r26, 0x34	; 52
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e4 e3       	ldi	r30, 0x34	; 52
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	40 81       	ld	r20, Z
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 2e       	mov	r0, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <GPIO_setupPinDirection+0x158>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <GPIO_setupPinDirection+0x154>
     ca2:	80 95       	com	r24
     ca4:	84 23       	and	r24, r20
     ca6:	8c 93       	st	X, r24
     ca8:	29 c0       	rjmp	.+82     	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	99 f4       	brne	.+38     	; 0xcd6 <GPIO_setupPinDirection+0x190>
				SET_BIT(DDRD,pin_num);
     cb0:	a1 e3       	ldi	r26, 0x31	; 49
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e1 e3       	ldi	r30, 0x31	; 49
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	40 81       	ld	r20, Z
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <GPIO_setupPinDirection+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <GPIO_setupPinDirection+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	13 c0       	rjmp	.+38     	; 0xcfc <GPIO_setupPinDirection+0x1b6>
			else
				CLEAR_BIT(DDRD,pin_num);
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	40 81       	ld	r20, Z
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1ac>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1a8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:

/*
 * Write a logic value to a specific pin.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_writePin+0x1c>
     d26:	cd c0       	rjmp	.+410    	; 0xec2 <GPIO_writePin+0x1b6>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GPIO_writePin+0x24>
     d2e:	c9 c0       	rjmp	.+402    	; 0xec2 <GPIO_writePin+0x1b6>
	{
	}
	else
	{
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_writePin+0x3a>
     d44:	41 c0       	rjmp	.+130    	; 0xdc8 <GPIO_writePin+0xbc>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <GPIO_writePin+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <GPIO_writePin+0x68>
     d58:	b4 c0       	rjmp	.+360    	; 0xec2 <GPIO_writePin+0x1b6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <GPIO_writePin+0x5a>
     d64:	5b c0       	rjmp	.+182    	; 0xe1c <GPIO_writePin+0x110>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_writePin+0x66>
     d70:	7f c0       	rjmp	.+254    	; 0xe70 <GPIO_writePin+0x164>
     d72:	a7 c0       	rjmp	.+334    	; 0xec2 <GPIO_writePin+0x1b6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	99 f4       	brne	.+38     	; 0xda0 <GPIO_writePin+0x94>
				SET_BIT(PORTA,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	40 81       	ld	r20, Z
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <GPIO_writePin+0x8a>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <GPIO_writePin+0x86>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	91 c0       	rjmp	.+290    	; 0xec2 <GPIO_writePin+0x1b6>
			else
				CLEAR_BIT(PORTA,pin_num);
     da0:	ab e3       	ldi	r26, 0x3B	; 59
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	eb e3       	ldi	r30, 0x3B	; 59
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	40 81       	ld	r20, Z
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <GPIO_writePin+0xb0>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <GPIO_writePin+0xac>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	7d c0       	rjmp	.+250    	; 0xec2 <GPIO_writePin+0x1b6>
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	99 f4       	brne	.+38     	; 0xdf4 <GPIO_writePin+0xe8>
				SET_BIT(PORTB,pin_num);
     dce:	a8 e3       	ldi	r26, 0x38	; 56
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e8 e3       	ldi	r30, 0x38	; 56
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	40 81       	ld	r20, Z
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <GPIO_writePin+0xde>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <GPIO_writePin+0xda>
     dee:	84 2b       	or	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	67 c0       	rjmp	.+206    	; 0xec2 <GPIO_writePin+0x1b6>
			else
				CLEAR_BIT(PORTB,pin_num);
     df4:	a8 e3       	ldi	r26, 0x38	; 56
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e8 e3       	ldi	r30, 0x38	; 56
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	40 81       	ld	r20, Z
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <GPIO_writePin+0x104>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <GPIO_writePin+0x100>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	53 c0       	rjmp	.+166    	; 0xec2 <GPIO_writePin+0x1b6>
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	99 f4       	brne	.+38     	; 0xe48 <GPIO_writePin+0x13c>
				SET_BIT(PORTC,pin_num);
     e22:	a5 e3       	ldi	r26, 0x35	; 53
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e3       	ldi	r30, 0x35	; 53
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	40 81       	ld	r20, Z
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_writePin+0x132>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_writePin+0x12e>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	3d c0       	rjmp	.+122    	; 0xec2 <GPIO_writePin+0x1b6>
			else
				CLEAR_BIT(PORTC,pin_num);
     e48:	a5 e3       	ldi	r26, 0x35	; 53
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e5 e3       	ldi	r30, 0x35	; 53
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	40 81       	ld	r20, Z
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_writePin+0x158>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_writePin+0x154>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	29 c0       	rjmp	.+82     	; 0xec2 <GPIO_writePin+0x1b6>
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	99 f4       	brne	.+38     	; 0xe9c <GPIO_writePin+0x190>
				SET_BIT(PORTD,pin_num);
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	40 81       	ld	r20, Z
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <GPIO_writePin+0x186>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <GPIO_writePin+0x182>
     e96:	84 2b       	or	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	13 c0       	rjmp	.+38     	; 0xec2 <GPIO_writePin+0x1b6>
			else
				CLEAR_BIT(PORTD,pin_num);
     e9c:	a2 e3       	ldi	r26, 0x32	; 50
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e2 e3       	ldi	r30, 0x32	; 50
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	40 81       	ld	r20, Z
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <GPIO_writePin+0x1ac>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <GPIO_writePin+0x1a8>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
			break;
		}
	}
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <GPIO_readPin>:

/*
 * Read and return the logic level of a specific pin.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	29 97       	sbiw	r28, 0x09	; 9
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	8a 83       	std	Y+2, r24	; 0x02
     ee8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     eea:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	88 30       	cpi	r24, 0x08	; 8
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <GPIO_readPin+0x22>
     ef2:	8c c0       	rjmp	.+280    	; 0x100c <GPIO_readPin+0x13a>
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	08 f0       	brcs	.+2      	; 0xefc <GPIO_readPin+0x2a>
     efa:	88 c0       	rjmp	.+272    	; 0x100c <GPIO_readPin+0x13a>
	{
	}
	else
	{
		switch(port_num)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	39 87       	std	Y+9, r19	; 0x09
     f04:	28 87       	std	Y+8, r18	; 0x08
     f06:	48 85       	ldd	r20, Y+8	; 0x08
     f08:	59 85       	ldd	r21, Y+9	; 0x09
     f0a:	41 30       	cpi	r20, 0x01	; 1
     f0c:	51 05       	cpc	r21, r1
     f0e:	89 f1       	breq	.+98     	; 0xf72 <GPIO_readPin+0xa0>
     f10:	88 85       	ldd	r24, Y+8	; 0x08
     f12:	99 85       	ldd	r25, Y+9	; 0x09
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	91 05       	cpc	r25, r1
     f18:	34 f4       	brge	.+12     	; 0xf26 <GPIO_readPin+0x54>
     f1a:	28 85       	ldd	r18, Y+8	; 0x08
     f1c:	39 85       	ldd	r19, Y+9	; 0x09
     f1e:	21 15       	cp	r18, r1
     f20:	31 05       	cpc	r19, r1
     f22:	69 f0       	breq	.+26     	; 0xf3e <GPIO_readPin+0x6c>
     f24:	73 c0       	rjmp	.+230    	; 0x100c <GPIO_readPin+0x13a>
     f26:	48 85       	ldd	r20, Y+8	; 0x08
     f28:	59 85       	ldd	r21, Y+9	; 0x09
     f2a:	42 30       	cpi	r20, 0x02	; 2
     f2c:	51 05       	cpc	r21, r1
     f2e:	d9 f1       	breq	.+118    	; 0xfa6 <GPIO_readPin+0xd4>
     f30:	88 85       	ldd	r24, Y+8	; 0x08
     f32:	99 85       	ldd	r25, Y+9	; 0x09
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	91 05       	cpc	r25, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <GPIO_readPin+0x6a>
     f3a:	4f c0       	rjmp	.+158    	; 0xfda <GPIO_readPin+0x108>
     f3c:	67 c0       	rjmp	.+206    	; 0x100c <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			pin_value = (BIT_IS_SET(PINA,pin_num)) ? LOGIC_HIGH : LOGIC_LOW;
     f3e:	e9 e3       	ldi	r30, 0x39	; 57
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_readPin+0x84>
     f52:	56 95       	lsr	r21
     f54:	47 95       	ror	r20
     f56:	8a 95       	dec	r24
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_readPin+0x80>
     f5a:	ca 01       	movw	r24, r20
     f5c:	81 70       	andi	r24, 0x01	; 1
     f5e:	90 70       	andi	r25, 0x00	; 0
     f60:	88 23       	and	r24, r24
     f62:	19 f0       	breq	.+6      	; 0xf6a <GPIO_readPin+0x98>
     f64:	51 e0       	ldi	r21, 0x01	; 1
     f66:	5f 83       	std	Y+7, r21	; 0x07
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <GPIO_readPin+0x9a>
     f6a:	1f 82       	std	Y+7, r1	; 0x07
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	4d c0       	rjmp	.+154    	; 0x100c <GPIO_readPin+0x13a>
			break;
		case PORTB_ID:
			pin_value = (BIT_IS_SET(PINB,pin_num)) ? LOGIC_HIGH : LOGIC_LOW;
     f72:	e6 e3       	ldi	r30, 0x36	; 54
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a9 01       	movw	r20, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_readPin+0xb8>
     f86:	56 95       	lsr	r21
     f88:	47 95       	ror	r20
     f8a:	8a 95       	dec	r24
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_readPin+0xb4>
     f8e:	ca 01       	movw	r24, r20
     f90:	81 70       	andi	r24, 0x01	; 1
     f92:	90 70       	andi	r25, 0x00	; 0
     f94:	88 23       	and	r24, r24
     f96:	19 f0       	breq	.+6      	; 0xf9e <GPIO_readPin+0xcc>
     f98:	51 e0       	ldi	r21, 0x01	; 1
     f9a:	5e 83       	std	Y+6, r21	; 0x06
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <GPIO_readPin+0xce>
     f9e:	1e 82       	std	Y+6, r1	; 0x06
     fa0:	8e 81       	ldd	r24, Y+6	; 0x06
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	33 c0       	rjmp	.+102    	; 0x100c <GPIO_readPin+0x13a>
			break;
		case PORTC_ID:
			pin_value = (BIT_IS_SET(PINC,pin_num)) ? LOGIC_HIGH : LOGIC_LOW;
     fa6:	e3 e3       	ldi	r30, 0x33	; 51
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_readPin+0xec>
     fba:	56 95       	lsr	r21
     fbc:	47 95       	ror	r20
     fbe:	8a 95       	dec	r24
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_readPin+0xe8>
     fc2:	ca 01       	movw	r24, r20
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	90 70       	andi	r25, 0x00	; 0
     fc8:	88 23       	and	r24, r24
     fca:	19 f0       	breq	.+6      	; 0xfd2 <GPIO_readPin+0x100>
     fcc:	51 e0       	ldi	r21, 0x01	; 1
     fce:	5d 83       	std	Y+5, r21	; 0x05
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <GPIO_readPin+0x102>
     fd2:	1d 82       	std	Y+5, r1	; 0x05
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	19 c0       	rjmp	.+50     	; 0x100c <GPIO_readPin+0x13a>
			break;
		case PORTD_ID:
			pin_value = (BIT_IS_SET(PIND,pin_num)) ? LOGIC_HIGH : LOGIC_LOW;
     fda:	e0 e3       	ldi	r30, 0x30	; 48
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a9 01       	movw	r20, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_readPin+0x120>
     fee:	56 95       	lsr	r21
     ff0:	47 95       	ror	r20
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_readPin+0x11c>
     ff6:	ca 01       	movw	r24, r20
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	88 23       	and	r24, r24
     ffe:	19 f0       	breq	.+6      	; 0x1006 <GPIO_readPin+0x134>
    1000:	51 e0       	ldi	r21, 0x01	; 1
    1002:	5c 83       	std	Y+4, r21	; 0x04
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <GPIO_readPin+0x136>
    1006:	1c 82       	std	Y+4, r1	; 0x04
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return pin_value;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
}
    100e:	29 96       	adiw	r28, 0x09	; 9
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <GPIO_setupPortDirection>:

/*
 * Set the direction of all pins in a port.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <GPIO_setupPortDirection+0x6>
    1026:	00 d0       	rcall	.+0      	; 0x1028 <GPIO_setupPortDirection+0x8>
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	84 30       	cpi	r24, 0x04	; 4
    1034:	90 f5       	brcc	.+100    	; 0x109a <GPIO_setupPortDirection+0x7a>
	{
	}
	else
	{
		switch(port_num)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3c 83       	std	Y+4, r19	; 0x04
    103e:	2b 83       	std	Y+3, r18	; 0x03
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	d1 f0       	breq	.+52     	; 0x107e <GPIO_setupPortDirection+0x5e>
    104a:	2b 81       	ldd	r18, Y+3	; 0x03
    104c:	3c 81       	ldd	r19, Y+4	; 0x04
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	2c f4       	brge	.+10     	; 0x105e <GPIO_setupPortDirection+0x3e>
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	61 f0       	breq	.+24     	; 0x1074 <GPIO_setupPortDirection+0x54>
    105c:	1e c0       	rjmp	.+60     	; 0x109a <GPIO_setupPortDirection+0x7a>
    105e:	2b 81       	ldd	r18, Y+3	; 0x03
    1060:	3c 81       	ldd	r19, Y+4	; 0x04
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	81 f0       	breq	.+32     	; 0x1088 <GPIO_setupPortDirection+0x68>
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	81 f0       	breq	.+32     	; 0x1092 <GPIO_setupPortDirection+0x72>
    1072:	13 c0       	rjmp	.+38     	; 0x109a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	80 83       	st	Z, r24
    107c:	0e c0       	rjmp	.+28     	; 0x109a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    107e:	e7 e3       	ldi	r30, 0x37	; 55
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
    1086:	09 c0       	rjmp	.+18     	; 0x109a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1088:	e4 e3       	ldi	r30, 0x34	; 52
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
    1090:	04 c0       	rjmp	.+8      	; 0x109a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1092:	e1 e3       	ldi	r30, 0x31	; 49
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 83       	st	Z, r24
			break;
		}
	}
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <GPIO_writePort>:

/*
 * Write a value to an entire port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <GPIO_writePort+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <GPIO_writePort+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	84 30       	cpi	r24, 0x04	; 4
    10bc:	90 f5       	brcc	.+100    	; 0x1122 <GPIO_writePort+0x7a>
	{
	}
	else
	{
		switch(port_num)
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	d1 f0       	breq	.+52     	; 0x1106 <GPIO_writePort+0x5e>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <GPIO_writePort+0x3e>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	61 f0       	breq	.+24     	; 0x10fc <GPIO_writePort+0x54>
    10e4:	1e c0       	rjmp	.+60     	; 0x1122 <GPIO_writePort+0x7a>
    10e6:	2b 81       	ldd	r18, Y+3	; 0x03
    10e8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	81 f0       	breq	.+32     	; 0x1110 <GPIO_writePort+0x68>
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	81 f0       	breq	.+32     	; 0x111a <GPIO_writePort+0x72>
    10fa:	13 c0       	rjmp	.+38     	; 0x1122 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10fc:	eb e3       	ldi	r30, 0x3B	; 59
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	80 83       	st	Z, r24
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
			break;
		}
	}
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <GPIO_readPort>:

/*
 * Read and return the value of the entire port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <GPIO_readPort+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <GPIO_readPort+0x8>
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    113e:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	84 30       	cpi	r24, 0x04	; 4
    1144:	90 f5       	brcc	.+100    	; 0x11aa <GPIO_readPort+0x7a>
	{
	}
	else
	{
		switch(port_num)
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3c 83       	std	Y+4, r19	; 0x04
    114e:	2b 83       	std	Y+3, r18	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	d1 f0       	breq	.+52     	; 0x118e <GPIO_readPort+0x5e>
    115a:	2b 81       	ldd	r18, Y+3	; 0x03
    115c:	3c 81       	ldd	r19, Y+4	; 0x04
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <GPIO_readPort+0x3e>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	61 f0       	breq	.+24     	; 0x1184 <GPIO_readPort+0x54>
    116c:	1e c0       	rjmp	.+60     	; 0x11aa <GPIO_readPort+0x7a>
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	3c 81       	ldd	r19, Y+4	; 0x04
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <GPIO_readPort+0x68>
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	81 f0       	breq	.+32     	; 0x11a2 <GPIO_readPort+0x72>
    1182:	13 c0       	rjmp	.+38     	; 0x11aa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1184:	e9 e3       	ldi	r30, 0x39	; 57
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    118e:	e6 e3       	ldi	r30, 0x36	; 54
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1198:	e3 e3       	ldi	r30, 0x33	; 51
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11a2:	e0 e3       	ldi	r30, 0x30	; 48
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <__vector_11>:
static volatile void (*g_callBackPtr_timer1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr_timer2)(void) = NULL_PTR;

// Timer0 ISR
ISR(TIMER0_OVF_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	2f 93       	push	r18
    11c6:	3f 93       	push	r19
    11c8:	4f 93       	push	r20
    11ca:	5f 93       	push	r21
    11cc:	6f 93       	push	r22
    11ce:	7f 93       	push	r23
    11d0:	8f 93       	push	r24
    11d2:	9f 93       	push	r25
    11d4:	af 93       	push	r26
    11d6:	bf 93       	push	r27
    11d8:	ef 93       	push	r30
    11da:	ff 93       	push	r31
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    11e4:	80 91 8e 01 	lds	r24, 0x018E
    11e8:	90 91 8f 01 	lds	r25, 0x018F
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	29 f0       	breq	.+10     	; 0x11fa <__vector_11+0x40>
		(*g_callBackPtr_timer0)();
    11f0:	e0 91 8e 01 	lds	r30, 0x018E
    11f4:	f0 91 8f 01 	lds	r31, 0x018F
    11f8:	09 95       	icall
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    124a:	80 91 8e 01 	lds	r24, 0x018E
    124e:	90 91 8f 01 	lds	r25, 0x018F
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	29 f0       	breq	.+10     	; 0x1260 <__vector_10+0x40>
		(*g_callBackPtr_timer0)();
    1256:	e0 91 8e 01 	lds	r30, 0x018E
    125a:	f0 91 8f 01 	lds	r31, 0x018F
    125e:	09 95       	icall
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_9>:

// Timer1 ISR
ISR(TIMER1_OVF_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    12b0:	80 91 90 01 	lds	r24, 0x0190
    12b4:	90 91 91 01 	lds	r25, 0x0191
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <__vector_9+0x40>
		(*g_callBackPtr_timer1)();
    12bc:	e0 91 90 01 	lds	r30, 0x0190
    12c0:	f0 91 91 01 	lds	r31, 0x0191
    12c4:	09 95       	icall
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    1316:	80 91 90 01 	lds	r24, 0x0190
    131a:	90 91 91 01 	lds	r25, 0x0191
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	29 f0       	breq	.+10     	; 0x132c <__vector_7+0x40>
		(*g_callBackPtr_timer1)();
    1322:	e0 91 90 01 	lds	r30, 0x0190
    1326:	f0 91 91 01 	lds	r31, 0x0191
    132a:	09 95       	icall
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_5>:

// Timer2 ISR
ISR(TIMER2_OVF_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    137c:	80 91 92 01 	lds	r24, 0x0192
    1380:	90 91 93 01 	lds	r25, 0x0193
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	29 f0       	breq	.+10     	; 0x1392 <__vector_5+0x40>
		(*g_callBackPtr_timer2)();
    1388:	e0 91 92 01 	lds	r30, 0x0192
    138c:	f0 91 93 01 	lds	r31, 0x0193
    1390:	09 95       	icall
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	ff 91       	pop	r31
    1398:	ef 91       	pop	r30
    139a:	bf 91       	pop	r27
    139c:	af 91       	pop	r26
    139e:	9f 91       	pop	r25
    13a0:	8f 91       	pop	r24
    13a2:	7f 91       	pop	r23
    13a4:	6f 91       	pop	r22
    13a6:	5f 91       	pop	r21
    13a8:	4f 91       	pop	r20
    13aa:	3f 91       	pop	r19
    13ac:	2f 91       	pop	r18
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	6f 93       	push	r22
    13cc:	7f 93       	push	r23
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    13e2:	80 91 92 01 	lds	r24, 0x0192
    13e6:	90 91 93 01 	lds	r25, 0x0193
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	29 f0       	breq	.+10     	; 0x13f8 <__vector_4+0x40>
		(*g_callBackPtr_timer2)();
    13ee:	e0 91 92 01 	lds	r30, 0x0192
    13f2:	f0 91 93 01 	lds	r31, 0x0193
    13f6:	09 95       	icall
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <Timer_init>:

// Initialize the selected Timer
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <Timer_init+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <Timer_init+0x8>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <Timer_init+0x2a>
    1446:	47 c0       	rjmp	.+142    	; 0x14d6 <Timer_init+0xb8>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <Timer_init+0x36>
    1452:	85 c0       	rjmp	.+266    	; 0x155e <Timer_init+0x140>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	09 f0       	breq	.+2      	; 0x145e <Timer_init+0x40>
    145c:	bb c0       	rjmp	.+374    	; 0x15d4 <Timer_init+0x1b6>
	{
	case TIMER0_ID:
		TCCR0 = (1<<FOC0) | ((Config_Ptr->timer_mode)<<WGM01) | ((Config_Ptr->timer_clock)<<CS00);
    145e:	a3 e5       	ldi	r26, 0x53	; 83
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	86 81       	ldd	r24, Z+6	; 0x06
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	98 2f       	mov	r25, r24
    147a:	90 68       	ori	r25, 0x80	; 128
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	85 81       	ldd	r24, Z+5	; 0x05
    1482:	89 2b       	or	r24, r25
    1484:	8c 93       	st	X, r24
		TCNT0 = Config_Ptr->timer_InitialValue;
    1486:	a2 e5       	ldi	r26, 0x52	; 82
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e9 81       	ldd	r30, Y+1	; 0x01
    148c:	fa 81       	ldd	r31, Y+2	; 0x02
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == COMPARE_MODE)
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	86 81       	ldd	r24, Z+6	; 0x06
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	39 f4       	brne	.+14     	; 0x14ac <Timer_init+0x8e>
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    149e:	ac e5       	ldi	r26, 0x5C	; 92
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e9 81       	ldd	r30, Y+1	; 0x01
    14a4:	fa 81       	ldd	r31, Y+2	; 0x02
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == NORMAL_MODE)
    14ac:	e9 81       	ldd	r30, Y+1	; 0x01
    14ae:	fa 81       	ldd	r31, Y+2	; 0x02
    14b0:	86 81       	ldd	r24, Z+6	; 0x06
    14b2:	88 23       	and	r24, r24
    14b4:	41 f4       	brne	.+16     	; 0x14c6 <Timer_init+0xa8>
			TIMSK |= (1<<TOIE0);
    14b6:	a9 e5       	ldi	r26, 0x59	; 89
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 e5       	ldi	r30, 0x59	; 89
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	8c 93       	st	X, r24
    14c4:	87 c0       	rjmp	.+270    	; 0x15d4 <Timer_init+0x1b6>
		else
			TIMSK |= (1<<OCIE0);
    14c6:	a9 e5       	ldi	r26, 0x59	; 89
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e5       	ldi	r30, 0x59	; 89
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	82 60       	ori	r24, 0x02	; 2
    14d2:	8c 93       	st	X, r24
    14d4:	7f c0       	rjmp	.+254    	; 0x15d4 <Timer_init+0x1b6>
		break;

	case TIMER1_ID:
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    14d6:	ef e4       	ldi	r30, 0x4F	; 79
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8c e0       	ldi	r24, 0x0C	; 12
    14dc:	80 83       	st	Z, r24
		TCCR1B = ((Config_Ptr->timer_mode)<<WGM12) | ((Config_Ptr->timer_clock)<<CS10);
    14de:	ae e4       	ldi	r26, 0x4E	; 78
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	86 81       	ldd	r24, Z+6	; 0x06
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	98 2f       	mov	r25, r24
    14fa:	e9 81       	ldd	r30, Y+1	; 0x01
    14fc:	fa 81       	ldd	r31, Y+2	; 0x02
    14fe:	85 81       	ldd	r24, Z+5	; 0x05
    1500:	89 2b       	or	r24, r25
    1502:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->timer_InitialValue;
    1504:	ac e4       	ldi	r26, 0x4C	; 76
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	9c 93       	st	X, r25
    1514:	8e 93       	st	-X, r24
		if(Config_Ptr->timer_mode == COMPARE_MODE)
    1516:	e9 81       	ldd	r30, Y+1	; 0x01
    1518:	fa 81       	ldd	r31, Y+2	; 0x02
    151a:	86 81       	ldd	r24, Z+6	; 0x06
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	51 f4       	brne	.+20     	; 0x1534 <Timer_init+0x116>
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1520:	ea e4       	ldi	r30, 0x4A	; 74
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	a9 81       	ldd	r26, Y+1	; 0x01
    1526:	ba 81       	ldd	r27, Y+2	; 0x02
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	8d 91       	ld	r24, X+
    152c:	9c 91       	ld	r25, X
    152e:	13 97       	sbiw	r26, 0x03	; 3
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
		if(Config_Ptr->timer_mode == NORMAL_MODE)
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	86 81       	ldd	r24, Z+6	; 0x06
    153a:	88 23       	and	r24, r24
    153c:	41 f4       	brne	.+16     	; 0x154e <Timer_init+0x130>
			TIMSK |= (1<<TOIE1);
    153e:	a9 e5       	ldi	r26, 0x59	; 89
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e9 e5       	ldi	r30, 0x59	; 89
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	8c 93       	st	X, r24
    154c:	43 c0       	rjmp	.+134    	; 0x15d4 <Timer_init+0x1b6>
		else
			TIMSK |= (1<<OCIE1A);
    154e:	a9 e5       	ldi	r26, 0x59	; 89
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e9 e5       	ldi	r30, 0x59	; 89
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 61       	ori	r24, 0x10	; 16
    155a:	8c 93       	st	X, r24
    155c:	3b c0       	rjmp	.+118    	; 0x15d4 <Timer_init+0x1b6>
		break;

	case TIMER2_ID:
		TCCR2 = (1<<FOC2) | ((Config_Ptr->timer_mode)<<WGM21) | ((Config_Ptr->timer_clock)<<CS20);
    155e:	a5 e4       	ldi	r26, 0x45	; 69
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e9 81       	ldd	r30, Y+1	; 0x01
    1564:	fa 81       	ldd	r31, Y+2	; 0x02
    1566:	86 81       	ldd	r24, Z+6	; 0x06
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	98 2f       	mov	r25, r24
    157a:	90 68       	ori	r25, 0x80	; 128
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	85 81       	ldd	r24, Z+5	; 0x05
    1582:	89 2b       	or	r24, r25
    1584:	8c 93       	st	X, r24
		TCNT2 = Config_Ptr->timer_InitialValue;
    1586:	a4 e4       	ldi	r26, 0x44	; 68
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == COMPARE_MODE)
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	86 81       	ldd	r24, Z+6	; 0x06
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	39 f4       	brne	.+14     	; 0x15ac <Timer_init+0x18e>
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    159e:	a3 e4       	ldi	r26, 0x43	; 67
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	8c 93       	st	X, r24
		if(Config_Ptr->timer_mode == NORMAL_MODE)
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	86 81       	ldd	r24, Z+6	; 0x06
    15b2:	88 23       	and	r24, r24
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <Timer_init+0x1a8>
			TIMSK |= (1<<TOIE2);
    15b6:	a9 e5       	ldi	r26, 0x59	; 89
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e9 e5       	ldi	r30, 0x59	; 89
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 64       	ori	r24, 0x40	; 64
    15c2:	8c 93       	st	X, r24
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <Timer_init+0x1b6>
		else
			TIMSK |= (1<<OCIE2);
    15c6:	a9 e5       	ldi	r26, 0x59	; 89
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e9 e5       	ldi	r30, 0x59	; 89
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	8c 93       	st	X, r24
		break;
	}
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Timer_deInit>:

// Deinitialize the selected Timer
void Timer_deInit(Timer_ID_Type timer_type)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Timer_deInit+0x6>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3b 83       	std	Y+3, r19	; 0x03
    15f8:	2a 83       	std	Y+2, r18	; 0x02
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	39 f1       	breq	.+78     	; 0x1652 <Timer_deInit+0x70>
    1604:	2a 81       	ldd	r18, Y+2	; 0x02
    1606:	3b 81       	ldd	r19, Y+3	; 0x03
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <Timer_deInit+0x2e>
    160e:	42 c0       	rjmp	.+132    	; 0x1694 <Timer_deInit+0xb2>
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	9b 81       	ldd	r25, Y+3	; 0x03
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	09 f0       	breq	.+2      	; 0x161a <Timer_deInit+0x38>
    1618:	58 c0       	rjmp	.+176    	; 0x16ca <Timer_deInit+0xe8>
	{
	case TIMER0_ID:
		TCCR0 = 0;
    161a:	e3 e5       	ldi	r30, 0x53	; 83
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	10 82       	st	Z, r1
		TCNT0 = 0;
    1620:	e2 e5       	ldi	r30, 0x52	; 82
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	10 82       	st	Z, r1
		OCR0 = 0;
    1626:	ec e5       	ldi	r30, 0x5C	; 92
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);
    162c:	a9 e5       	ldi	r26, 0x59	; 89
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e9 e5       	ldi	r30, 0x59	; 89
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8e 7f       	andi	r24, 0xFE	; 254
    1638:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    163a:	a9 e5       	ldi	r26, 0x59	; 89
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e9 e5       	ldi	r30, 0x59	; 89
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8d 7f       	andi	r24, 0xFD	; 253
    1646:	8c 93       	st	X, r24
		g_callBackPtr_timer0 = NULL_PTR;
    1648:	10 92 8f 01 	sts	0x018F, r1
    164c:	10 92 8e 01 	sts	0x018E, r1
    1650:	3c c0       	rjmp	.+120    	; 0x16ca <Timer_deInit+0xe8>
		break;

	case TIMER1_ID:
		TCCR1A = 0;
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	10 82       	st	Z, r1
		TCCR1B = 0;
    1658:	ee e4       	ldi	r30, 0x4E	; 78
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	10 82       	st	Z, r1
		TCNT1 = 0;
    165e:	ec e4       	ldi	r30, 0x4C	; 76
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	11 82       	std	Z+1, r1	; 0x01
    1664:	10 82       	st	Z, r1
		OCR1A = 0;
    1666:	ea e4       	ldi	r30, 0x4A	; 74
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	11 82       	std	Z+1, r1	; 0x01
    166c:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1);
    166e:	a9 e5       	ldi	r26, 0x59	; 89
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e9 e5       	ldi	r30, 0x59	; 89
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8b 7f       	andi	r24, 0xFB	; 251
    167a:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    167c:	a9 e5       	ldi	r26, 0x59	; 89
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e9 e5       	ldi	r30, 0x59	; 89
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 7e       	andi	r24, 0xEF	; 239
    1688:	8c 93       	st	X, r24
		g_callBackPtr_timer1 = NULL_PTR;
    168a:	10 92 91 01 	sts	0x0191, r1
    168e:	10 92 90 01 	sts	0x0190, r1
    1692:	1b c0       	rjmp	.+54     	; 0x16ca <Timer_deInit+0xe8>
		break;

	case TIMER2_ID:
		TCCR2 = 0;
    1694:	e5 e4       	ldi	r30, 0x45	; 69
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
		TCNT2 = 0;
    169a:	e4 e4       	ldi	r30, 0x44	; 68
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
		OCR2 = 0;
    16a0:	e3 e4       	ldi	r30, 0x43	; 67
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2);
    16a6:	a9 e5       	ldi	r26, 0x59	; 89
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e9 e5       	ldi	r30, 0x59	; 89
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 7b       	andi	r24, 0xBF	; 191
    16b2:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    16b4:	a9 e5       	ldi	r26, 0x59	; 89
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e9 e5       	ldi	r30, 0x59	; 89
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8f 77       	andi	r24, 0x7F	; 127
    16c0:	8c 93       	st	X, r24
		g_callBackPtr_timer2 = NULL_PTR;
    16c2:	10 92 93 01 	sts	0x0193, r1
    16c6:	10 92 92 01 	sts	0x0192, r1
		break;
	}
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <Timer_getTimerValue>:

// Return the current timer counter value
uint16 Timer_getTimerValue(Timer_ID_Type timer_type)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <Timer_getTimerValue+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <Timer_getTimerValue+0x8>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	3d 83       	std	Y+5, r19	; 0x05
    16ee:	2c 83       	std	Y+4, r18	; 0x04
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	91 05       	cpc	r25, r1
    16f8:	89 f0       	breq	.+34     	; 0x171c <Timer_getTimerValue+0x46>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	99 f0       	breq	.+38     	; 0x172a <Timer_getTimerValue+0x54>
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	b9 f4       	brne	.+46     	; 0x173a <Timer_getTimerValue+0x64>
	{
	case TIMER0_ID:
		return TCNT0;
    170c:	e2 e5       	ldi	r30, 0x52	; 82
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	3b 83       	std	Y+3, r19	; 0x03
    1718:	2a 83       	std	Y+2, r18	; 0x02
    171a:	11 c0       	rjmp	.+34     	; 0x173e <Timer_getTimerValue+0x68>
	case TIMER1_ID:
		return TCNT1;
    171c:	ec e4       	ldi	r30, 0x4C	; 76
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	9b 83       	std	Y+3, r25	; 0x03
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	0a c0       	rjmp	.+20     	; 0x173e <Timer_getTimerValue+0x68>
	case TIMER2_ID:
		return TCNT2;
    172a:	e4 e4       	ldi	r30, 0x44	; 68
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3b 83       	std	Y+3, r19	; 0x03
    1736:	2a 83       	std	Y+2, r18	; 0x02
    1738:	02 c0       	rjmp	.+4      	; 0x173e <Timer_getTimerValue+0x68>
	default:
		return 0;
    173a:	1b 82       	std	Y+3, r1	; 0x03
    173c:	1a 82       	std	Y+2, r1	; 0x02
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <Timer_setCallBack>:

// Set the callback function for a specific timer
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_type)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	00 d0       	rcall	.+0      	; 0x1758 <Timer_setCallBack+0x6>
    1758:	00 d0       	rcall	.+0      	; 0x175a <Timer_setCallBack+0x8>
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_type)
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	3d 83       	std	Y+5, r19	; 0x05
    176e:	2c 83       	std	Y+4, r18	; 0x04
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	81 30       	cpi	r24, 0x01	; 1
    1776:	91 05       	cpc	r25, r1
    1778:	81 f0       	breq	.+32     	; 0x179a <Timer_setCallBack+0x48>
    177a:	2c 81       	ldd	r18, Y+4	; 0x04
    177c:	3d 81       	ldd	r19, Y+5	; 0x05
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	91 f0       	breq	.+36     	; 0x17a8 <Timer_setCallBack+0x56>
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	9d 81       	ldd	r25, Y+5	; 0x05
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	a1 f4       	brne	.+40     	; 0x17b4 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_timer0 = a_ptr;
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	90 93 8f 01 	sts	0x018F, r25
    1794:	80 93 8e 01 	sts	0x018E, r24
    1798:	0d c0       	rjmp	.+26     	; 0x17b4 <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_timer1 = a_ptr;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	90 93 91 01 	sts	0x0191, r25
    17a2:	80 93 90 01 	sts	0x0190, r24
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_timer2 = a_ptr;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	90 93 93 01 	sts	0x0193, r25
    17b0:	80 93 92 01 	sts	0x0192, r24
		break;
	}
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <UART_init>:
#include <avr/io.h>
#include "../Common_Macros/common_macros.h"

// Initialize UART peripheral with user-defined settings
void UART_init(const UART_ConfigType * Config_Ptr)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <UART_init+0x6>
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <UART_init+0x8>
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    17d4:	1a 82       	std	Y+2, r1	; 0x02
    17d6:	19 82       	std	Y+1, r1	; 0x01

    // Enable double speed mode
    UCSRA = (1 << U2X);
    17d8:	eb e2       	ldi	r30, 0x2B	; 43
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	80 83       	st	Z, r24

    // Enable transmitter and receiver, 8-bit data mode (UCSZ2 = 0)
    UCSRB = (1 << RXEN) | (1 << TXEN);
    17e0:	ea e2       	ldi	r30, 0x2A	; 42
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	88 e1       	ldi	r24, 0x18	; 24
    17e6:	80 83       	st	Z, r24

    // Set frame format: data bits, parity, stop bits
    UCSRC = (1 << URSEL)
    17e8:	a0 e4       	ldi	r26, 0x40	; 64
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	eb 81       	ldd	r30, Y+3	; 0x03
    17ee:	fc 81       	ldd	r31, Y+4	; 0x04
    17f0:	86 81       	ldd	r24, Z+6	; 0x06
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	28 2f       	mov	r18, r24
    17fc:	20 68       	ori	r18, 0x80	; 128
    17fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1800:	fc 81       	ldd	r31, Y+4	; 0x04
    1802:	84 81       	ldd	r24, Z+4	; 0x04
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	82 95       	swap	r24
    180a:	92 95       	swap	r25
    180c:	90 7f       	andi	r25, 0xF0	; 240
    180e:	98 27       	eor	r25, r24
    1810:	80 7f       	andi	r24, 0xF0	; 240
    1812:	98 27       	eor	r25, r24
    1814:	28 2b       	or	r18, r24
    1816:	eb 81       	ldd	r30, Y+3	; 0x03
    1818:	fc 81       	ldd	r31, Y+4	; 0x04
    181a:	85 81       	ldd	r24, Z+5	; 0x05
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	82 2b       	or	r24, r18
    182e:	8c 93       	st	X, r24
           | ((Config_Ptr->bit_data) << UCSZ0)
           | ((Config_Ptr->Parity_Configurations) << UPM0)
           | ((Config_Ptr->StopBit_Configurations) << USBS);

    // Calculate and set baud rate
    ubrr_value = (uint16)((F_CPU / (Config_Ptr->baudRate * 8UL)) - 1);
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	a2 81       	ldd	r26, Z+2	; 0x02
    183a:	b3 81       	ldd	r27, Z+3	; 0x03
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	aa 1f       	adc	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	aa 1f       	adc	r26, r26
    184a:	bb 1f       	adc	r27, r27
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	9c 01       	movw	r18, r24
    1856:	ad 01       	movw	r20, r26
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	92 e1       	ldi	r25, 0x12	; 18
    185c:	aa e7       	ldi	r26, 0x7A	; 122
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__udivmodsi4>
    1868:	da 01       	movw	r26, r20
    186a:	c9 01       	movw	r24, r18
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    UBRRH = ubrr_value >> 8;
    1872:	e0 e4       	ldi	r30, 0x40	; 64
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	89 2f       	mov	r24, r25
    187c:	99 27       	eor	r25, r25
    187e:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    1880:	e9 e2       	ldi	r30, 0x29	; 41
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	80 83       	st	Z, r24
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <UART_sendByte>:

// Send one byte via UART
void UART_sendByte(const uint8 data)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
    while (BIT_IS_CLEAR(UCSRA, UDRE)) {}
    18a2:	eb e2       	ldi	r30, 0x2B	; 43
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	80 72       	andi	r24, 0x20	; 32
    18ae:	90 70       	andi	r25, 0x00	; 0
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	b9 f3       	breq	.-18     	; 0x18a2 <UART_sendByte+0xc>
    UDR = data;
    18b4:	ec e2       	ldi	r30, 0x2C	; 44
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	80 83       	st	Z, r24
}
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <UART_receiveByte>:

// Receive one byte via UART
uint8 UART_receiveByte(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    while (BIT_IS_CLEAR(UCSRA, RXC)) {}
    18cc:	eb e2       	ldi	r30, 0x2B	; 43
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 23       	and	r24, r24
    18d4:	dc f7       	brge	.-10     	; 0x18cc <UART_receiveByte+0x8>
    return UDR;
    18d6:	ec e2       	ldi	r30, 0x2C	; 44
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <UART_sendString>:

// Send a null-terminated string via UART
void UART_sendString(const uint8 *Str)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <UART_sendString+0x6>
    18e8:	0f 92       	push	r0
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	9b 83       	std	Y+3, r25	; 0x03
    18f0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <UART_sendString+0x30>
    while (Str[i] != '\0')
    {
        UART_sendByte(Str[i]);
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1900:	fc 01       	movw	r30, r24
    1902:	e2 0f       	add	r30, r18
    1904:	f3 1f       	adc	r31, r19
    1906:	80 81       	ld	r24, Z
    1908:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
        i++;
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	89 83       	std	Y+1, r24	; 0x01

// Send a null-terminated string via UART
void UART_sendString(const uint8 *Str)
{
    uint8 i = 0;
    while (Str[i] != '\0')
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	9b 81       	ldd	r25, Y+3	; 0x03
    191c:	fc 01       	movw	r30, r24
    191e:	e2 0f       	add	r30, r18
    1920:	f3 1f       	adc	r31, r19
    1922:	80 81       	ld	r24, Z
    1924:	88 23       	and	r24, r24
    1926:	39 f7       	brne	.-50     	; 0x18f6 <UART_sendString+0x14>
    {
        UART_sendByte(Str[i]);
        i++;
    }
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <UART_receiveString>:

// Receive a string until '#' is received
void UART_receiveString(uint8 *Str)
{
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <UART_receiveString+0xa>
    193e:	0f 92       	push	r0
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	9b 83       	std	Y+3, r25	; 0x03
    1946:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1948:	19 82       	std	Y+1, r1	; 0x01
    Str[i] = UART_receiveByte();
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	8c 01       	movw	r16, r24
    1956:	02 0f       	add	r16, r18
    1958:	13 1f       	adc	r17, r19
    195a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <UART_receiveString+0x4e>
    while (Str[i] != '#')
    {
        i++;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_receiveByte();
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	8c 01       	movw	r16, r24
    1976:	02 0f       	add	r16, r18
    1978:	13 1f       	adc	r17, r19
    197a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    197e:	f8 01       	movw	r30, r16
    1980:	80 83       	st	Z, r24
// Receive a string until '#' is received
void UART_receiveString(uint8 *Str)
{
    uint8 i = 0;
    Str[i] = UART_receiveByte();
    while (Str[i] != '#')
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	fc 01       	movw	r30, r24
    198e:	e2 0f       	add	r30, r18
    1990:	f3 1f       	adc	r31, r19
    1992:	80 81       	ld	r24, Z
    1994:	83 32       	cpi	r24, 0x23	; 35
    1996:	31 f7       	brne	.-52     	; 0x1964 <UART_receiveString+0x30>
    {
        i++;
        Str[i] = UART_receiveByte();
    }
    Str[i] = '\0';
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	fc 01       	movw	r30, r24
    19a4:	e2 0f       	add	r30, r18
    19a6:	f3 1f       	adc	r31, r19
    19a8:	10 82       	st	Z, r1
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <UART_sendArray>:

// Send an array of known size and terminate with '#'
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <UART_sendArray+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <UART_sendArray+0x8>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6c 83       	std	Y+4, r22	; 0x04
    for (uint8 i = 0; i < size; i++)
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	0e c0       	rjmp	.+28     	; 0x19ec <UART_sendArray+0x32>
    {
        UART_sendByte(a_ptr[i]);
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	fc 01       	movw	r30, r24
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	80 81       	ld	r24, Z
    19e2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
}

// Send an array of known size and terminate with '#'
void UART_sendArray(const uint8 *a_ptr, uint8 size)
{
    for (uint8 i = 0; i < size; i++)
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	99 81       	ldd	r25, Y+1	; 0x01
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	98 17       	cp	r25, r24
    19f2:	70 f3       	brcs	.-36     	; 0x19d0 <UART_sendArray+0x16>
    {
        UART_sendByte(a_ptr[i]);
    }
    UART_sendByte('#');
    19f4:	83 e2       	ldi	r24, 0x23	; 35
    19f6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <UART_receiveArray>:

// Receive an array until '#' is detected
void UART_receiveArray(uint8 *a_ptr)
{
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <UART_receiveArray+0xa>
    1a12:	0f 92       	push	r0
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9b 83       	std	Y+3, r25	; 0x03
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    a_ptr[i] = UART_receiveByte();
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	9b 81       	ldd	r25, Y+3	; 0x03
    1a28:	8c 01       	movw	r16, r24
    1a2a:	02 0f       	add	r16, r18
    1a2c:	13 1f       	adc	r17, r19
    1a2e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    1a32:	f8 01       	movw	r30, r16
    1a34:	80 83       	st	Z, r24
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <UART_receiveArray+0x4e>
    while (a_ptr[i] != '#')
    {
        i++;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	89 83       	std	Y+1, r24	; 0x01
        a_ptr[i] = UART_receiveByte();
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	9b 81       	ldd	r25, Y+3	; 0x03
    1a48:	8c 01       	movw	r16, r24
    1a4a:	02 0f       	add	r16, r18
    1a4c:	13 1f       	adc	r17, r19
    1a4e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
// Receive an array until '#' is detected
void UART_receiveArray(uint8 *a_ptr)
{
    uint8 i = 0;
    a_ptr[i] = UART_receiveByte();
    while (a_ptr[i] != '#')
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a60:	fc 01       	movw	r30, r24
    1a62:	e2 0f       	add	r30, r18
    1a64:	f3 1f       	adc	r31, r19
    1a66:	80 81       	ld	r24, Z
    1a68:	83 32       	cpi	r24, 0x23	; 35
    1a6a:	31 f7       	brne	.-52     	; 0x1a38 <UART_receiveArray+0x30>
    {
        i++;
        a_ptr[i] = UART_receiveByte();
    }
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <KEYPAD_getPressedKey>:
#endif

#endif // !STANDARD_KEYPAD

uint8 KEYPAD_getPressedKey(void)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	60 97       	sbiw	r28, 0x10	; 16
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;

	// Configure all keypad pins as input initially
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1a90:	1f 86       	std	Y+15, r1	; 0x0f
    1a92:	08 c0       	rjmp	.+16     	; 0x1aa4 <KEYPAD_getPressedKey+0x28>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
uint8 KEYPAD_getPressedKey(void)
{
	uint8 col, row;

	// Configure all keypad pins as input initially
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa0:	8f 5f       	subi	r24, 0xFF	; 255
    1aa2:	8f 87       	std	Y+15, r24	; 0x0f
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	a8 f3       	brcs	.-22     	; 0x1a94 <KEYPAD_getPressedKey+0x18>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);

	for (col = 0; col < KEYPAD_NUM_COLS; col++)
    1aaa:	18 8a       	std	Y+16, r1	; 0x10
    1aac:	0b c0       	rjmp	.+22     	; 0x1ac4 <KEYPAD_getPressedKey+0x48>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_INPUT);
    1aae:	88 89       	ldd	r24, Y+16	; 0x10
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	9c 5f       	subi	r25, 0xFC	; 252
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	69 2f       	mov	r22, r25
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	// Configure all keypad pins as input initially
	for (row = 0; row < KEYPAD_NUM_ROWS; row++)
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);

	for (col = 0; col < KEYPAD_NUM_COLS; col++)
    1abe:	88 89       	ldd	r24, Y+16	; 0x10
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	88 8b       	std	Y+16, r24	; 0x10
    1ac4:	88 89       	ldd	r24, Y+16	; 0x10
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	90 f3       	brcs	.-28     	; 0x1aae <KEYPAD_getPressedKey+0x32>
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_INPUT);

	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1aca:	1f 86       	std	Y+15, r1	; 0x0f
    1acc:	ab c0       	rjmp	.+342    	; 0x1c24 <KEYPAD_getPressedKey+0x1a8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ad2:	41 e0       	ldi	r20, 0x01	; 1
    1ad4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	6f 85       	ldd	r22, Y+15	; 0x0f
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>

			for (col = 0; col < KEYPAD_NUM_COLS; col++)
    1ae2:	18 8a       	std	Y+16, r1	; 0x10
    1ae4:	22 c0       	rjmp	.+68     	; 0x1b2a <KEYPAD_getPressedKey+0xae>
			{
				if (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED)
    1ae6:	88 89       	ldd	r24, Y+16	; 0x10
    1ae8:	98 2f       	mov	r25, r24
    1aea:	9c 5f       	subi	r25, 0xFC	; 252
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	69 2f       	mov	r22, r25
    1af0:	0e 94 69 07 	call	0xed2	; 0xed2 <GPIO_readPin>
    1af4:	88 23       	and	r24, r24
    1af6:	b1 f4       	brne	.+44     	; 0x1b24 <KEYPAD_getPressedKey+0xa8>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row * KEYPAD_NUM_COLS) + col + 1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	98 2f       	mov	r25, r24
    1b08:	88 89       	ldd	r24, Y+16	; 0x10
    1b0a:	89 0f       	add	r24, r25
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); // Debounce delay for Proteus simulation
		}
	}
}
    1b12:	60 96       	adiw	r28, 0x10	; 16
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			for (col = 0; col < KEYPAD_NUM_COLS; col++)
    1b24:	88 89       	ldd	r24, Y+16	; 0x10
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	88 8b       	std	Y+16, r24	; 0x10
    1b2a:	88 89       	ldd	r24, Y+16	; 0x10
    1b2c:	84 30       	cpi	r24, 0x04	; 4
    1b2e:	d8 f2       	brcs	.-74     	; 0x1ae6 <KEYPAD_getPressedKey+0x6a>
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b40:	b0 e4       	ldi	r27, 0x40	; 64
    1b42:	8b 87       	std	Y+11, r24	; 0x0b
    1b44:	9c 87       	std	Y+12, r25	; 0x0c
    1b46:	ad 87       	std	Y+13, r26	; 0x0d
    1b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a ef       	ldi	r20, 0xFA	; 250
    1b58:	54 e4       	ldi	r21, 0x44	; 68
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8f 83       	std	Y+7, r24	; 0x07
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	a9 87       	std	Y+9, r26	; 0x09
    1b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <KEYPAD_getPressedKey+0x110>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <KEYPAD_getPressedKey+0x18e>
	else if (__tmp > 65535)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <KEYPAD_getPressedKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <KEYPAD_getPressedKey+0x170>
    1bce:	88 ec       	ldi	r24, 0xC8	; 200
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <KEYPAD_getPressedKey+0x15e>
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <KEYPAD_getPressedKey+0x152>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <KEYPAD_getPressedKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <KEYPAD_getPressedKey+0x19a>
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
	for (col = 0; col < KEYPAD_NUM_COLS; col++)
		GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_INPUT);

	while (1)
	{
		for (row = 0; row < KEYPAD_NUM_ROWS; row++)
    1c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
    1c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <KEYPAD_getPressedKey+0x1b0>
    1c2a:	51 cf       	rjmp	.-350    	; 0x1ace <KEYPAD_getPressedKey+0x52>
    1c2c:	4e cf       	rjmp	.-356    	; 0x1aca <KEYPAD_getPressedKey+0x4e>

00001c2e <KEYPAD_4x4_adjustKeyNumber>:
	default: return button_number;
	}
}
#elif (KEYPAD_NUM_COLS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	3c 83       	std	Y+4, r19	; 0x04
    1c44:	2b 83       	std	Y+3, r18	; 0x03
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <KEYPAD_4x4_adjustKeyNumber+0x24>
    1c50:	70 c0       	rjmp	.+224    	; 0x1d32 <KEYPAD_4x4_adjustKeyNumber+0x104>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	29 30       	cpi	r18, 0x09	; 9
    1c58:	31 05       	cpc	r19, r1
    1c5a:	5c f5       	brge	.+86     	; 0x1cb2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	91 05       	cpc	r25, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <KEYPAD_4x4_adjustKeyNumber+0x3a>
    1c66:	59 c0       	rjmp	.+178    	; 0x1d1a <KEYPAD_4x4_adjustKeyNumber+0xec>
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6c:	25 30       	cpi	r18, 0x05	; 5
    1c6e:	31 05       	cpc	r19, r1
    1c70:	9c f4       	brge	.+38     	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0x50>
    1c7c:	48 c0       	rjmp	.+144    	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0xe0>
    1c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c80:	3c 81       	ldd	r19, Y+4	; 0x04
    1c82:	23 30       	cpi	r18, 0x03	; 3
    1c84:	31 05       	cpc	r19, r1
    1c86:	0c f0       	brlt	.+2      	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0x5c>
    1c88:	45 c0       	rjmp	.+138    	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0xe6>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x68>
    1c94:	39 c0       	rjmp	.+114    	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0xda>
    1c96:	67 c0       	rjmp	.+206    	; 0x1d66 <KEYPAD_4x4_adjustKeyNumber+0x138>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	26 30       	cpi	r18, 0x06	; 6
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x76>
    1ca2:	41 c0       	rjmp	.+130    	; 0x1d26 <KEYPAD_4x4_adjustKeyNumber+0xf8>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	87 30       	cpi	r24, 0x07	; 7
    1caa:	91 05       	cpc	r25, r1
    1cac:	0c f0       	brlt	.+2      	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x82>
    1cae:	3e c0       	rjmp	.+124    	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0xfe>
    1cb0:	37 c0       	rjmp	.+110    	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	2c 30       	cpi	r18, 0x0C	; 12
    1cb8:	31 05       	cpc	r19, r1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <KEYPAD_4x4_adjustKeyNumber+0x90>
    1cbc:	46 c0       	rjmp	.+140    	; 0x1d4a <KEYPAD_4x4_adjustKeyNumber+0x11c>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	8d 30       	cpi	r24, 0x0D	; 13
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	5c f4       	brge	.+22     	; 0x1cde <KEYPAD_4x4_adjustKeyNumber+0xb0>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	2a 30       	cpi	r18, 0x0A	; 10
    1cce:	31 05       	cpc	r19, r1
    1cd0:	b1 f1       	breq	.+108    	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0x110>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	8b 30       	cpi	r24, 0x0B	; 11
    1cd8:	91 05       	cpc	r25, r1
    1cda:	a4 f5       	brge	.+104    	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0x116>
    1cdc:	2d c0       	rjmp	.+90     	; 0x1d38 <KEYPAD_4x4_adjustKeyNumber+0x10a>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	2e 30       	cpi	r18, 0x0E	; 14
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	b9 f1       	breq	.+110    	; 0x1d56 <KEYPAD_4x4_adjustKeyNumber+0x128>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	8e 30       	cpi	r24, 0x0E	; 14
    1cee:	91 05       	cpc	r25, r1
    1cf0:	7c f1       	brlt	.+94     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x122>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	2f 30       	cpi	r18, 0x0F	; 15
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	79 f1       	breq	.+94     	; 0x1d5a <KEYPAD_4x4_adjustKeyNumber+0x12c>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	80 31       	cpi	r24, 0x10	; 16
    1d02:	91 05       	cpc	r25, r1
    1d04:	69 f1       	breq	.+90     	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x132>
    1d06:	2f c0       	rjmp	.+94     	; 0x1d66 <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
	case 1:  return 7;
    1d08:	97 e0       	ldi	r25, 0x07	; 7
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	2e c0       	rjmp	.+92     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 2:  return 8;
    1d0e:	28 e0       	ldi	r18, 0x08	; 8
    1d10:	2a 83       	std	Y+2, r18	; 0x02
    1d12:	2b c0       	rjmp	.+86     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 3:  return 9;
    1d14:	39 e0       	ldi	r19, 0x09	; 9
    1d16:	3a 83       	std	Y+2, r19	; 0x02
    1d18:	28 c0       	rjmp	.+80     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 4:  return '%';
    1d1a:	85 e2       	ldi	r24, 0x25	; 37
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	25 c0       	rjmp	.+74     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 5:  return 4;
    1d20:	94 e0       	ldi	r25, 0x04	; 4
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	22 c0       	rjmp	.+68     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 6:  return 5;
    1d26:	25 e0       	ldi	r18, 0x05	; 5
    1d28:	2a 83       	std	Y+2, r18	; 0x02
    1d2a:	1f c0       	rjmp	.+62     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 7:  return 6;
    1d2c:	36 e0       	ldi	r19, 0x06	; 6
    1d2e:	3a 83       	std	Y+2, r19	; 0x02
    1d30:	1c c0       	rjmp	.+56     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 8:  return '*';
    1d32:	8a e2       	ldi	r24, 0x2A	; 42
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	19 c0       	rjmp	.+50     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 9:  return 1;
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	16 c0       	rjmp	.+44     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 10: return 2;
    1d3e:	22 e0       	ldi	r18, 0x02	; 2
    1d40:	2a 83       	std	Y+2, r18	; 0x02
    1d42:	13 c0       	rjmp	.+38     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 11: return 3;
    1d44:	33 e0       	ldi	r19, 0x03	; 3
    1d46:	3a 83       	std	Y+2, r19	; 0x02
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 12: return '-';
    1d4a:	8d e2       	ldi	r24, 0x2D	; 45
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	0d c0       	rjmp	.+26     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 13: return 13; // Custom use (e.g., Enter)
    1d50:	9d e0       	ldi	r25, 0x0D	; 13
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	0a c0       	rjmp	.+20     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 14: return 0;
    1d56:	1a 82       	std	Y+2, r1	; 0x02
    1d58:	08 c0       	rjmp	.+16     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 15: return '=';
    1d5a:	2d e3       	ldi	r18, 0x3D	; 61
    1d5c:	2a 83       	std	Y+2, r18	; 0x02
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	case 16: return '+';
    1d60:	3b e2       	ldi	r19, 0x2B	; 43
    1d62:	3a 83       	std	Y+2, r19	; 0x02
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	default: return button_number;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <LCD_init>:
#include <util/delay.h>
#include "../Common_Macros/common_macros.h"
#include "../MCAL/gpio.h"

void LCD_init(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	2e 97       	sbiw	r28, 0x0e	; 14
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 ea       	ldi	r26, 0xA0	; 160
    1da8:	b1 e4       	ldi	r27, 0x41	; 65
    1daa:	8b 87       	std	Y+11, r24	; 0x0b
    1dac:	9c 87       	std	Y+12, r25	; 0x0c
    1dae:	ad 87       	std	Y+13, r26	; 0x0d
    1db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8f 83       	std	Y+7, r24	; 0x07
    1dcc:	98 87       	std	Y+8, r25	; 0x08
    1dce:	a9 87       	std	Y+9, r26	; 0x09
    1dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <LCD_init+0x7a>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <LCD_init+0xda>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_init+0xc8>
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9e 83       	std	Y+6, r25	; 0x06
    1e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <LCD_init+0xbc>
    1e5c:	14 c0       	rjmp	.+40     	; 0x1e86 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_init+0x104>
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	6f ef       	ldi	r22, 0xFF	; 255
    1e8a:	0e 94 10 08 	call	0x1020	; 0x1020 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1e8e:	88 e3       	ldi	r24, 0x38	; 56
    1e90:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1e94:	8c e0       	ldi	r24, 0x0C	; 12
    1e96:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_sendCommand>
}
    1ea0:	2e 96       	adiw	r28, 0x0e	; 14
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	e9 97       	sbiw	r28, 0x39	; 57
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	bf e3       	ldi	r27, 0x3F	; 63
    1eda:	8d ab       	std	Y+53, r24	; 0x35
    1edc:	9e ab       	std	Y+54, r25	; 0x36
    1ede:	af ab       	std	Y+55, r26	; 0x37
    1ee0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a ef       	ldi	r20, 0xFA	; 250
    1ef0:	54 e4       	ldi	r21, 0x44	; 68
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	89 ab       	std	Y+49, r24	; 0x31
    1efc:	9a ab       	std	Y+50, r25	; 0x32
    1efe:	ab ab       	std	Y+51, r26	; 0x33
    1f00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f02:	69 a9       	ldd	r22, Y+49	; 0x31
    1f04:	7a a9       	ldd	r23, Y+50	; 0x32
    1f06:	8b a9       	ldd	r24, Y+51	; 0x33
    1f08:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_sendCommand+0x72>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1f24:	69 a9       	ldd	r22, Y+49	; 0x31
    1f26:	7a a9       	ldd	r23, Y+50	; 0x32
    1f28:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f40:	8f a9       	ldd	r24, Y+55	; 0x37
    1f42:	98 ad       	ldd	r25, Y+56	; 0x38
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	98 ab       	std	Y+48, r25	; 0x30
    1f62:	8f a7       	std	Y+47, r24	; 0x2f
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <LCD_sendCommand+0xd2>
    1f66:	88 ec       	ldi	r24, 0xC8	; 200
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9e a7       	std	Y+46, r25	; 0x2e
    1f6c:	8d a7       	std	Y+45, r24	; 0x2d
    1f6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f70:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_sendCommand+0xc0>
    1f76:	9e a7       	std	Y+46, r25	; 0x2e
    1f78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	98 ab       	std	Y+48, r25	; 0x30
    1f82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <LCD_sendCommand+0xb4>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f90:	7a a9       	ldd	r23, Y+50	; 0x32
    1f92:	8b a9       	ldd	r24, Y+51	; 0x33
    1f94:	9c a9       	ldd	r25, Y+52	; 0x34
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	98 ab       	std	Y+48, r25	; 0x30
    1fa0:	8f a7       	std	Y+47, r24	; 0x2f
    1fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa6:	9c a7       	std	Y+44, r25	; 0x2c
    1fa8:	8b a7       	std	Y+43, r24	; 0x2b
    1faa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_sendCommand+0xfc>
    1fb2:	9c a7       	std	Y+44, r25	; 0x2c
    1fb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e8       	ldi	r26, 0x80	; 128
    1fc6:	bf e3       	ldi	r27, 0x3F	; 63
    1fc8:	8f a3       	std	Y+39, r24	; 0x27
    1fca:	98 a7       	std	Y+40, r25	; 0x28
    1fcc:	a9 a7       	std	Y+41, r26	; 0x29
    1fce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8b a3       	std	Y+35, r24	; 0x23
    1fea:	9c a3       	std	Y+36, r25	; 0x24
    1fec:	ad a3       	std	Y+37, r26	; 0x25
    1fee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_sendCommand+0x160>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2012:	6b a1       	ldd	r22, Y+35	; 0x23
    2014:	7c a1       	ldd	r23, Y+36	; 0x24
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6f a1       	ldd	r22, Y+39	; 0x27
    202c:	78 a5       	ldd	r23, Y+40	; 0x28
    202e:	89 a5       	ldd	r24, Y+41	; 0x29
    2030:	9a a5       	ldd	r25, Y+42	; 0x2a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9a a3       	std	Y+34, r25	; 0x22
    2050:	89 a3       	std	Y+33, r24	; 0x21
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_sendCommand+0x1c0>
    2054:	88 ec       	ldi	r24, 0xC8	; 200
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	98 a3       	std	Y+32, r25	; 0x20
    205a:	8f 8f       	std	Y+31, r24	; 0x1f
    205c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    205e:	98 a1       	ldd	r25, Y+32	; 0x20
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_sendCommand+0x1ae>
    2064:	98 a3       	std	Y+32, r25	; 0x20
    2066:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	9a a1       	ldd	r25, Y+34	; 0x22
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9a a3       	std	Y+34, r25	; 0x22
    2070:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	89 a1       	ldd	r24, Y+33	; 0x21
    2074:	9a a1       	ldd	r25, Y+34	; 0x22
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_sendCommand+0x1a2>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6b a1       	ldd	r22, Y+35	; 0x23
    207e:	7c a1       	ldd	r23, Y+36	; 0x24
    2080:	8d a1       	ldd	r24, Y+37	; 0x25
    2082:	9e a1       	ldd	r25, Y+38	; 0x26
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9a a3       	std	Y+34, r25	; 0x22
    208e:	89 a3       	std	Y+33, r24	; 0x21
    2090:	89 a1       	ldd	r24, Y+33	; 0x21
    2092:	9a a1       	ldd	r25, Y+34	; 0x22
    2094:	9e 8f       	std	Y+30, r25	; 0x1e
    2096:	8d 8f       	std	Y+29, r24	; 0x1d
    2098:	8d 8d       	ldd	r24, Y+29	; 0x1d
    209a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_sendCommand+0x1ea>
    20a0:	9e 8f       	std	Y+30, r25	; 0x1e
    20a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	69 ad       	ldd	r22, Y+57	; 0x39
    20a8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <GPIO_writePort>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf e3       	ldi	r27, 0x3F	; 63
    20b4:	89 8f       	std	Y+25, r24	; 0x19
    20b6:	9a 8f       	std	Y+26, r25	; 0x1a
    20b8:	ab 8f       	std	Y+27, r26	; 0x1b
    20ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	69 8d       	ldd	r22, Y+25	; 0x19
    20be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a ef       	ldi	r20, 0xFA	; 250
    20ca:	54 e4       	ldi	r21, 0x44	; 68
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8d 8b       	std	Y+21, r24	; 0x15
    20d6:	9e 8b       	std	Y+22, r25	; 0x16
    20d8:	af 8b       	std	Y+23, r26	; 0x17
    20da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_sendCommand+0x24c>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    20fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2100:	7e 89       	ldd	r23, Y+22	; 0x16
    2102:	8f 89       	ldd	r24, Y+23	; 0x17
    2104:	98 8d       	ldd	r25, Y+24	; 0x18
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	69 8d       	ldd	r22, Y+25	; 0x19
    2118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9c 8b       	std	Y+20, r25	; 0x14
    213c:	8b 8b       	std	Y+19, r24	; 0x13
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_sendCommand+0x2ac>
    2140:	88 ec       	ldi	r24, 0xC8	; 200
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9a 8b       	std	Y+18, r25	; 0x12
    2146:	89 8b       	std	Y+17, r24	; 0x11
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	9a 89       	ldd	r25, Y+18	; 0x12
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_sendCommand+0x29a>
    2150:	9a 8b       	std	Y+18, r25	; 0x12
    2152:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9c 8b       	std	Y+20, r25	; 0x14
    215c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8b 89       	ldd	r24, Y+19	; 0x13
    2160:	9c 89       	ldd	r25, Y+20	; 0x14
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_sendCommand+0x28e>
    2166:	14 c0       	rjmp	.+40     	; 0x2190 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6d 89       	ldd	r22, Y+21	; 0x15
    216a:	7e 89       	ldd	r23, Y+22	; 0x16
    216c:	8f 89       	ldd	r24, Y+23	; 0x17
    216e:	98 8d       	ldd	r25, Y+24	; 0x18
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9c 8b       	std	Y+20, r25	; 0x14
    217a:	8b 8b       	std	Y+19, r24	; 0x13
    217c:	8b 89       	ldd	r24, Y+19	; 0x13
    217e:	9c 89       	ldd	r25, Y+20	; 0x14
    2180:	98 8b       	std	Y+16, r25	; 0x10
    2182:	8f 87       	std	Y+15, r24	; 0x0f
    2184:	8f 85       	ldd	r24, Y+15	; 0x0f
    2186:	98 89       	ldd	r25, Y+16	; 0x10
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_sendCommand+0x2d6>
    218c:	98 8b       	std	Y+16, r25	; 0x10
    218e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	61 e0       	ldi	r22, 0x01	; 1
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e8       	ldi	r26, 0x80	; 128
    21a0:	bf e3       	ldi	r27, 0x3F	; 63
    21a2:	8b 87       	std	Y+11, r24	; 0x0b
    21a4:	9c 87       	std	Y+12, r25	; 0x0c
    21a6:	ad 87       	std	Y+13, r26	; 0x0d
    21a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a ef       	ldi	r20, 0xFA	; 250
    21b8:	54 e4       	ldi	r21, 0x44	; 68
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8f 83       	std	Y+7, r24	; 0x07
    21c4:	98 87       	std	Y+8, r25	; 0x08
    21c6:	a9 87       	std	Y+9, r26	; 0x09
    21c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <LCD_sendCommand+0x33a>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	0f c0       	rjmp	.+30     	; 0x224c <LCD_sendCommand+0x39a>
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_sendCommand+0x388>
    223e:	9c 83       	std	Y+4, r25	; 0x04
    2240:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <LCD_sendCommand+0x37c>
    2254:	14 c0       	rjmp	.+40     	; 0x227e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_sendCommand+0x3c4>
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    227e:	e9 96       	adiw	r28, 0x39	; 57
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	e9 97       	sbiw	r28, 0x39	; 57
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e8       	ldi	r26, 0x80	; 128
    22b6:	bf e3       	ldi	r27, 0x3F	; 63
    22b8:	8d ab       	std	Y+53, r24	; 0x35
    22ba:	9e ab       	std	Y+54, r25	; 0x36
    22bc:	af ab       	std	Y+55, r26	; 0x37
    22be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6d a9       	ldd	r22, Y+53	; 0x35
    22c2:	7e a9       	ldd	r23, Y+54	; 0x36
    22c4:	8f a9       	ldd	r24, Y+55	; 0x37
    22c6:	98 ad       	ldd	r25, Y+56	; 0x38
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	89 ab       	std	Y+49, r24	; 0x31
    22da:	9a ab       	std	Y+50, r25	; 0x32
    22dc:	ab ab       	std	Y+51, r26	; 0x33
    22de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22e0:	69 a9       	ldd	r22, Y+49	; 0x31
    22e2:	7a a9       	ldd	r23, Y+50	; 0x32
    22e4:	8b a9       	ldd	r24, Y+51	; 0x33
    22e6:	9c a9       	ldd	r25, Y+52	; 0x34
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_displayCharacter+0x72>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	98 ab       	std	Y+48, r25	; 0x30
    22fe:	8f a7       	std	Y+47, r24	; 0x2f
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2302:	69 a9       	ldd	r22, Y+49	; 0x31
    2304:	7a a9       	ldd	r23, Y+50	; 0x32
    2306:	8b a9       	ldd	r24, Y+51	; 0x33
    2308:	9c a9       	ldd	r25, Y+52	; 0x34
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6d a9       	ldd	r22, Y+53	; 0x35
    231c:	7e a9       	ldd	r23, Y+54	; 0x36
    231e:	8f a9       	ldd	r24, Y+55	; 0x37
    2320:	98 ad       	ldd	r25, Y+56	; 0x38
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	98 ab       	std	Y+48, r25	; 0x30
    2340:	8f a7       	std	Y+47, r24	; 0x2f
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_displayCharacter+0xd2>
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e a7       	std	Y+46, r25	; 0x2e
    234a:	8d a7       	std	Y+45, r24	; 0x2d
    234c:	8d a5       	ldd	r24, Y+45	; 0x2d
    234e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_displayCharacter+0xc0>
    2354:	9e a7       	std	Y+46, r25	; 0x2e
    2356:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8f a5       	ldd	r24, Y+47	; 0x2f
    235a:	98 a9       	ldd	r25, Y+48	; 0x30
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	98 ab       	std	Y+48, r25	; 0x30
    2360:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8f a5       	ldd	r24, Y+47	; 0x2f
    2364:	98 a9       	ldd	r25, Y+48	; 0x30
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_displayCharacter+0xb4>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	69 a9       	ldd	r22, Y+49	; 0x31
    236e:	7a a9       	ldd	r23, Y+50	; 0x32
    2370:	8b a9       	ldd	r24, Y+51	; 0x33
    2372:	9c a9       	ldd	r25, Y+52	; 0x34
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	98 ab       	std	Y+48, r25	; 0x30
    237e:	8f a7       	std	Y+47, r24	; 0x2f
    2380:	8f a5       	ldd	r24, Y+47	; 0x2f
    2382:	98 a9       	ldd	r25, Y+48	; 0x30
    2384:	9c a7       	std	Y+44, r25	; 0x2c
    2386:	8b a7       	std	Y+43, r24	; 0x2b
    2388:	8b a5       	ldd	r24, Y+43	; 0x2b
    238a:	9c a5       	ldd	r25, Y+44	; 0x2c
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_displayCharacter+0xfc>
    2390:	9c a7       	std	Y+44, r25	; 0x2c
    2392:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a0 e8       	ldi	r26, 0x80	; 128
    23a4:	bf e3       	ldi	r27, 0x3F	; 63
    23a6:	8f a3       	std	Y+39, r24	; 0x27
    23a8:	98 a7       	std	Y+40, r25	; 0x28
    23aa:	a9 a7       	std	Y+41, r26	; 0x29
    23ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ae:	6f a1       	ldd	r22, Y+39	; 0x27
    23b0:	78 a5       	ldd	r23, Y+40	; 0x28
    23b2:	89 a5       	ldd	r24, Y+41	; 0x29
    23b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	4a ef       	ldi	r20, 0xFA	; 250
    23bc:	54 e4       	ldi	r21, 0x44	; 68
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8b a3       	std	Y+35, r24	; 0x23
    23c8:	9c a3       	std	Y+36, r25	; 0x24
    23ca:	ad a3       	std	Y+37, r26	; 0x25
    23cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23ce:	6b a1       	ldd	r22, Y+35	; 0x23
    23d0:	7c a1       	ldd	r23, Y+36	; 0x24
    23d2:	8d a1       	ldd	r24, Y+37	; 0x25
    23d4:	9e a1       	ldd	r25, Y+38	; 0x26
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <LCD_displayCharacter+0x160>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9a a3       	std	Y+34, r25	; 0x22
    23ec:	89 a3       	std	Y+33, r24	; 0x21
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    23f0:	6b a1       	ldd	r22, Y+35	; 0x23
    23f2:	7c a1       	ldd	r23, Y+36	; 0x24
    23f4:	8d a1       	ldd	r24, Y+37	; 0x25
    23f6:	9e a1       	ldd	r25, Y+38	; 0x26
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	3f ef       	ldi	r19, 0xFF	; 255
    23fc:	4f e7       	ldi	r20, 0x7F	; 127
    23fe:	57 e4       	ldi	r21, 0x47	; 71
    2400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2404:	18 16       	cp	r1, r24
    2406:	4c f5       	brge	.+82     	; 0x245a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2408:	6f a1       	ldd	r22, Y+39	; 0x27
    240a:	78 a5       	ldd	r23, Y+40	; 0x28
    240c:	89 a5       	ldd	r24, Y+41	; 0x29
    240e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9a a3       	std	Y+34, r25	; 0x22
    242e:	89 a3       	std	Y+33, r24	; 0x21
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <LCD_displayCharacter+0x1c0>
    2432:	88 ec       	ldi	r24, 0xC8	; 200
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	98 a3       	std	Y+32, r25	; 0x20
    2438:	8f 8f       	std	Y+31, r24	; 0x1f
    243a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    243c:	98 a1       	ldd	r25, Y+32	; 0x20
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_displayCharacter+0x1ae>
    2442:	98 a3       	std	Y+32, r25	; 0x20
    2444:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	89 a1       	ldd	r24, Y+33	; 0x21
    2448:	9a a1       	ldd	r25, Y+34	; 0x22
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	9a a3       	std	Y+34, r25	; 0x22
    244e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	9a a1       	ldd	r25, Y+34	; 0x22
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	69 f7       	brne	.-38     	; 0x2432 <LCD_displayCharacter+0x1a2>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	6b a1       	ldd	r22, Y+35	; 0x23
    245c:	7c a1       	ldd	r23, Y+36	; 0x24
    245e:	8d a1       	ldd	r24, Y+37	; 0x25
    2460:	9e a1       	ldd	r25, Y+38	; 0x26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9a a3       	std	Y+34, r25	; 0x22
    246c:	89 a3       	std	Y+33, r24	; 0x21
    246e:	89 a1       	ldd	r24, Y+33	; 0x21
    2470:	9a a1       	ldd	r25, Y+34	; 0x22
    2472:	9e 8f       	std	Y+30, r25	; 0x1e
    2474:	8d 8f       	std	Y+29, r24	; 0x1d
    2476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2478:	9e 8d       	ldd	r25, Y+30	; 0x1e
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <LCD_displayCharacter+0x1ea>
    247e:	9e 8f       	std	Y+30, r25	; 0x1e
    2480:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	69 ad       	ldd	r22, Y+57	; 0x39
    2486:	0e 94 54 08 	call	0x10a8	; 0x10a8 <GPIO_writePort>
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a0 e8       	ldi	r26, 0x80	; 128
    2490:	bf e3       	ldi	r27, 0x3F	; 63
    2492:	89 8f       	std	Y+25, r24	; 0x19
    2494:	9a 8f       	std	Y+26, r25	; 0x1a
    2496:	ab 8f       	std	Y+27, r26	; 0x1b
    2498:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249a:	69 8d       	ldd	r22, Y+25	; 0x19
    249c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4a ef       	ldi	r20, 0xFA	; 250
    24a8:	54 e4       	ldi	r21, 0x44	; 68
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	8d 8b       	std	Y+21, r24	; 0x15
    24b4:	9e 8b       	std	Y+22, r25	; 0x16
    24b6:	af 8b       	std	Y+23, r26	; 0x17
    24b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e8       	ldi	r20, 0x80	; 128
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ce:	88 23       	and	r24, r24
    24d0:	2c f4       	brge	.+10     	; 0x24dc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 8b       	std	Y+20, r25	; 0x14
    24d8:	8b 8b       	std	Y+19, r24	; 0x13
    24da:	3f c0       	rjmp	.+126    	; 0x255a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    24dc:	6d 89       	ldd	r22, Y+21	; 0x15
    24de:	7e 89       	ldd	r23, Y+22	; 0x16
    24e0:	8f 89       	ldd	r24, Y+23	; 0x17
    24e2:	98 8d       	ldd	r25, Y+24	; 0x18
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	3f ef       	ldi	r19, 0xFF	; 255
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	57 e4       	ldi	r21, 0x47	; 71
    24ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f0:	18 16       	cp	r1, r24
    24f2:	4c f5       	brge	.+82     	; 0x2546 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f4:	69 8d       	ldd	r22, Y+25	; 0x19
    24f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9c 8b       	std	Y+20, r25	; 0x14
    251a:	8b 8b       	std	Y+19, r24	; 0x13
    251c:	0f c0       	rjmp	.+30     	; 0x253c <LCD_displayCharacter+0x2ac>
    251e:	88 ec       	ldi	r24, 0xC8	; 200
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9a 8b       	std	Y+18, r25	; 0x12
    2524:	89 8b       	std	Y+17, r24	; 0x11
    2526:	89 89       	ldd	r24, Y+17	; 0x11
    2528:	9a 89       	ldd	r25, Y+18	; 0x12
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_displayCharacter+0x29a>
    252e:	9a 8b       	std	Y+18, r25	; 0x12
    2530:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2532:	8b 89       	ldd	r24, Y+19	; 0x13
    2534:	9c 89       	ldd	r25, Y+20	; 0x14
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	69 f7       	brne	.-38     	; 0x251e <LCD_displayCharacter+0x28e>
    2544:	14 c0       	rjmp	.+40     	; 0x256e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2546:	6d 89       	ldd	r22, Y+21	; 0x15
    2548:	7e 89       	ldd	r23, Y+22	; 0x16
    254a:	8f 89       	ldd	r24, Y+23	; 0x17
    254c:	98 8d       	ldd	r25, Y+24	; 0x18
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
    255a:	8b 89       	ldd	r24, Y+19	; 0x13
    255c:	9c 89       	ldd	r25, Y+20	; 0x14
    255e:	98 8b       	std	Y+16, r25	; 0x10
    2560:	8f 87       	std	Y+15, r24	; 0x0f
    2562:	8f 85       	ldd	r24, Y+15	; 0x0f
    2564:	98 89       	ldd	r25, Y+16	; 0x10
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_displayCharacter+0x2d6>
    256a:	98 8b       	std	Y+16, r25	; 0x10
    256c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	61 e0       	ldi	r22, 0x01	; 1
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a0 e8       	ldi	r26, 0x80	; 128
    257e:	bf e3       	ldi	r27, 0x3F	; 63
    2580:	8b 87       	std	Y+11, r24	; 0x0b
    2582:	9c 87       	std	Y+12, r25	; 0x0c
    2584:	ad 87       	std	Y+13, r26	; 0x0d
    2586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a ef       	ldi	r20, 0xFA	; 250
    2596:	54 e4       	ldi	r21, 0x44	; 68
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8f 83       	std	Y+7, r24	; 0x07
    25a2:	98 87       	std	Y+8, r25	; 0x08
    25a4:	a9 87       	std	Y+9, r26	; 0x09
    25a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <LCD_displayCharacter+0x33a>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	0f c0       	rjmp	.+30     	; 0x262a <LCD_displayCharacter+0x39a>
    260c:	88 ec       	ldi	r24, 0xC8	; 200
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_displayCharacter+0x388>
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <LCD_displayCharacter+0x37c>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_displayCharacter+0x3c4>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    265c:	e9 96       	adiw	r28, 0x39	; 57
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <LCD_displayString+0x6>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	0b c0       	rjmp	.+22     	; 0x2694 <LCD_displayString+0x26>
	while (*Str != '\0')
	{
		LCD_displayCharacter(*Str++);
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	20 81       	ld	r18, Z
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	9a 83       	std	Y+2, r25	; 0x02
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	82 2f       	mov	r24, r18
    2690:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_displayCharacter>
#endif
}

void LCD_displayString(const char *Str)
{
	while (*Str != '\0')
    2694:	e9 81       	ldd	r30, Y+1	; 0x01
    2696:	fa 81       	ldd	r31, Y+2	; 0x02
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	81 f7       	brne	.-32     	; 0x267e <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str++);
	}
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <LCD_moveCursor+0x6>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <LCD_moveCursor+0x8>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row)
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	3d 83       	std	Y+5, r19	; 0x05
    26c2:	2c 83       	std	Y+4, r18	; 0x04
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	91 05       	cpc	r25, r1
    26cc:	c1 f0       	breq	.+48     	; 0x26fe <LCD_moveCursor+0x56>
    26ce:	2c 81       	ldd	r18, Y+4	; 0x04
    26d0:	3d 81       	ldd	r19, Y+5	; 0x05
    26d2:	22 30       	cpi	r18, 0x02	; 2
    26d4:	31 05       	cpc	r19, r1
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <LCD_moveCursor+0x3a>
    26d8:	8c 81       	ldd	r24, Y+4	; 0x04
    26da:	9d 81       	ldd	r25, Y+5	; 0x05
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	61 f0       	breq	.+24     	; 0x26f8 <LCD_moveCursor+0x50>
    26e0:	1a c0       	rjmp	.+52     	; 0x2716 <LCD_moveCursor+0x6e>
    26e2:	2c 81       	ldd	r18, Y+4	; 0x04
    26e4:	3d 81       	ldd	r19, Y+5	; 0x05
    26e6:	22 30       	cpi	r18, 0x02	; 2
    26e8:	31 05       	cpc	r19, r1
    26ea:	69 f0       	breq	.+26     	; 0x2706 <LCD_moveCursor+0x5e>
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	9d 81       	ldd	r25, Y+5	; 0x05
    26f0:	83 30       	cpi	r24, 0x03	; 3
    26f2:	91 05       	cpc	r25, r1
    26f4:	61 f0       	breq	.+24     	; 0x270e <LCD_moveCursor+0x66>
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <LCD_moveCursor+0x6e>
	{
	case 0: address = col; break;
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	0d c0       	rjmp	.+26     	; 0x2718 <LCD_moveCursor+0x70>
	case 1: address = col + 0x40; break;
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	80 5c       	subi	r24, 0xC0	; 192
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	09 c0       	rjmp	.+18     	; 0x2718 <LCD_moveCursor+0x70>
	case 2: address = col + 0x10; break;
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	80 5f       	subi	r24, 0xF0	; 240
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <LCD_moveCursor+0x70>
	case 3: address = col + 0x50; break;
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	80 5b       	subi	r24, 0xB0	; 176
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <LCD_moveCursor+0x70>
	default: address = 0; break;
    2716:	19 82       	std	Y+1, r1	; 0x01
	}
	LCD_sendCommand(address | LCD_SET_CURSOR_LOCATION);
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	80 68       	ori	r24, 0x80	; 128
    271c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_sendCommand>
}
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <LCD_displayStringRowColumn+0x6>
    2736:	00 d0       	rcall	.+0      	; 0x2738 <LCD_displayStringRowColumn+0x8>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	6a 83       	std	Y+2, r22	; 0x02
    2740:	5c 83       	std	Y+4, r21	; 0x04
    2742:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	6a 81       	ldd	r22, Y+2	; 0x02
    2748:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LCD_moveCursor>
	LCD_displayString(Str);
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayString>
}
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	62 97       	sbiw	r28, 0x12	; 18
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data, buffer, 10);
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	9e 01       	movw	r18, r28
    2780:	2f 5f       	subi	r18, 0xFF	; 255
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	b9 01       	movw	r22, r18
    2786:	4a e0       	ldi	r20, 0x0A	; 10
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <itoa>
	LCD_displayString(buffer);
    278e:	ce 01       	movw	r24, r28
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	0e 94 37 13 	call	0x266e	; 0x266e <LCD_displayString>
}
    2796:	62 96       	adiw	r28, 0x12	; 18
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_sendCommand>
}
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <takePassFromUser>:
uint8 g_key[PASSWORD_SIZE], g_key_confirm[PASSWORD_SIZE];
uint8 g_key_again[PASSWORD_SIZE];
uint8 g_incorrectPass1 = 1;

void takePassFromUser(uint8 * a_ptr)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	62 97       	sbiw	r28, 0x12	; 18
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	9a 8b       	std	Y+18, r25	; 0x12
    27d2:	89 8b       	std	Y+17, r24	; 0x11
	uint8 counter = 0;
    27d4:	18 8a       	std	Y+16, r1	; 0x10
    27d6:	8e c0       	rjmp	.+284    	; 0x28f4 <takePassFromUser+0x138>
	while(counter < PASSWORD_SIZE)
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	aa e7       	ldi	r26, 0x7A	; 122
    27de:	b3 e4       	ldi	r27, 0x43	; 67
    27e0:	8b 87       	std	Y+11, r24	; 0x0b
    27e2:	9c 87       	std	Y+12, r25	; 0x0c
    27e4:	ad 87       	std	Y+13, r26	; 0x0d
    27e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	8f 83       	std	Y+7, r24	; 0x07
    2802:	98 87       	std	Y+8, r25	; 0x08
    2804:	a9 87       	std	Y+9, r26	; 0x09
    2806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <takePassFromUser+0x6e>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <takePassFromUser+0xec>
	else if (__tmp > 65535)
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <takePassFromUser+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	0f c0       	rjmp	.+30     	; 0x288a <takePassFromUser+0xce>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9c 83       	std	Y+4, r25	; 0x04
    2872:	8b 83       	std	Y+3, r24	; 0x03
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <takePassFromUser+0xbc>
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <takePassFromUser+0xb0>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <takePassFromUser+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	6f 81       	ldd	r22, Y+7	; 0x07
    2896:	78 85       	ldd	r23, Y+8	; 0x08
    2898:	89 85       	ldd	r24, Y+9	; 0x09
    289a:	9a 85       	ldd	r25, Y+10	; 0x0a
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <takePassFromUser+0xf8>
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(KEYPAD_DELAY);
		uint8 key = KEYPAD_getPressedKey();
    28bc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <KEYPAD_getPressedKey>
    28c0:	8f 87       	std	Y+15, r24	; 0x0f
		if(key != '=' && key != '-' && key != '+')
    28c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c4:	8d 33       	cpi	r24, 0x3D	; 61
    28c6:	b1 f0       	breq	.+44     	; 0x28f4 <takePassFromUser+0x138>
    28c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ca:	8d 32       	cpi	r24, 0x2D	; 45
    28cc:	99 f0       	breq	.+38     	; 0x28f4 <takePassFromUser+0x138>
    28ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d0:	8b 32       	cpi	r24, 0x2B	; 43
    28d2:	81 f0       	breq	.+32     	; 0x28f4 <takePassFromUser+0x138>
		{
			a_ptr[counter] = key;
    28d4:	88 89       	ldd	r24, Y+16	; 0x10
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	89 89       	ldd	r24, Y+17	; 0x11
    28dc:	9a 89       	ldd	r25, Y+18	; 0x12
    28de:	fc 01       	movw	r30, r24
    28e0:	e2 0f       	add	r30, r18
    28e2:	f3 1f       	adc	r31, r19
    28e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e6:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    28e8:	8a e2       	ldi	r24, 0x2A	; 42
    28ea:	0e 94 48 11 	call	0x2290	; 0x2290 <LCD_displayCharacter>
			counter++;
    28ee:	88 89       	ldd	r24, Y+16	; 0x10
    28f0:	8f 5f       	subi	r24, 0xFF	; 255
    28f2:	88 8b       	std	Y+16, r24	; 0x10
uint8 g_incorrectPass1 = 1;

void takePassFromUser(uint8 * a_ptr)
{
	uint8 counter = 0;
	while(counter < PASSWORD_SIZE)
    28f4:	88 89       	ldd	r24, Y+16	; 0x10
    28f6:	85 30       	cpi	r24, 0x05	; 5
    28f8:	08 f4       	brcc	.+2      	; 0x28fc <takePassFromUser+0x140>
    28fa:	6e cf       	rjmp	.-292    	; 0x27d8 <takePassFromUser+0x1c>
			a_ptr[counter] = key;
			LCD_displayCharacter('*');
			counter++;
		}
	}
	while('=' != KEYPAD_getPressedKey());
    28fc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <KEYPAD_getPressedKey>
    2900:	8d 33       	cpi	r24, 0x3D	; 61
    2902:	e1 f7       	brne	.-8      	; 0x28fc <takePassFromUser+0x140>
}
    2904:	62 96       	adiw	r28, 0x12	; 18
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <creatingPassword>:

void creatingPassword(void)
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	2f 97       	sbiw	r28, 0x0f	; 15
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
	uint8 wrongPass_flag;
	do{
		LCD_clearScreen();
    292a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Pass:");
    292e:	20 e6       	ldi	r18, 0x60	; 96
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	a9 01       	movw	r20, r18
    2938:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LCD_moveCursor>
		takePassFromUser(g_key);
    2944:	8e e9       	ldi	r24, 0x9E	; 158
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	0e 94 de 13 	call	0x27bc	; 0x27bc <takePassFromUser>

		LCD_clearScreen();
    294c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PLZ Re-Enter The");
    2950:	20 e7       	ldi	r18, 0x70	; 112
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	a9 01       	movw	r20, r18
    295a:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Same Pass:");
    295e:	21 e8       	ldi	r18, 0x81	; 129
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	a9 01       	movw	r20, r18
    2968:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
		takePassFromUser(g_key_confirm);
    296c:	84 e9       	ldi	r24, 0x94	; 148
    296e:	91 e0       	ldi	r25, 0x01	; 1
    2970:	0e 94 de 13 	call	0x27bc	; 0x27bc <takePassFromUser>

		UART_sendByte(I_AM_READY);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
		while(I_AM_READY != UART_receiveByte());
    297a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    297e:	81 30       	cpi	r24, 0x01	; 1
    2980:	e1 f7       	brne	.-8      	; 0x297a <creatingPassword+0x64>
		UART_sendArray(g_key, PASSWORD_SIZE);
    2982:	8e e9       	ldi	r24, 0x9E	; 158
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	65 e0       	ldi	r22, 0x05	; 5
    2988:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <UART_sendArray>
		UART_sendArray(g_key_confirm, PASSWORD_SIZE);
    298c:	84 e9       	ldi	r24, 0x94	; 148
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	65 e0       	ldi	r22, 0x05	; 5
    2992:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <UART_sendArray>

		while(I_AM_READY != UART_receiveByte());
    2996:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    299a:	81 30       	cpi	r24, 0x01	; 1
    299c:	e1 f7       	brne	.-8      	; 0x2996 <creatingPassword+0x80>
		UART_sendByte(I_AM_READY);
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
		wrongPass_flag = UART_receiveByte();
    29a4:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    29a8:	8f 87       	std	Y+15, r24	; 0x0f

		if(wrongPass_flag)
    29aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ac:	88 23       	and	r24, r24
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <creatingPassword+0x9c>
    29b0:	7b c0       	rjmp	.+246    	; 0x2aa8 <creatingPassword+0x192>
		{
			LCD_clearScreen();
    29b2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Try Again.");
    29b6:	2c e8       	ldi	r18, 0x8C	; 140
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	63 e0       	ldi	r22, 0x03	; 3
    29be:	a9 01       	movw	r20, r18
    29c0:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e8       	ldi	r25, 0x80	; 128
    29c8:	ab e3       	ldi	r26, 0x3B	; 59
    29ca:	b4 e4       	ldi	r27, 0x44	; 68
    29cc:	8b 87       	std	Y+11, r24	; 0x0b
    29ce:	9c 87       	std	Y+12, r25	; 0x0c
    29d0:	ad 87       	std	Y+13, r26	; 0x0d
    29d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29da:	9e 85       	ldd	r25, Y+14	; 0x0e
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	4a ef       	ldi	r20, 0xFA	; 250
    29e2:	54 e4       	ldi	r21, 0x44	; 68
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	8f 83       	std	Y+7, r24	; 0x07
    29ee:	98 87       	std	Y+8, r25	; 0x08
    29f0:	a9 87       	std	Y+9, r26	; 0x09
    29f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e8       	ldi	r20, 0x80	; 128
    2a02:	5f e3       	ldi	r21, 0x3F	; 63
    2a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a08:	88 23       	and	r24, r24
    2a0a:	2c f4       	brge	.+10     	; 0x2a16 <creatingPassword+0x100>
		__ticks = 1;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	3f c0       	rjmp	.+126    	; 0x2a94 <creatingPassword+0x17e>
	else if (__tmp > 65535)
    2a16:	6f 81       	ldd	r22, Y+7	; 0x07
    2a18:	78 85       	ldd	r23, Y+8	; 0x08
    2a1a:	89 85       	ldd	r24, Y+9	; 0x09
    2a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	3f ef       	ldi	r19, 0xFF	; 255
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	57 e4       	ldi	r21, 0x47	; 71
    2a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	4c f5       	brge	.+82     	; 0x2a80 <creatingPassword+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	51 e4       	ldi	r21, 0x41	; 65
    2a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	bc 01       	movw	r22, r24
    2a48:	cd 01       	movw	r24, r26
    2a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	0f c0       	rjmp	.+30     	; 0x2a76 <creatingPassword+0x160>
    2a58:	88 ec       	ldi	r24, 0xC8	; 200
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <creatingPassword+0x14e>
    2a68:	9c 83       	std	Y+4, r25	; 0x04
    2a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	69 f7       	brne	.-38     	; 0x2a58 <creatingPassword+0x142>
    2a7e:	14 c0       	rjmp	.+40     	; 0x2aa8 <creatingPassword+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a80:	6f 81       	ldd	r22, Y+7	; 0x07
    2a82:	78 85       	ldd	r23, Y+8	; 0x08
    2a84:	89 85       	ldd	r24, Y+9	; 0x09
    2a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	9e 83       	std	Y+6, r25	; 0x06
    2a92:	8d 83       	std	Y+5, r24	; 0x05
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <creatingPassword+0x18a>
    2aa4:	9a 83       	std	Y+2, r25	; 0x02
    2aa6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(MESSAGE_DELAY);
		}
	}while(wrongPass_flag);
    2aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aaa:	88 23       	and	r24, r24
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <creatingPassword+0x19a>
    2aae:	3d cf       	rjmp	.-390    	; 0x292a <creatingPassword+0x14>
}
    2ab0:	2f 96       	adiw	r28, 0x0f	; 15
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <checkPassAndAlarm>:

void checkPassAndAlarm(void)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	6f 97       	sbiw	r28, 0x1f	; 31
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
	uint8 wrongPass_flag;
	do{
		LCD_clearScreen();
    2ad6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Old");
    2ada:	27 e9       	ldi	r18, 0x97	; 151
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	a9 01       	movw	r20, r18
    2ae4:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Pass:");
    2ae8:	25 ea       	ldi	r18, 0xA5	; 165
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	a9 01       	movw	r20, r18
    2af2:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
		takePassFromUser(g_key_again);
    2af6:	89 e9       	ldi	r24, 0x99	; 153
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 de 13 	call	0x27bc	; 0x27bc <takePassFromUser>

		UART_sendByte(I_AM_READY);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
		while(I_AM_READY != UART_receiveByte());
    2b04:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <checkPassAndAlarm+0x42>
		UART_sendArray(g_key_again, PASSWORD_SIZE);
    2b0c:	89 e9       	ldi	r24, 0x99	; 153
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	65 e0       	ldi	r22, 0x05	; 5
    2b12:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <UART_sendArray>

		while(I_AM_READY != UART_receiveByte());
    2b16:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    2b1a:	81 30       	cpi	r24, 0x01	; 1
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <checkPassAndAlarm+0x54>
		UART_sendByte(I_AM_READY);
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
		wrongPass_flag = UART_receiveByte();
    2b24:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    2b28:	8f 8f       	std	Y+31, r24	; 0x1f

		if(wrongPass_flag)
    2b2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <checkPassAndAlarm+0x70>
    2b30:	16 c1       	rjmp	.+556    	; 0x2d5e <checkPassAndAlarm+0x29c>
		{
			if(3 == g_incorrectPass1)
    2b32:	80 91 77 01 	lds	r24, 0x0177
    2b36:	83 30       	cpi	r24, 0x03	; 3
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <checkPassAndAlarm+0x7a>
    2b3a:	91 c0       	rjmp	.+290    	; 0x2c5e <checkPassAndAlarm+0x19c>
			{
				LCD_clearScreen();
    2b3c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 2, "System Locked");
    2b40:	2b ea       	ldi	r18, 0xAB	; 171
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	62 e0       	ldi	r22, 0x02	; 2
    2b48:	a9 01       	movw	r20, r18
    2b4a:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 1, "Wait For 1 Min");
    2b4e:	29 eb       	ldi	r18, 0xB9	; 185
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	a9 01       	movw	r20, r18
    2b58:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
				for (int i = 0; i < 59; i++) {
    2b5c:	1e 8e       	std	Y+30, r1	; 0x1e
    2b5e:	1d 8e       	std	Y+29, r1	; 0x1d
    2b60:	77 c0       	rjmp	.+238    	; 0x2c50 <checkPassAndAlarm+0x18e>
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	aa e7       	ldi	r26, 0x7A	; 122
    2b68:	b4 e4       	ldi	r27, 0x44	; 68
    2b6a:	89 8f       	std	Y+25, r24	; 0x19
    2b6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b72:	69 8d       	ldd	r22, Y+25	; 0x19
    2b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	4a ef       	ldi	r20, 0xFA	; 250
    2b80:	54 e4       	ldi	r21, 0x44	; 68
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	8d 8b       	std	Y+21, r24	; 0x15
    2b8c:	9e 8b       	std	Y+22, r25	; 0x16
    2b8e:	af 8b       	std	Y+23, r26	; 0x17
    2b90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b92:	6d 89       	ldd	r22, Y+21	; 0x15
    2b94:	7e 89       	ldd	r23, Y+22	; 0x16
    2b96:	8f 89       	ldd	r24, Y+23	; 0x17
    2b98:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba6:	88 23       	and	r24, r24
    2ba8:	2c f4       	brge	.+10     	; 0x2bb4 <checkPassAndAlarm+0xf2>
		__ticks = 1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	9c 8b       	std	Y+20, r25	; 0x14
    2bb0:	8b 8b       	std	Y+19, r24	; 0x13
    2bb2:	3f c0       	rjmp	.+126    	; 0x2c32 <checkPassAndAlarm+0x170>
	else if (__tmp > 65535)
    2bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bba:	98 8d       	ldd	r25, Y+24	; 0x18
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	3f ef       	ldi	r19, 0xFF	; 255
    2bc0:	4f e7       	ldi	r20, 0x7F	; 127
    2bc2:	57 e4       	ldi	r21, 0x47	; 71
    2bc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc8:	18 16       	cp	r1, r24
    2bca:	4c f5       	brge	.+82     	; 0x2c1e <checkPassAndAlarm+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	40 e2       	ldi	r20, 0x20	; 32
    2bda:	51 e4       	ldi	r21, 0x41	; 65
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9c 8b       	std	Y+20, r25	; 0x14
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
    2bf4:	0f c0       	rjmp	.+30     	; 0x2c14 <checkPassAndAlarm+0x152>
    2bf6:	88 ec       	ldi	r24, 0xC8	; 200
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9a 8b       	std	Y+18, r25	; 0x12
    2bfc:	89 8b       	std	Y+17, r24	; 0x11
    2bfe:	89 89       	ldd	r24, Y+17	; 0x11
    2c00:	9a 89       	ldd	r25, Y+18	; 0x12
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <checkPassAndAlarm+0x140>
    2c06:	9a 8b       	std	Y+18, r25	; 0x12
    2c08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c14:	8b 89       	ldd	r24, Y+19	; 0x13
    2c16:	9c 89       	ldd	r25, Y+20	; 0x14
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	69 f7       	brne	.-38     	; 0x2bf6 <checkPassAndAlarm+0x134>
    2c1c:	14 c0       	rjmp	.+40     	; 0x2c46 <checkPassAndAlarm+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c20:	7e 89       	ldd	r23, Y+22	; 0x16
    2c22:	8f 89       	ldd	r24, Y+23	; 0x17
    2c24:	98 8d       	ldd	r25, Y+24	; 0x18
    2c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9c 8b       	std	Y+20, r25	; 0x14
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	98 8b       	std	Y+16, r25	; 0x10
    2c38:	8f 87       	std	Y+15, r24	; 0x0f
    2c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c3c:	98 89       	ldd	r25, Y+16	; 0x10
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <checkPassAndAlarm+0x17c>
    2c42:	98 8b       	std	Y+16, r25	; 0x10
    2c44:	8f 87       	std	Y+15, r24	; 0x0f
    2c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c54:	8b 33       	cpi	r24, 0x3B	; 59
    2c56:	91 05       	cpc	r25, r1
    2c58:	0c f4       	brge	.+2      	; 0x2c5c <checkPassAndAlarm+0x19a>
    2c5a:	83 cf       	rjmp	.-250    	; 0x2b62 <checkPassAndAlarm+0xa0>
    2c5c:	87 c0       	rjmp	.+270    	; 0x2d6c <checkPassAndAlarm+0x2aa>
				}
				return;
			}
			else
			{
				g_incorrectPass1++;
    2c5e:	80 91 77 01 	lds	r24, 0x0177
    2c62:	8f 5f       	subi	r24, 0xFF	; 255
    2c64:	80 93 77 01 	sts	0x0177, r24
				LCD_clearScreen();
    2c68:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 3, "Try Again.");
    2c6c:	2c e8       	ldi	r18, 0x8C	; 140
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	63 e0       	ldi	r22, 0x03	; 3
    2c74:	a9 01       	movw	r20, r18
    2c76:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e8       	ldi	r25, 0x80	; 128
    2c7e:	ab e3       	ldi	r26, 0x3B	; 59
    2c80:	b4 e4       	ldi	r27, 0x44	; 68
    2c82:	8b 87       	std	Y+11, r24	; 0x0b
    2c84:	9c 87       	std	Y+12, r25	; 0x0c
    2c86:	ad 87       	std	Y+13, r26	; 0x0d
    2c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4a ef       	ldi	r20, 0xFA	; 250
    2c98:	54 e4       	ldi	r21, 0x44	; 68
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	8f 83       	std	Y+7, r24	; 0x07
    2ca4:	98 87       	std	Y+8, r25	; 0x08
    2ca6:	a9 87       	std	Y+9, r26	; 0x09
    2ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2caa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cac:	78 85       	ldd	r23, Y+8	; 0x08
    2cae:	89 85       	ldd	r24, Y+9	; 0x09
    2cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e8       	ldi	r20, 0x80	; 128
    2cb8:	5f e3       	ldi	r21, 0x3F	; 63
    2cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbe:	88 23       	and	r24, r24
    2cc0:	2c f4       	brge	.+10     	; 0x2ccc <checkPassAndAlarm+0x20a>
		__ticks = 1;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
    2cca:	3f c0       	rjmp	.+126    	; 0x2d4a <checkPassAndAlarm+0x288>
	else if (__tmp > 65535)
    2ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cce:	78 85       	ldd	r23, Y+8	; 0x08
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	3f ef       	ldi	r19, 0xFF	; 255
    2cd8:	4f e7       	ldi	r20, 0x7F	; 127
    2cda:	57 e4       	ldi	r21, 0x47	; 71
    2cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce0:	18 16       	cp	r1, r24
    2ce2:	4c f5       	brge	.+82     	; 0x2d36 <checkPassAndAlarm+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e2       	ldi	r20, 0x20	; 32
    2cf2:	51 e4       	ldi	r21, 0x41	; 65
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	bc 01       	movw	r22, r24
    2cfe:	cd 01       	movw	r24, r26
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9e 83       	std	Y+6, r25	; 0x06
    2d0a:	8d 83       	std	Y+5, r24	; 0x05
    2d0c:	0f c0       	rjmp	.+30     	; 0x2d2c <checkPassAndAlarm+0x26a>
    2d0e:	88 ec       	ldi	r24, 0xC8	; 200
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9c 83       	std	Y+4, r25	; 0x04
    2d14:	8b 83       	std	Y+3, r24	; 0x03
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <checkPassAndAlarm+0x258>
    2d1e:	9c 83       	std	Y+4, r25	; 0x04
    2d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	9e 81       	ldd	r25, Y+6	; 0x06
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	9e 83       	std	Y+6, r25	; 0x06
    2d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	69 f7       	brne	.-38     	; 0x2d0e <checkPassAndAlarm+0x24c>
    2d34:	14 c0       	rjmp	.+40     	; 0x2d5e <checkPassAndAlarm+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d36:	6f 81       	ldd	r22, Y+7	; 0x07
    2d38:	78 85       	ldd	r23, Y+8	; 0x08
    2d3a:	89 85       	ldd	r24, Y+9	; 0x09
    2d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9e 83       	std	Y+6, r25	; 0x06
    2d48:	8d 83       	std	Y+5, r24	; 0x05
    2d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4e:	9a 83       	std	Y+2, r25	; 0x02
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <checkPassAndAlarm+0x294>
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(MESSAGE_DELAY);
			}
		}
	}while(wrongPass_flag);
    2d5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d60:	88 23       	and	r24, r24
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <checkPassAndAlarm+0x2a4>
    2d64:	b8 ce       	rjmp	.-656    	; 0x2ad6 <checkPassAndAlarm+0x14>
	g_incorrectPass1 = 1;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	80 93 77 01 	sts	0x0177, r24
}
    2d6c:	6f 96       	adiw	r28, 0x1f	; 31
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <delay_15s>:

void delay_15s(void)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	68 97       	sbiw	r28, 0x18	; 24
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
	Timer_ConfigType timer_configrations1 = {0, 65535, TIMER1_ID, F_CPU_1024, COMPARE_MODE};
    2d92:	ce 01       	movw	r24, r28
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	98 8b       	std	Y+16, r25	; 0x10
    2d98:	8f 87       	std	Y+15, r24	; 0x0f
    2d9a:	ef e7       	ldi	r30, 0x7F	; 127
    2d9c:	f1 e0       	ldi	r31, 0x01	; 1
    2d9e:	fa 8b       	std	Y+18, r31	; 0x12
    2da0:	e9 8b       	std	Y+17, r30	; 0x11
    2da2:	f7 e0       	ldi	r31, 0x07	; 7
    2da4:	fb 8b       	std	Y+19, r31	; 0x13
    2da6:	e9 89       	ldd	r30, Y+17	; 0x11
    2da8:	fa 89       	ldd	r31, Y+18	; 0x12
    2daa:	00 80       	ld	r0, Z
    2dac:	89 89       	ldd	r24, Y+17	; 0x11
    2dae:	9a 89       	ldd	r25, Y+18	; 0x12
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	9a 8b       	std	Y+18, r25	; 0x12
    2db4:	89 8b       	std	Y+17, r24	; 0x11
    2db6:	ef 85       	ldd	r30, Y+15	; 0x0f
    2db8:	f8 89       	ldd	r31, Y+16	; 0x10
    2dba:	00 82       	st	Z, r0
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	98 89       	ldd	r25, Y+16	; 0x10
    2dc0:	01 96       	adiw	r24, 0x01	; 1
    2dc2:	98 8b       	std	Y+16, r25	; 0x10
    2dc4:	8f 87       	std	Y+15, r24	; 0x0f
    2dc6:	9b 89       	ldd	r25, Y+19	; 0x13
    2dc8:	91 50       	subi	r25, 0x01	; 1
    2dca:	9b 8b       	std	Y+19, r25	; 0x13
    2dcc:	eb 89       	ldd	r30, Y+19	; 0x13
    2dce:	ee 23       	and	r30, r30
    2dd0:	51 f7       	brne	.-44     	; 0x2da6 <delay_15s+0x28>
	Timer_init(&timer_configrations1);
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_init>
	while(!(TIFR & (1<<OCF1A)));
    2dda:	e8 e5       	ldi	r30, 0x58	; 88
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	80 71       	andi	r24, 0x10	; 16
    2de6:	90 70       	andi	r25, 0x00	; 0
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	b9 f3       	breq	.-18     	; 0x2dda <delay_15s+0x5c>
	TIFR |= (1<<OCF1A);
    2dec:	a8 e5       	ldi	r26, 0x58	; 88
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e8 e5       	ldi	r30, 0x58	; 88
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	80 61       	ori	r24, 0x10	; 16
    2df8:	8c 93       	st	X, r24
	Timer_ConfigType timer_configrations2 = {0, 51621, TIMER1_ID, F_CPU_1024, COMPARE_MODE};
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	08 96       	adiw	r24, 0x08	; 8
    2dfe:	9d 8b       	std	Y+21, r25	; 0x15
    2e00:	8c 8b       	std	Y+20, r24	; 0x14
    2e02:	e8 e7       	ldi	r30, 0x78	; 120
    2e04:	f1 e0       	ldi	r31, 0x01	; 1
    2e06:	ff 8b       	std	Y+23, r31	; 0x17
    2e08:	ee 8b       	std	Y+22, r30	; 0x16
    2e0a:	f7 e0       	ldi	r31, 0x07	; 7
    2e0c:	f8 8f       	std	Y+24, r31	; 0x18
    2e0e:	ee 89       	ldd	r30, Y+22	; 0x16
    2e10:	ff 89       	ldd	r31, Y+23	; 0x17
    2e12:	00 80       	ld	r0, Z
    2e14:	8e 89       	ldd	r24, Y+22	; 0x16
    2e16:	9f 89       	ldd	r25, Y+23	; 0x17
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	9f 8b       	std	Y+23, r25	; 0x17
    2e1c:	8e 8b       	std	Y+22, r24	; 0x16
    2e1e:	ec 89       	ldd	r30, Y+20	; 0x14
    2e20:	fd 89       	ldd	r31, Y+21	; 0x15
    2e22:	00 82       	st	Z, r0
    2e24:	8c 89       	ldd	r24, Y+20	; 0x14
    2e26:	9d 89       	ldd	r25, Y+21	; 0x15
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	9d 8b       	std	Y+21, r25	; 0x15
    2e2c:	8c 8b       	std	Y+20, r24	; 0x14
    2e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e30:	91 50       	subi	r25, 0x01	; 1
    2e32:	98 8f       	std	Y+24, r25	; 0x18
    2e34:	e8 8d       	ldd	r30, Y+24	; 0x18
    2e36:	ee 23       	and	r30, r30
    2e38:	51 f7       	brne	.-44     	; 0x2e0e <delay_15s+0x90>
	Timer_init(&timer_configrations2);
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	08 96       	adiw	r24, 0x08	; 8
    2e3e:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_init>
	while(!(TIFR & (1<<OCF1A)));
    2e42:	e8 e5       	ldi	r30, 0x58	; 88
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	88 2f       	mov	r24, r24
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	80 71       	andi	r24, 0x10	; 16
    2e4e:	90 70       	andi	r25, 0x00	; 0
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	b9 f3       	breq	.-18     	; 0x2e42 <delay_15s+0xc4>
	TIFR |= (1<<OCF1A);
    2e54:	a8 e5       	ldi	r26, 0x58	; 88
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e8 e5       	ldi	r30, 0x58	; 88
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 61       	ori	r24, 0x10	; 16
    2e60:	8c 93       	st	X, r24
	Timer_deInit(TIMER1_ID);
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <Timer_deInit>
}
    2e68:	68 96       	adiw	r28, 0x18	; 24
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <main>:

int main(void)
{
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	c4 55       	subi	r28, 0x54	; 84
    2e88:	d0 40       	sbci	r29, 0x00	; 0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2e94:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <LCD_init>
	UART_ConfigType uart_configrations = {9600, UART_Parity_ODD, UART_STOP_1_BIT, MODE_EIGHT_BIT};
    2e98:	ce 01       	movw	r24, r28
    2e9a:	89 5b       	subi	r24, 0xB9	; 185
    2e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9e:	62 96       	adiw	r28, 0x12	; 18
    2ea0:	9f af       	std	Y+63, r25	; 0x3f
    2ea2:	8e af       	std	Y+62, r24	; 0x3e
    2ea4:	62 97       	sbiw	r28, 0x12	; 18
    2ea6:	26 e8       	ldi	r18, 0x86	; 134
    2ea8:	31 e0       	ldi	r19, 0x01	; 1
    2eaa:	64 96       	adiw	r28, 0x14	; 20
    2eac:	3f af       	std	Y+63, r19	; 0x3f
    2eae:	2e af       	std	Y+62, r18	; 0x3e
    2eb0:	64 97       	sbiw	r28, 0x14	; 20
    2eb2:	37 e0       	ldi	r19, 0x07	; 7
    2eb4:	65 96       	adiw	r28, 0x15	; 21
    2eb6:	3f af       	std	Y+63, r19	; 0x3f
    2eb8:	65 97       	sbiw	r28, 0x15	; 21
    2eba:	64 96       	adiw	r28, 0x14	; 20
    2ebc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ebe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ec0:	64 97       	sbiw	r28, 0x14	; 20
    2ec2:	00 80       	ld	r0, Z
    2ec4:	64 96       	adiw	r28, 0x14	; 20
    2ec6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ec8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2eca:	64 97       	sbiw	r28, 0x14	; 20
    2ecc:	2f 5f       	subi	r18, 0xFF	; 255
    2ece:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed0:	64 96       	adiw	r28, 0x14	; 20
    2ed2:	3f af       	std	Y+63, r19	; 0x3f
    2ed4:	2e af       	std	Y+62, r18	; 0x3e
    2ed6:	64 97       	sbiw	r28, 0x14	; 20
    2ed8:	62 96       	adiw	r28, 0x12	; 18
    2eda:	ee ad       	ldd	r30, Y+62	; 0x3e
    2edc:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ede:	62 97       	sbiw	r28, 0x12	; 18
    2ee0:	00 82       	st	Z, r0
    2ee2:	62 96       	adiw	r28, 0x12	; 18
    2ee4:	2e ad       	ldd	r18, Y+62	; 0x3e
    2ee6:	3f ad       	ldd	r19, Y+63	; 0x3f
    2ee8:	62 97       	sbiw	r28, 0x12	; 18
    2eea:	2f 5f       	subi	r18, 0xFF	; 255
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	62 96       	adiw	r28, 0x12	; 18
    2ef0:	3f af       	std	Y+63, r19	; 0x3f
    2ef2:	2e af       	std	Y+62, r18	; 0x3e
    2ef4:	62 97       	sbiw	r28, 0x12	; 18
    2ef6:	65 96       	adiw	r28, 0x15	; 21
    2ef8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2efa:	65 97       	sbiw	r28, 0x15	; 21
    2efc:	31 50       	subi	r19, 0x01	; 1
    2efe:	65 96       	adiw	r28, 0x15	; 21
    2f00:	3f af       	std	Y+63, r19	; 0x3f
    2f02:	65 97       	sbiw	r28, 0x15	; 21
    2f04:	65 96       	adiw	r28, 0x15	; 21
    2f06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f08:	65 97       	sbiw	r28, 0x15	; 21
    2f0a:	88 23       	and	r24, r24
    2f0c:	b1 f6       	brne	.-84     	; 0x2eba <main+0x40>
	UART_init(&uart_configrations);
    2f0e:	ce 01       	movw	r24, r28
    2f10:	89 5b       	subi	r24, 0xB9	; 185
    2f12:	9f 4f       	sbci	r25, 0xFF	; 255
    2f14:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <UART_init>

	LCD_displayStringRowColumn(0, 6, "Hello");
    2f18:	28 ec       	ldi	r18, 0xC8	; 200
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	66 e0       	ldi	r22, 0x06	; 6
    2f20:	a9 01       	movw	r20, r18
    2f22:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    2f26:	fe 01       	movw	r30, r28
    2f28:	ed 5b       	subi	r30, 0xBD	; 189
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e8       	ldi	r25, 0x80	; 128
    2f30:	ab e3       	ldi	r26, 0x3B	; 59
    2f32:	b4 e4       	ldi	r27, 0x44	; 68
    2f34:	80 83       	st	Z, r24
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	a2 83       	std	Z+2, r26	; 0x02
    2f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	8e 01       	movw	r16, r28
    2f3e:	01 5c       	subi	r16, 0xC1	; 193
    2f40:	1f 4f       	sbci	r17, 0xFF	; 255
    2f42:	fe 01       	movw	r30, r28
    2f44:	ed 5b       	subi	r30, 0xBD	; 189
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	60 81       	ld	r22, Z
    2f4a:	71 81       	ldd	r23, Z+1	; 0x01
    2f4c:	82 81       	ldd	r24, Z+2	; 0x02
    2f4e:	93 81       	ldd	r25, Z+3	; 0x03
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a ef       	ldi	r20, 0xFA	; 250
    2f56:	54 e4       	ldi	r21, 0x44	; 68
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	f8 01       	movw	r30, r16
    2f62:	80 83       	st	Z, r24
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	a2 83       	std	Z+2, r26	; 0x02
    2f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	ff 96       	adiw	r30, 0x3f	; 63
    2f6e:	60 81       	ld	r22, Z
    2f70:	71 81       	ldd	r23, Z+1	; 0x01
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	40 e8       	ldi	r20, 0x80	; 128
    2f7c:	5f e3       	ldi	r21, 0x3F	; 63
    2f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f82:	88 23       	and	r24, r24
    2f84:	2c f4       	brge	.+10     	; 0x2f90 <main+0x116>
		__ticks = 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9e af       	std	Y+62, r25	; 0x3e
    2f8c:	8d af       	std	Y+61, r24	; 0x3d
    2f8e:	46 c0       	rjmp	.+140    	; 0x301c <main+0x1a2>
	else if (__tmp > 65535)
    2f90:	fe 01       	movw	r30, r28
    2f92:	ff 96       	adiw	r30, 0x3f	; 63
    2f94:	60 81       	ld	r22, Z
    2f96:	71 81       	ldd	r23, Z+1	; 0x01
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	93 81       	ldd	r25, Z+3	; 0x03
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	3f ef       	ldi	r19, 0xFF	; 255
    2fa0:	4f e7       	ldi	r20, 0x7F	; 127
    2fa2:	57 e4       	ldi	r21, 0x47	; 71
    2fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa8:	18 16       	cp	r1, r24
    2faa:	64 f5       	brge	.+88     	; 0x3004 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fac:	fe 01       	movw	r30, r28
    2fae:	ed 5b       	subi	r30, 0xBD	; 189
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	60 81       	ld	r22, Z
    2fb4:	71 81       	ldd	r23, Z+1	; 0x01
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e2       	ldi	r20, 0x20	; 32
    2fc0:	51 e4       	ldi	r21, 0x41	; 65
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e af       	std	Y+62, r25	; 0x3e
    2fd8:	8d af       	std	Y+61, r24	; 0x3d
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <main+0x180>
    2fdc:	88 ec       	ldi	r24, 0xC8	; 200
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9c af       	std	Y+60, r25	; 0x3c
    2fe2:	8b af       	std	Y+59, r24	; 0x3b
    2fe4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fe6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <main+0x16e>
    2fec:	9c af       	std	Y+60, r25	; 0x3c
    2fee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	9e af       	std	Y+62, r25	; 0x3e
    2ff8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	69 f7       	brne	.-38     	; 0x2fdc <main+0x162>
    3002:	16 c0       	rjmp	.+44     	; 0x3030 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3004:	fe 01       	movw	r30, r28
    3006:	ff 96       	adiw	r30, 0x3f	; 63
    3008:	60 81       	ld	r22, Z
    300a:	71 81       	ldd	r23, Z+1	; 0x01
    300c:	82 81       	ldd	r24, Z+2	; 0x02
    300e:	93 81       	ldd	r25, Z+3	; 0x03
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9e af       	std	Y+62, r25	; 0x3e
    301a:	8d af       	std	Y+61, r24	; 0x3d
    301c:	8d ad       	ldd	r24, Y+61	; 0x3d
    301e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3020:	9a af       	std	Y+58, r25	; 0x3a
    3022:	89 af       	std	Y+57, r24	; 0x39
    3024:	89 ad       	ldd	r24, Y+57	; 0x39
    3026:	9a ad       	ldd	r25, Y+58	; 0x3a
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <main+0x1ae>
    302c:	9a af       	std	Y+58, r25	; 0x3a
    302e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(MESSAGE_DELAY);
	LCD_clearScreen();
    3030:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "Welcome To our");
    3034:	2e ec       	ldi	r18, 0xCE	; 206
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	a9 01       	movw	r20, r18
    303e:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 5, "System");
    3042:	2d ed       	ldi	r18, 0xDD	; 221
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	65 e0       	ldi	r22, 0x05	; 5
    304a:	a9 01       	movw	r20, r18
    304c:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	90 e8       	ldi	r25, 0x80	; 128
    3054:	ab e3       	ldi	r26, 0x3B	; 59
    3056:	b4 e4       	ldi	r27, 0x44	; 68
    3058:	8d ab       	std	Y+53, r24	; 0x35
    305a:	9e ab       	std	Y+54, r25	; 0x36
    305c:	af ab       	std	Y+55, r26	; 0x37
    305e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3060:	6d a9       	ldd	r22, Y+53	; 0x35
    3062:	7e a9       	ldd	r23, Y+54	; 0x36
    3064:	8f a9       	ldd	r24, Y+55	; 0x37
    3066:	98 ad       	ldd	r25, Y+56	; 0x38
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	4a ef       	ldi	r20, 0xFA	; 250
    306e:	54 e4       	ldi	r21, 0x44	; 68
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	89 ab       	std	Y+49, r24	; 0x31
    307a:	9a ab       	std	Y+50, r25	; 0x32
    307c:	ab ab       	std	Y+51, r26	; 0x33
    307e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3080:	69 a9       	ldd	r22, Y+49	; 0x31
    3082:	7a a9       	ldd	r23, Y+50	; 0x32
    3084:	8b a9       	ldd	r24, Y+51	; 0x33
    3086:	9c a9       	ldd	r25, Y+52	; 0x34
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e8       	ldi	r20, 0x80	; 128
    308e:	5f e3       	ldi	r21, 0x3F	; 63
    3090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3094:	88 23       	and	r24, r24
    3096:	2c f4       	brge	.+10     	; 0x30a2 <main+0x228>
		__ticks = 1;
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	98 ab       	std	Y+48, r25	; 0x30
    309e:	8f a7       	std	Y+47, r24	; 0x2f
    30a0:	3f c0       	rjmp	.+126    	; 0x3120 <main+0x2a6>
	else if (__tmp > 65535)
    30a2:	69 a9       	ldd	r22, Y+49	; 0x31
    30a4:	7a a9       	ldd	r23, Y+50	; 0x32
    30a6:	8b a9       	ldd	r24, Y+51	; 0x33
    30a8:	9c a9       	ldd	r25, Y+52	; 0x34
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	3f ef       	ldi	r19, 0xFF	; 255
    30ae:	4f e7       	ldi	r20, 0x7F	; 127
    30b0:	57 e4       	ldi	r21, 0x47	; 71
    30b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b6:	18 16       	cp	r1, r24
    30b8:	4c f5       	brge	.+82     	; 0x310c <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ba:	6d a9       	ldd	r22, Y+53	; 0x35
    30bc:	7e a9       	ldd	r23, Y+54	; 0x36
    30be:	8f a9       	ldd	r24, Y+55	; 0x37
    30c0:	98 ad       	ldd	r25, Y+56	; 0x38
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e2       	ldi	r20, 0x20	; 32
    30c8:	51 e4       	ldi	r21, 0x41	; 65
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	98 ab       	std	Y+48, r25	; 0x30
    30e0:	8f a7       	std	Y+47, r24	; 0x2f
    30e2:	0f c0       	rjmp	.+30     	; 0x3102 <main+0x288>
    30e4:	88 ec       	ldi	r24, 0xC8	; 200
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9e a7       	std	Y+46, r25	; 0x2e
    30ea:	8d a7       	std	Y+45, r24	; 0x2d
    30ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <main+0x276>
    30f4:	9e a7       	std	Y+46, r25	; 0x2e
    30f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fa:	98 a9       	ldd	r25, Y+48	; 0x30
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	98 ab       	std	Y+48, r25	; 0x30
    3100:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3102:	8f a5       	ldd	r24, Y+47	; 0x2f
    3104:	98 a9       	ldd	r25, Y+48	; 0x30
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	69 f7       	brne	.-38     	; 0x30e4 <main+0x26a>
    310a:	14 c0       	rjmp	.+40     	; 0x3134 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310c:	69 a9       	ldd	r22, Y+49	; 0x31
    310e:	7a a9       	ldd	r23, Y+50	; 0x32
    3110:	8b a9       	ldd	r24, Y+51	; 0x33
    3112:	9c a9       	ldd	r25, Y+52	; 0x34
    3114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	98 ab       	std	Y+48, r25	; 0x30
    311e:	8f a7       	std	Y+47, r24	; 0x2f
    3120:	8f a5       	ldd	r24, Y+47	; 0x2f
    3122:	98 a9       	ldd	r25, Y+48	; 0x30
    3124:	9c a7       	std	Y+44, r25	; 0x2c
    3126:	8b a7       	std	Y+43, r24	; 0x2b
    3128:	8b a5       	ldd	r24, Y+43	; 0x2b
    312a:	9c a5       	ldd	r25, Y+44	; 0x2c
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <main+0x2b2>
    3130:	9c a7       	std	Y+44, r25	; 0x2c
    3132:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(MESSAGE_DELAY);

	creatingPassword();
    3134:	0e 94 8b 14 	call	0x2916	; 0x2916 <creatingPassword>

	LCD_clearScreen();
    3138:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Password Created");
    313c:	24 ee       	ldi	r18, 0xE4	; 228
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	a9 01       	movw	r20, r18
    3146:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 2, "Successfully");
    314a:	25 ef       	ldi	r18, 0xF5	; 245
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	62 e0       	ldi	r22, 0x02	; 2
    3152:	a9 01       	movw	r20, r18
    3154:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e8       	ldi	r25, 0x80	; 128
    315c:	ab e3       	ldi	r26, 0x3B	; 59
    315e:	b4 e4       	ldi	r27, 0x44	; 68
    3160:	8f a3       	std	Y+39, r24	; 0x27
    3162:	98 a7       	std	Y+40, r25	; 0x28
    3164:	a9 a7       	std	Y+41, r26	; 0x29
    3166:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6f a1       	ldd	r22, Y+39	; 0x27
    316a:	78 a5       	ldd	r23, Y+40	; 0x28
    316c:	89 a5       	ldd	r24, Y+41	; 0x29
    316e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4a ef       	ldi	r20, 0xFA	; 250
    3176:	54 e4       	ldi	r21, 0x44	; 68
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8b a3       	std	Y+35, r24	; 0x23
    3182:	9c a3       	std	Y+36, r25	; 0x24
    3184:	ad a3       	std	Y+37, r26	; 0x25
    3186:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3188:	6b a1       	ldd	r22, Y+35	; 0x23
    318a:	7c a1       	ldd	r23, Y+36	; 0x24
    318c:	8d a1       	ldd	r24, Y+37	; 0x25
    318e:	9e a1       	ldd	r25, Y+38	; 0x26
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <main+0x330>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9a a3       	std	Y+34, r25	; 0x22
    31a6:	89 a3       	std	Y+33, r24	; 0x21
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <main+0x3ae>
	else if (__tmp > 65535)
    31aa:	6b a1       	ldd	r22, Y+35	; 0x23
    31ac:	7c a1       	ldd	r23, Y+36	; 0x24
    31ae:	8d a1       	ldd	r24, Y+37	; 0x25
    31b0:	9e a1       	ldd	r25, Y+38	; 0x26
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6f a1       	ldd	r22, Y+39	; 0x27
    31c4:	78 a5       	ldd	r23, Y+40	; 0x28
    31c6:	89 a5       	ldd	r24, Y+41	; 0x29
    31c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <main+0x390>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	98 a3       	std	Y+32, r25	; 0x20
    31f2:	8f 8f       	std	Y+31, r24	; 0x1f
    31f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31f6:	98 a1       	ldd	r25, Y+32	; 0x20
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <main+0x37e>
    31fc:	98 a3       	std	Y+32, r25	; 0x20
    31fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	89 a1       	ldd	r24, Y+33	; 0x21
    3202:	9a a1       	ldd	r25, Y+34	; 0x22
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9a a3       	std	Y+34, r25	; 0x22
    3208:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	89 a1       	ldd	r24, Y+33	; 0x21
    320c:	9a a1       	ldd	r25, Y+34	; 0x22
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <main+0x372>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	6b a1       	ldd	r22, Y+35	; 0x23
    3216:	7c a1       	ldd	r23, Y+36	; 0x24
    3218:	8d a1       	ldd	r24, Y+37	; 0x25
    321a:	9e a1       	ldd	r25, Y+38	; 0x26
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9a a3       	std	Y+34, r25	; 0x22
    3226:	89 a3       	std	Y+33, r24	; 0x21
    3228:	89 a1       	ldd	r24, Y+33	; 0x21
    322a:	9a a1       	ldd	r25, Y+34	; 0x22
    322c:	9e 8f       	std	Y+30, r25	; 0x1e
    322e:	8d 8f       	std	Y+29, r24	; 0x1d
    3230:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3232:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <main+0x3ba>
    3238:	9e 8f       	std	Y+30, r25	; 0x1e
    323a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(MESSAGE_DELAY);

	while(1)
	{
		LCD_clearScreen();
    323c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    3240:	22 e0       	ldi	r18, 0x02	; 2
    3242:	31 e0       	ldi	r19, 0x01	; 1
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	a9 01       	movw	r20, r18
    324a:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    324e:	20 e1       	ldi	r18, 0x10	; 16
    3250:	31 e0       	ldi	r19, 0x01	; 1
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	a9 01       	movw	r20, r18
    3258:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>

		UART_sendByte(I_AM_READY);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
		while(I_AM_READY != UART_receiveByte());
    3262:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	e1 f7       	brne	.-8      	; 0x3262 <main+0x3e8>
		UART_sendByte(KEYPAD_getPressedKey());
    326a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <KEYPAD_getPressedKey>
    326e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>

		switch (KEYPAD_getPressedKey())
    3272:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <KEYPAD_getPressedKey>
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	60 96       	adiw	r28, 0x10	; 16
    327c:	3f af       	std	Y+63, r19	; 0x3f
    327e:	2e af       	std	Y+62, r18	; 0x3e
    3280:	60 97       	sbiw	r28, 0x10	; 16
    3282:	60 96       	adiw	r28, 0x10	; 16
    3284:	8e ad       	ldd	r24, Y+62	; 0x3e
    3286:	9f ad       	ldd	r25, Y+63	; 0x3f
    3288:	60 97       	sbiw	r28, 0x10	; 16
    328a:	8b 32       	cpi	r24, 0x2B	; 43
    328c:	91 05       	cpc	r25, r1
    328e:	49 f0       	breq	.+18     	; 0x32a2 <main+0x428>
    3290:	60 96       	adiw	r28, 0x10	; 16
    3292:	ee ad       	ldd	r30, Y+62	; 0x3e
    3294:	ff ad       	ldd	r31, Y+63	; 0x3f
    3296:	60 97       	sbiw	r28, 0x10	; 16
    3298:	ed 32       	cpi	r30, 0x2D	; 45
    329a:	f1 05       	cpc	r31, r1
    329c:	09 f4       	brne	.+2      	; 0x32a0 <main+0x426>
    329e:	48 c0       	rjmp	.+144    	; 0x3330 <main+0x4b6>
    32a0:	d6 c0       	rjmp	.+428    	; 0x344e <main+0x5d4>
		{
		case '+':
			checkPassAndAlarm();
    32a2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <checkPassAndAlarm>
			if(3 == g_incorrectPass1)
    32a6:	80 91 77 01 	lds	r24, 0x0177
    32aa:	83 30       	cpi	r24, 0x03	; 3
    32ac:	21 f4       	brne	.+8      	; 0x32b6 <main+0x43c>
			{
				g_incorrectPass1 = 1;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	80 93 77 01 	sts	0x0177, r24
    32b4:	c3 cf       	rjmp	.-122    	; 0x323c <main+0x3c2>
				break;
			}
			LCD_clearScreen();
    32b6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    32ba:	20 e2       	ldi	r18, 0x20	; 32
    32bc:	31 e0       	ldi	r19, 0x01	; 1
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	61 e0       	ldi	r22, 0x01	; 1
    32c2:	a9 01       	movw	r20, r18
    32c4:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 4, "PLZ Wait");
    32c8:	2f e2       	ldi	r18, 0x2F	; 47
    32ca:	31 e0       	ldi	r19, 0x01	; 1
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	64 e0       	ldi	r22, 0x04	; 4
    32d0:	a9 01       	movw	r20, r18
    32d2:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
			delay_15s();
    32d6:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <delay_15s>

			while(I_AM_READY != UART_receiveByte());
    32da:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	e1 f7       	brne	.-8      	; 0x32da <main+0x460>
			UART_sendByte(I_AM_READY);
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <UART_sendByte>
			if(UART_receiveByte())
    32e8:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    32ec:	88 23       	and	r24, r24
    32ee:	81 f0       	breq	.+32     	; 0x3310 <main+0x496>
			{
				LCD_clearScreen();
    32f0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Wait For People");
    32f4:	28 e3       	ldi	r18, 0x38	; 56
    32f6:	31 e0       	ldi	r19, 0x01	; 1
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	a9 01       	movw	r20, r18
    32fe:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 4, "To Enter");
    3302:	28 e4       	ldi	r18, 0x48	; 72
    3304:	31 e0       	ldi	r19, 0x01	; 1
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	64 e0       	ldi	r22, 0x04	; 4
    330a:	a9 01       	movw	r20, r18
    330c:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
			}

			while(UART_receiveByte());
    3310:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_receiveByte>
    3314:	88 23       	and	r24, r24
    3316:	e1 f7       	brne	.-8      	; 0x3310 <main+0x496>

			LCD_clearScreen();
    3318:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 2, "Door Locking");
    331c:	21 e5       	ldi	r18, 0x51	; 81
    331e:	31 e0       	ldi	r19, 0x01	; 1
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	62 e0       	ldi	r22, 0x02	; 2
    3324:	a9 01       	movw	r20, r18
    3326:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
			delay_15s();
    332a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <delay_15s>
    332e:	86 cf       	rjmp	.-244    	; 0x323c <main+0x3c2>
			break;

		case '-':
			checkPassAndAlarm();
    3330:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <checkPassAndAlarm>
			if(3 == g_incorrectPass1)
    3334:	80 91 77 01 	lds	r24, 0x0177
    3338:	83 30       	cpi	r24, 0x03	; 3
    333a:	21 f4       	brne	.+8      	; 0x3344 <main+0x4ca>
			{
				g_incorrectPass1 = 1;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	80 93 77 01 	sts	0x0177, r24
    3342:	7c cf       	rjmp	.-264    	; 0x323c <main+0x3c2>
				break;
			}
			creatingPassword();
    3344:	0e 94 8b 14 	call	0x2916	; 0x2916 <creatingPassword>
			LCD_clearScreen();
    3348:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Password Changed");
    334c:	2e e5       	ldi	r18, 0x5E	; 94
    334e:	31 e0       	ldi	r19, 0x01	; 1
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	a9 01       	movw	r20, r18
    3356:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 2, "Successfully");
    335a:	25 ef       	ldi	r18, 0xF5	; 245
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	62 e0       	ldi	r22, 0x02	; 2
    3362:	a9 01       	movw	r20, r18
    3364:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e8       	ldi	r25, 0x80	; 128
    336c:	ab e3       	ldi	r26, 0x3B	; 59
    336e:	b4 e4       	ldi	r27, 0x44	; 68
    3370:	89 8f       	std	Y+25, r24	; 0x19
    3372:	9a 8f       	std	Y+26, r25	; 0x1a
    3374:	ab 8f       	std	Y+27, r26	; 0x1b
    3376:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3378:	69 8d       	ldd	r22, Y+25	; 0x19
    337a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    337c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    337e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a ef       	ldi	r20, 0xFA	; 250
    3386:	54 e4       	ldi	r21, 0x44	; 68
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	8d 8b       	std	Y+21, r24	; 0x15
    3392:	9e 8b       	std	Y+22, r25	; 0x16
    3394:	af 8b       	std	Y+23, r26	; 0x17
    3396:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3398:	6d 89       	ldd	r22, Y+21	; 0x15
    339a:	7e 89       	ldd	r23, Y+22	; 0x16
    339c:	8f 89       	ldd	r24, Y+23	; 0x17
    339e:	98 8d       	ldd	r25, Y+24	; 0x18
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ac:	88 23       	and	r24, r24
    33ae:	2c f4       	brge	.+10     	; 0x33ba <main+0x540>
		__ticks = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9c 8b       	std	Y+20, r25	; 0x14
    33b6:	8b 8b       	std	Y+19, r24	; 0x13
    33b8:	3f c0       	rjmp	.+126    	; 0x3438 <main+0x5be>
	else if (__tmp > 65535)
    33ba:	6d 89       	ldd	r22, Y+21	; 0x15
    33bc:	7e 89       	ldd	r23, Y+22	; 0x16
    33be:	8f 89       	ldd	r24, Y+23	; 0x17
    33c0:	98 8d       	ldd	r25, Y+24	; 0x18
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	4f e7       	ldi	r20, 0x7F	; 127
    33c8:	57 e4       	ldi	r21, 0x47	; 71
    33ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ce:	18 16       	cp	r1, r24
    33d0:	4c f5       	brge	.+82     	; 0x3424 <main+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d2:	69 8d       	ldd	r22, Y+25	; 0x19
    33d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	bc 01       	movw	r22, r24
    33ec:	cd 01       	movw	r24, r26
    33ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	9c 8b       	std	Y+20, r25	; 0x14
    33f8:	8b 8b       	std	Y+19, r24	; 0x13
    33fa:	0f c0       	rjmp	.+30     	; 0x341a <main+0x5a0>
    33fc:	88 ec       	ldi	r24, 0xC8	; 200
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	9a 8b       	std	Y+18, r25	; 0x12
    3402:	89 8b       	std	Y+17, r24	; 0x11
    3404:	89 89       	ldd	r24, Y+17	; 0x11
    3406:	9a 89       	ldd	r25, Y+18	; 0x12
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <main+0x58e>
    340c:	9a 8b       	std	Y+18, r25	; 0x12
    340e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3410:	8b 89       	ldd	r24, Y+19	; 0x13
    3412:	9c 89       	ldd	r25, Y+20	; 0x14
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	9c 8b       	std	Y+20, r25	; 0x14
    3418:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	00 97       	sbiw	r24, 0x00	; 0
    3420:	69 f7       	brne	.-38     	; 0x33fc <main+0x582>
    3422:	0c cf       	rjmp	.-488    	; 0x323c <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3424:	6d 89       	ldd	r22, Y+21	; 0x15
    3426:	7e 89       	ldd	r23, Y+22	; 0x16
    3428:	8f 89       	ldd	r24, Y+23	; 0x17
    342a:	98 8d       	ldd	r25, Y+24	; 0x18
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9c 8b       	std	Y+20, r25	; 0x14
    3436:	8b 8b       	std	Y+19, r24	; 0x13
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	98 8b       	std	Y+16, r25	; 0x10
    343e:	8f 87       	std	Y+15, r24	; 0x0f
    3440:	8f 85       	ldd	r24, Y+15	; 0x0f
    3442:	98 89       	ldd	r25, Y+16	; 0x10
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <main+0x5ca>
    3448:	98 8b       	std	Y+16, r25	; 0x10
    344a:	8f 87       	std	Y+15, r24	; 0x0f
    344c:	f7 ce       	rjmp	.-530    	; 0x323c <main+0x3c2>
			_delay_ms(MESSAGE_DELAY);
			break;

		default:
			LCD_clearScreen();
    344e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 3, "Try Again.");
    3452:	2c e8       	ldi	r18, 0x8C	; 140
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	63 e0       	ldi	r22, 0x03	; 3
    345a:	a9 01       	movw	r20, r18
    345c:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_displayStringRowColumn>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e8       	ldi	r25, 0x80	; 128
    3464:	ab e3       	ldi	r26, 0x3B	; 59
    3466:	b4 e4       	ldi	r27, 0x44	; 68
    3468:	8b 87       	std	Y+11, r24	; 0x0b
    346a:	9c 87       	std	Y+12, r25	; 0x0c
    346c:	ad 87       	std	Y+13, r26	; 0x0d
    346e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3470:	6b 85       	ldd	r22, Y+11	; 0x0b
    3472:	7c 85       	ldd	r23, Y+12	; 0x0c
    3474:	8d 85       	ldd	r24, Y+13	; 0x0d
    3476:	9e 85       	ldd	r25, Y+14	; 0x0e
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a ef       	ldi	r20, 0xFA	; 250
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8f 83       	std	Y+7, r24	; 0x07
    348a:	98 87       	std	Y+8, r25	; 0x08
    348c:	a9 87       	std	Y+9, r26	; 0x09
    348e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3490:	6f 81       	ldd	r22, Y+7	; 0x07
    3492:	78 85       	ldd	r23, Y+8	; 0x08
    3494:	89 85       	ldd	r24, Y+9	; 0x09
    3496:	9a 85       	ldd	r25, Y+10	; 0x0a
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e8       	ldi	r20, 0x80	; 128
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <main+0x638>
		__ticks = 1;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	3f c0       	rjmp	.+126    	; 0x3530 <main+0x6b6>
	else if (__tmp > 65535)
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	78 85       	ldd	r23, Y+8	; 0x08
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	3f ef       	ldi	r19, 0xFF	; 255
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	57 e4       	ldi	r21, 0x47	; 71
    34c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	4c f5       	brge	.+82     	; 0x351c <main+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    34cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	9e 83       	std	Y+6, r25	; 0x06
    34f0:	8d 83       	std	Y+5, r24	; 0x05
    34f2:	0f c0       	rjmp	.+30     	; 0x3512 <main+0x698>
    34f4:	88 ec       	ldi	r24, 0xC8	; 200
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <main+0x686>
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	9e 81       	ldd	r25, Y+6	; 0x06
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	69 f7       	brne	.-38     	; 0x34f4 <main+0x67a>
    351a:	90 ce       	rjmp	.-736    	; 0x323c <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351c:	6f 81       	ldd	r22, Y+7	; 0x07
    351e:	78 85       	ldd	r23, Y+8	; 0x08
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	8d 81       	ldd	r24, Y+5	; 0x05
    3532:	9e 81       	ldd	r25, Y+6	; 0x06
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <main+0x6c2>
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	7b ce       	rjmp	.-778    	; 0x323c <main+0x3c2>

00003546 <__udivmodsi4>:
    3546:	a1 e2       	ldi	r26, 0x21	; 33
    3548:	1a 2e       	mov	r1, r26
    354a:	aa 1b       	sub	r26, r26
    354c:	bb 1b       	sub	r27, r27
    354e:	fd 01       	movw	r30, r26
    3550:	0d c0       	rjmp	.+26     	; 0x356c <__udivmodsi4_ep>

00003552 <__udivmodsi4_loop>:
    3552:	aa 1f       	adc	r26, r26
    3554:	bb 1f       	adc	r27, r27
    3556:	ee 1f       	adc	r30, r30
    3558:	ff 1f       	adc	r31, r31
    355a:	a2 17       	cp	r26, r18
    355c:	b3 07       	cpc	r27, r19
    355e:	e4 07       	cpc	r30, r20
    3560:	f5 07       	cpc	r31, r21
    3562:	20 f0       	brcs	.+8      	; 0x356c <__udivmodsi4_ep>
    3564:	a2 1b       	sub	r26, r18
    3566:	b3 0b       	sbc	r27, r19
    3568:	e4 0b       	sbc	r30, r20
    356a:	f5 0b       	sbc	r31, r21

0000356c <__udivmodsi4_ep>:
    356c:	66 1f       	adc	r22, r22
    356e:	77 1f       	adc	r23, r23
    3570:	88 1f       	adc	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	1a 94       	dec	r1
    3576:	69 f7       	brne	.-38     	; 0x3552 <__udivmodsi4_loop>
    3578:	60 95       	com	r22
    357a:	70 95       	com	r23
    357c:	80 95       	com	r24
    357e:	90 95       	com	r25
    3580:	9b 01       	movw	r18, r22
    3582:	ac 01       	movw	r20, r24
    3584:	bd 01       	movw	r22, r26
    3586:	cf 01       	movw	r24, r30
    3588:	08 95       	ret

0000358a <__prologue_saves__>:
    358a:	2f 92       	push	r2
    358c:	3f 92       	push	r3
    358e:	4f 92       	push	r4
    3590:	5f 92       	push	r5
    3592:	6f 92       	push	r6
    3594:	7f 92       	push	r7
    3596:	8f 92       	push	r8
    3598:	9f 92       	push	r9
    359a:	af 92       	push	r10
    359c:	bf 92       	push	r11
    359e:	cf 92       	push	r12
    35a0:	df 92       	push	r13
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	ca 1b       	sub	r28, r26
    35b4:	db 0b       	sbc	r29, r27
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	09 94       	ijmp

000035c2 <__epilogue_restores__>:
    35c2:	2a 88       	ldd	r2, Y+18	; 0x12
    35c4:	39 88       	ldd	r3, Y+17	; 0x11
    35c6:	48 88       	ldd	r4, Y+16	; 0x10
    35c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    35ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    35cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    35d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    35d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    35d4:	b9 84       	ldd	r11, Y+9	; 0x09
    35d6:	c8 84       	ldd	r12, Y+8	; 0x08
    35d8:	df 80       	ldd	r13, Y+7	; 0x07
    35da:	ee 80       	ldd	r14, Y+6	; 0x06
    35dc:	fd 80       	ldd	r15, Y+5	; 0x05
    35de:	0c 81       	ldd	r16, Y+4	; 0x04
    35e0:	1b 81       	ldd	r17, Y+3	; 0x03
    35e2:	aa 81       	ldd	r26, Y+2	; 0x02
    35e4:	b9 81       	ldd	r27, Y+1	; 0x01
    35e6:	ce 0f       	add	r28, r30
    35e8:	d1 1d       	adc	r29, r1
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	ed 01       	movw	r28, r26
    35f6:	08 95       	ret

000035f8 <itoa>:
    35f8:	fb 01       	movw	r30, r22
    35fa:	9f 01       	movw	r18, r30
    35fc:	e8 94       	clt
    35fe:	42 30       	cpi	r20, 0x02	; 2
    3600:	c4 f0       	brlt	.+48     	; 0x3632 <itoa+0x3a>
    3602:	45 32       	cpi	r20, 0x25	; 37
    3604:	b4 f4       	brge	.+44     	; 0x3632 <itoa+0x3a>
    3606:	4a 30       	cpi	r20, 0x0A	; 10
    3608:	29 f4       	brne	.+10     	; 0x3614 <itoa+0x1c>
    360a:	97 fb       	bst	r25, 7
    360c:	1e f4       	brtc	.+6      	; 0x3614 <itoa+0x1c>
    360e:	90 95       	com	r25
    3610:	81 95       	neg	r24
    3612:	9f 4f       	sbci	r25, 0xFF	; 255
    3614:	64 2f       	mov	r22, r20
    3616:	77 27       	eor	r23, r23
    3618:	0e 94 2d 1b 	call	0x365a	; 0x365a <__udivmodhi4>
    361c:	80 5d       	subi	r24, 0xD0	; 208
    361e:	8a 33       	cpi	r24, 0x3A	; 58
    3620:	0c f0       	brlt	.+2      	; 0x3624 <itoa+0x2c>
    3622:	89 5d       	subi	r24, 0xD9	; 217
    3624:	81 93       	st	Z+, r24
    3626:	cb 01       	movw	r24, r22
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	a1 f7       	brne	.-24     	; 0x3614 <itoa+0x1c>
    362c:	16 f4       	brtc	.+4      	; 0x3632 <itoa+0x3a>
    362e:	5d e2       	ldi	r21, 0x2D	; 45
    3630:	51 93       	st	Z+, r21
    3632:	10 82       	st	Z, r1
    3634:	c9 01       	movw	r24, r18
    3636:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <strrev>

0000363a <strrev>:
    363a:	dc 01       	movw	r26, r24
    363c:	fc 01       	movw	r30, r24
    363e:	67 2f       	mov	r22, r23
    3640:	71 91       	ld	r23, Z+
    3642:	77 23       	and	r23, r23
    3644:	e1 f7       	brne	.-8      	; 0x363e <strrev+0x4>
    3646:	32 97       	sbiw	r30, 0x02	; 2
    3648:	04 c0       	rjmp	.+8      	; 0x3652 <strrev+0x18>
    364a:	7c 91       	ld	r23, X
    364c:	6d 93       	st	X+, r22
    364e:	70 83       	st	Z, r23
    3650:	62 91       	ld	r22, -Z
    3652:	ae 17       	cp	r26, r30
    3654:	bf 07       	cpc	r27, r31
    3656:	c8 f3       	brcs	.-14     	; 0x364a <strrev+0x10>
    3658:	08 95       	ret

0000365a <__udivmodhi4>:
    365a:	aa 1b       	sub	r26, r26
    365c:	bb 1b       	sub	r27, r27
    365e:	51 e1       	ldi	r21, 0x11	; 17
    3660:	07 c0       	rjmp	.+14     	; 0x3670 <__udivmodhi4_ep>

00003662 <__udivmodhi4_loop>:
    3662:	aa 1f       	adc	r26, r26
    3664:	bb 1f       	adc	r27, r27
    3666:	a6 17       	cp	r26, r22
    3668:	b7 07       	cpc	r27, r23
    366a:	10 f0       	brcs	.+4      	; 0x3670 <__udivmodhi4_ep>
    366c:	a6 1b       	sub	r26, r22
    366e:	b7 0b       	sbc	r27, r23

00003670 <__udivmodhi4_ep>:
    3670:	88 1f       	adc	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	5a 95       	dec	r21
    3676:	a9 f7       	brne	.-22     	; 0x3662 <__udivmodhi4_loop>
    3678:	80 95       	com	r24
    367a:	90 95       	com	r25
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	08 95       	ret

00003682 <_exit>:
    3682:	f8 94       	cli

00003684 <__stop_program>:
    3684:	ff cf       	rjmp	.-2      	; 0x3684 <__stop_program>
